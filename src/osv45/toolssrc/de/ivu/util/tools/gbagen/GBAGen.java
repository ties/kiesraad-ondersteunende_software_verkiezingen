/*
 * GBAGen
 * 
 * Created on 24.11.2009
 * Copyright (c) 2009 IVU Traffic Technologies AG
 */
package de.ivu.util.tools.gbagen;

import static java.lang.System.out;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

/**
 * @author T. Ducke, IVU Traffic Technologies AG
 */
public class GBAGen {

  private static String inputFile = null;
  private static String outputFile = null;

  /**
   * @param args
   */
  public static void main(String[] argv) {
    out.println("Generating GBA JavaScript data");

    if (argv.length == 2) {
      inputFile = argv[0];
      outputFile = argv[1];
    } else {
      System.exit(-1);
    }

    try {
      out.println("Read file: " + inputFile);
      List<String> gbaProposals = readListFromInputFile();
      String outputText = convertForJS(gbaProposals);
      out.println("Write file: " + outputFile);
      writeToFile(outputText);
    } catch (IOException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }

  /**
   * @param gbaProposals
   * @return
   */
  private static String convertForJS(List<String> gbaProposals) {
    StringBuffer result = new StringBuffer();
    result.append("/**\n");
    result.append(" * !!! This file was generated by ant target 'gen' !!!\n");
    result.append(" *\n");
    result.append(" * Manual changes will be overwritten.\n");
    result
        .append(" * Use \"/de.ivu.wahl.wus.util/src/main/java/de/ivu/wahl/wus/utils/ui/gba_classes.txt\"\n");
    result.append(" * for chnages on GBA character classes.\n");
    result.append(" */\n\n");
    result.append("var gbaData = \"");
    for (String gbaClass : gbaProposals) {
      char[] charArray = gbaClass.toCharArray();
      for (char gbaCharacter : charArray) {
        if ('"' == charArray[0]) {
          result.append('\\');
        }
        result.append(charArray[0]);
        if ('"' == gbaCharacter) {
          result.append('\\');
        }
        result.append(gbaCharacter);
        result.append("##");
      }
    }
    result.append("\".split(\"##\");\n");
    return result.toString();
  }

  /**
   * @param output
   * @throws IOException
   */
  private static void writeToFile(final String outputText) throws IOException {
    if (outputFile == null) {
      throw new IOException("missing argument for output file");
    }
    File file = new File(outputFile);
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),
        "UTF-8"));
    writer.write(outputText);
    writer.close();
  }

  /**
   * @param fileName
   * @throws IOException
   */
  static List<String> readListFromInputFile() throws IOException {
    final List<String> list = new ArrayList<String>();

    if (inputFile == null) {
      throw new IOException("missing argument for input file");
    }
    File file = new File(inputFile);
    if (!file.canRead()) {
      throw new IOException("cannot read from file: " + inputFile);
    }

    BufferedReader br;
    br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
    String line;
    try {
      while (null != (line = br.readLine())) {
        list.add(line);
      }
    } catch (final IOException e) {
      throw new RuntimeException("Failed to read file:" + inputFile, e);
    } finally {
      try {
        br.close();
      } catch (final IOException e) {
        // nothing to do
      }
    }

    return list;
  }

}
