<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2017 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altova-xfi="http://www.altova.com/xslt-extensions/xbrl" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:clitype="clitype" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:eml="urn:oasis:names:tc:evs:schema:eml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:kr="http://www.kiesraad.nl/extensions" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:rg="http://www.kiesraad.nl/reportgenerator" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:ts="urn:oasis:names:tc:evs:schema:eml:ts" xmlns:xal="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xff="http://www.xbrl.org/2010/function/formula" xmlns:xfi="http://www.xbrl.org/2008/function/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xnl="urn:oasis:names:tc:ciq:xsdschema:xNL:2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altova-xfi altovaext array clitype ds eml fn iso4217 ix java kr link map math rg sps ts xal xbrldi xbrli xff xfi xlink xnl xs xsi">
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-simple-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\osv5-2-text.xslt"/>
    <xsl:output method="text" encoding="UTF-8"/>
    <xsl:param name="SV_OutputFormat" select="'RTF'"/>
    <xsl:param name="generateDate" select="'01-02-2003 04:05:06'"/>
    <xsl:param name="hashCode" select="'1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF 1234 5678 90AB CDEF'"/>
    <xsl:param name="isDraft" select="'false'"/>
    <xsl:param name="lang" select="'1'"/>
    <xsl:variable name="XML" select="/"/>
    <xsl:variable name="altova:nPxPerIn" select="96"/>
    <xsl:template match="*" priority="-1.0">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:apply-templates>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:apply-templates>
    </xsl:template>
    <xsl:template match="/">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:text>{\rtf1\ansi\deff0</xsl:text>
        <xsl:text>{\fonttbl{\f0\fnil Times New Roman;}{\f1\fnil Arial;}{\f2\fnil Symbol;}{\f3\fnil Wingdings;}}</xsl:text>
        <xsl:text>{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red0\green0\blue139;\red0\green0\blue205;\red0\green0\blue255;\red0\green100\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green139\blue139;\red0\green191\blue255;\red0\green206\blue209;\red0\green250\blue154;\red0\green255\blue0;\red0\green255\blue127;\red0\green255\blue255;\red0\green255\blue255;\red25\green25\blue112;\red30\green144\blue255;\red32\green178\blue170;\red34\green139\blue34;\red46\green139\blue87;\red47\green79\blue79;\red50\green205\blue50;\red60\green179\blue113;\red64\green224\blue208;\red65\green105\blue225;\red70\green130\blue180;\red72\green61\blue139;\red72\green209\blue204;\red75\green0\blue130;\red85\green107\blue47;\red95\green158\blue160;\red100\green149\blue237;\red102\green205\blue170;\red105\green105\blue105;\red106\green90\blue205;\red107\green142\blue35;\red112\green128\blue144;\red119\green136\blue153;\red123\green104\blue238;\red124\green252\blue0;\red127\green255\blue0;\red127\green255\blue212;\red128\green0\blue0;\red128\green0\blue128;\red128\green128\blue0;\red128\green128\blue128;\red135\green206\blue235;\red135\green206\blue250;\red138\green43\blue226;\red139\green0\blue0;\red139\green0\blue139;\red139\green69\blue19;\red143\green188\blue139;\red144\green238\blue144;\red147\green112\blue219;\red148\green0\blue211;\red152\green251\blue152;\red153\green50\blue204;\red154\green205\blue50;\red160\green82\blue45;\red165\green42\blue42;\red169\green169\blue169;\red173\green216\blue230;\red173\green255\blue47;\red175\green238\blue238;\red176\green196\blue222;\red176\green224\blue230;\red178\green34\blue34;\red184\green134\blue11;\red186\green85\blue211;\red188\green143\blue143;\red189\green183\blue107;\red192\green192\blue192;\red199\green21\blue133;\red205\green92\blue92;\red205\green133\blue63;\red210\green105\blue30;\red210\green180\blue140;\red211\green211\blue211;\red216\green191\blue216;\red218\green112\blue214;\red218\green165\blue32;\red219\green112\blue147;\red220\green20\blue60;\red220\green220\blue220;\red221\green160\blue221;\red222\green184\blue135;\red224\green255\blue255;\red230\green230\blue250;\red233\green150\blue122;\red238\green130\blue238;\red238\green232\blue170;\red240\green128\blue128;\red240\green230\blue140;\red240\green248\blue255;\red240\green255\blue240;\red240\green255\blue255;\red244\green164\blue96;\red245\green222\blue179;\red245\green245\blue220;\red245\green245\blue245;\red245\green255\blue250;\red248\green248\blue255;\red250\green128\blue114;\red250\green235\blue215;\red250\green240\blue230;\red250\green250\blue210;\red253\green245\blue230;\red255\green0\blue0;\red255\green0\blue255;\red255\green0\blue255;\red255\green20\blue147;\red255\green69\blue0;\red255\green99\blue71;\red255\green105\blue180;\red255\green127\blue80;\red255\green140\blue0;\red255\green160\blue122;\red255\green165\blue0;\red255\green182\blue193;\red255\green192\blue203;\red255\green215\blue0;\red255\green218\blue185;\red255\green222\blue173;\red255\green228\blue181;\red255\green228\blue196;\red255\green228\blue225;\red255\green235\blue205;\red255\green239\blue213;\red255\green240\blue245;\red255\green245\blue238;\red255\green248\blue220;\red255\green250\blue205;\red255\green250\blue240;\red255\green250\blue250;\red255\green255\blue0;\red255\green255\blue224;\red255\green255\blue240;\red255\green255\blue255;}</xsl:text>
        <xsl:text>{\stylesheet</xsl:text>
        <xsl:text>{\s0\f0\fs24\sl0\fs22\snext0 Normal;}</xsl:text>
        <xsl:text>{\s1\f0\fs24\sl0\fs22\snext0 Paragraph;}</xsl:text>
        <xsl:text>{\s2\f0\fs24\i\snext0 Address;}</xsl:text>
        <xsl:text>{\s3\qc\f0\fs24\snext0 Center;}</xsl:text>
        <xsl:text>{\s4\lin720\f0\fs24\snext0 Blockquote;}</xsl:text>
        <xsl:text>{\s5\lin60\rin60\brdrs\brdrcf47\brdrw15\f0\fs24\snext0 Fieldset;}</xsl:text>
        <xsl:text>{\s6\f1\fs24\snext0 Preformatted;}</xsl:text>
        <xsl:text>{\s7\f1\fs24\snext0 Preformatted and wrapping;}</xsl:text>
        <xsl:text>{\s8\f1\fs48\b\snext0 Heading 1;}</xsl:text>
        <xsl:text>{\s9\f1\fs36\b\snext0 Heading 2;}</xsl:text>
        <xsl:text>{\s10\f1\fs26\b\snext0 Heading 3;}</xsl:text>
        <xsl:text>{\s11\f1\fs22\b\sl0\fs26\b\snext0 Heading 4;}</xsl:text>
        <xsl:text>{\s12\f1\fs18\b\snext0 Heading 5;}</xsl:text>
        <xsl:text>{\s13\f1\fs16\b\snext0 Heading 6;}</xsl:text>
        <xsl:text>{\s15\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s16\sl0\fs22\snext0 div;}</xsl:text>
        <xsl:text>{\s17\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s18\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s19\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s20\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s33\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s34\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s35\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s36\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s49\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s50\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s53\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s54\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s58\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s59\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s60\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s61\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s434\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s435\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s436\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s437\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\*\cs23\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs24\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs25\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs26\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs27\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs28\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs29\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs30\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs31\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs32\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs37\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs38\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs39\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs40\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs41\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs42\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs43\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs44\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs45\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs46\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs47\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs48\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs51\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs52\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs55\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs56\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs57\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs62\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs63\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs64\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs65\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs66\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs67\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs68\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs69\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs70\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs71\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs72\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs73\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs74\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs75\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs76\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs77\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs78\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs79\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs80\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs81\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs82\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs83\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs84\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs85\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs86\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs87\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs88\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs89\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs90\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs91\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs92\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs93\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs94\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs95\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs96\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs97\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs98\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs99\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs100\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs101\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs102\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs103\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs104\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs105\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs106\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs107\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs108\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs109\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs110\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs111\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs112\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs113\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs114\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs115\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs116\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs117\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs118\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs119\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs120\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs121\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs122\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs123\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs124\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs125\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs126\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs127\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs128\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs129\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs130\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs131\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs132\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs133\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs134\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs135\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs136\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs137\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs138\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs139\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs140\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs141\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs142\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs143\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs144\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs145\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs146\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs147\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs148\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs149\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs150\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs151\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs152\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs153\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs154\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs155\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs156\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs157\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs158\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs159\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs160\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs161\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs162\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs163\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs164\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs165\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs166\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs167\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs168\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs169\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs170\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs171\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs172\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs173\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs174\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs175\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs176\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs177\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs178\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs179\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs180\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs181\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs182\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs183\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs184\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs185\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs186\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs187\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs188\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs189\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs190\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs191\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs192\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs193\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs194\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs195\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs196\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs197\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs198\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs199\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs200\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs201\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs202\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs203\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs204\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs205\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs206\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs207\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs208\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs209\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs210\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs211\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs212\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs213\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs214\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs215\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs216\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs217\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs218\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs219\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs220\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs221\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs222\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs223\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs224\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs225\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs226\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs227\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs228\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs229\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs230\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs231\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs232\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs233\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs234\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs235\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs236\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs237\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs238\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs239\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs240\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs241\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs242\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs243\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs244\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs245\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs246\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs247\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs248\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs249\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs250\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs251\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs252\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs253\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs254\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs255\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs256\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs257\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs258\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs259\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs260\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs261\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs262\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs263\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs264\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs265\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs266\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs267\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs268\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs269\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs270\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs271\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs272\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs273\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs274\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs275\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs276\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs277\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs278\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs279\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs280\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs281\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs282\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs283\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs284\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs285\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs286\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs287\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs288\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs289\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs290\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs291\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs292\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs293\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs294\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs295\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs296\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs297\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs298\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs299\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs300\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs301\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs302\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs303\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs304\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs305\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs306\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs307\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs308\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs309\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs310\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs311\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs312\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs313\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs314\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs315\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs316\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs317\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs318\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs319\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs320\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs321\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs322\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs323\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs324\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs325\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs326\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs327\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs328\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs329\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs330\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs331\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs332\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs333\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs334\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs335\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs336\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs337\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs338\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs339\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs340\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs341\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs342\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs343\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs344\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs345\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs346\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs347\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs348\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs349\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs350\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs351\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs352\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs353\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs354\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs355\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs356\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs357\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs358\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs359\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs360\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs361\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs362\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs363\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs364\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs365\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs366\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs367\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs368\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs369\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs370\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs371\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs372\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs373\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs374\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs375\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs376\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs377\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs378\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs379\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs380\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs381\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs382\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs383\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs384\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs385\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs386\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs387\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs388\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs389\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs390\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs391\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs392\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs393\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs394\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs395\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs396\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs397\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs398\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs399\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs400\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs401\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs402\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs403\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs404\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs405\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs406\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs407\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs408\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs409\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs410\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs411\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs412\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs413\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs414\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs415\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs416\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs417\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs418\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs419\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs420\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs421\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs422\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs423\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs424\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs425\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs426\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs427\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs428\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs429\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs430\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs431\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs432\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs433\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs438\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs439\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs440\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs441\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs442\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs443\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs444\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs445\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs446\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs447\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs448\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs449\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs450\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs451\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs452\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs453\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs454\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs455\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs456\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs457\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs458\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs459\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs460\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs461\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs462\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs463\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs464\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs465\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs466\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs467\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs468\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs469\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs470\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs471\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs472\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs473\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs474\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs475\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs476\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs477\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs478\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs479\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs480\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs481\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs482\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs483\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs484\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs487\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs488\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs489\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs490\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs491\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs492\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs493\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs494\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs495\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs496\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs497\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs498\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs499\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs500\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs501\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs502\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs503\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs504\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs505\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs506\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs507\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs508\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs509\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs510\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs511\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs512\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs513\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs514\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs515\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs516\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs517\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs518\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs519\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs520\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs521\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs522\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs523\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs524\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs525\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs526\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs527\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs528\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs529\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs530\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs531\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs532\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs533\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs534\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs535\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs536\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs537\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs538\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs539\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs540\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs541\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs542\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs543\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs544\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs545\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs546\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs547\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs548\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs549\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs550\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs551\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs552\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs553\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs554\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs555\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs556\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs557\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs558\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs559\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs560\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs561\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\ts21\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts22\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts485\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts486\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>}</xsl:text>
        <xsl:text>{\*\generator Altova StyleVision Enterprise Edition;}\viewkind1\viewzk0\viewscale100\newtblstyruls\nofeaturethrottle1 </xsl:text>
        <xsl:text>\dntblnsbdb\fs24\f0 </xsl:text>
        <xsl:call-template name="altova:DocumentSection_0">
            <xsl:with-param name="altova:nMaxWidthIn" select="6.26"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="altova:DocumentSection_0">
        <xsl:param name="altova:nMaxWidthIn"/>
        <xsl:param name="templatetablelevel"/>
        <xsl:text>\sectd\facingp\pgwsxn11900\pghsxn16820\margtsxn1280\marglsxn1440\margbsxn1720\margrsxn1440\headery0\footery0\cols1\colsx720\pgndec\ftnbj\ftnrstcont\ftnnar</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerl </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerr </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerl </xsl:text>
        <xsl:call-template name="EmptyFooter"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerr </xsl:text>
        <xsl:call-template name="EmptyFooter"/>
        <xsl:text>}</xsl:text>
        <xsl:text>\par</xsl:text>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
        <xsl:for-each select="$XML">
            <xsl:for-each select="eml:EML">
                <xsl:for-each select="eml:Result">
                    <xsl:for-each select="rg:RG520">
                        <xsl:for-each select="rg:OverviewOfElectedCandidates">
                            <xsl:for-each select="rg:ElectedCandidate">
                                <xsl:for-each select="eml:Candidate">
                                    <xsl:text>\par\par</xsl:text>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s17\s18\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
                                    <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
                                        <xsl:text>\pard</xsl:text>
                                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                        <xsl:text>\itap</xsl:text>
                                        <xsl:value-of select="$templatetablelevel + 0"/>
                                        <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s19\s20\ql\sl0\sb1999\f1\fs22 </xsl:text>
                                        <xsl:text>\s0\f0\fs24\f0\fs24</xsl:text>
                                    </xsl:if>
                                    <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                                    <xsl:variable name="altova:nTableWidthIn_0" select="$altova:nMaxWidthIn * 1.00000"/>
                                    <xsl:variable name="altova:nTableWidthTw_0" select="$altova:nTableWidthIn_0 * 1440"/>
                                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_0" select="round($altova:nTableWidthTw_0 * 0.25)"/>
                                    <xsl:variable name="altova:nTableIndentTw_0" select="0"/>
                                    <xsl:variable name="altova:nSumColumnWidthsTw_0" select="round(0.00 + 0.40 * $altova:nTableWidthTw_0)"/>
                                    <xsl:variable name="altova:TableWidthFactor_0">
                                        <xsl:choose>
                                            <xsl:when test="$altova:nSumColumnWidthsTw_0 &gt; $altova:nTableWidthTw_0">
                                                <xsl:value-of select="($altova:nTableWidthTw_0 - $altova:SumDefaultColumnsForWideTableTw_0) div $altova:nSumColumnWidthsTw_0"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="1"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:variable name="altova:nColumnsWithDefaultWidth_0" select="round(1)"/>
                                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_0">
                                        <xsl:choose>
                                            <xsl:when test="$altova:nColumnsWithDefaultWidth_0 = 0">
                                                <xsl:value-of select="round(1)"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_0"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:variable name="altova:nDefaultColumnWidthTw_0">
                                        <xsl:choose>
                                            <xsl:when test="$altova:TableWidthFactor_0 &lt; 1">
                                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_0 div $altova:nColumnsWithDefaultWidthNotZero_0"/>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of select="round(($altova:nTableWidthTw_0 - $altova:nSumColumnWidthsTw_0) div $altova:nColumnsWithDefaultWidthNotZero_0)"/>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:variable name="altova:nColumnWidthTw_0_0" select="round($altova:nTableWidthTw_0 * 0.40 * $altova:TableWidthFactor_0)"/>
                                    <xsl:variable name="altova:nColumnWidthTw_0_1" select="$altova:nDefaultColumnWidthTw_0"/>
                                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 1"/>
                                    <xsl:variable name="tablestyle0">
                                        <xsl:text>\trowd</xsl:text>
                                        <xsl:text>\trautofit1</xsl:text>
                                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                                        <xsl:value-of select="round($altova:nTableWidthTw_0)"/>
                                        <xsl:text>\trleft</xsl:text>
                                        <xsl:value-of select="$altova:nTableIndentTw_0"/>
                                        <xsl:text>\ts21\ts22\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                                    </xsl:variable>
                                    <xsl:variable name="rowend0">
                                        <xsl:choose>
                                            <xsl:when test="$templatetablelevel + 1 = 1">
                                                <xsl:text>\row\pard</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:variable name="cellend0">
                                        <xsl:choose>
                                            <xsl:when test="$templatetablelevel + 1 = 1">
                                                <xsl:text>\cell</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:text>\nestcell</xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:variable>
                                    <xsl:variable name="altova:RowStyle0">
                                        <xsl:text>\trrh0</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                                        <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                            <xsl:text>\clftsWidth1</xsl:text>
                                        </xsl:if>
                                        <xsl:text>\cellx</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                                        <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                            <xsl:text>\clftsWidth1</xsl:text>
                                        </xsl:if>
                                        <xsl:text>\cellx</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                                    </xsl:variable>
                                    <xsl:if test="$templatetablelevel + 1 = 1">
                                        <xsl:value-of select="$tablestyle0"/>
                                        <xsl:value-of select="$altova:RowStyle0"/>
                                    </xsl:if>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 1"/>
                                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs23\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>De voorzitter van </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs24\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_010_voorzitter"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="eml:Election">
                                                    <xsl:call-template name="ElectionNameAcceptance">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.02083 - 0.02083"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                    </xsl:call-template>
                                                    <xsl:call-template name="ElectionDomain">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.02083 - 0.02083"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                    </xsl:call-template>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>\par </xsl:text>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="rg:RG520">
                                                    <xsl:for-each select="rg:CandidateLetter">
                                                        <xsl:for-each select="rg:AddressLineForAcceptance">
                                                            <xsl:text>{\cs25\f1\fs22 </xsl:text>
                                                            <xsl:apply-templates>
                                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.02083 - 0.02083"/>
                                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                            </xsl:apply-templates>
                                                            <xsl:text>}</xsl:text>
                                                        </xsl:for-each>
                                                        <xsl:text>\par </xsl:text>
                                                        <xsl:for-each select="rg:PostalCodeForAcceptance">
                                                            <xsl:text>{\cs26\f1\fs22 </xsl:text>
                                                            <xsl:apply-templates>
                                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.02083 - 0.02083"/>
                                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                            </xsl:apply-templates>
                                                            <xsl:text>}</xsl:text>
                                                        </xsl:for-each>
                                                        <xsl:text>{\cs27\f1\fs22 </xsl:text>
                                                        <xsl:call-template name="write-text">
                                                            <xsl:with-param name="text">
                                                                <xsl:text> </xsl:text>
                                                            </xsl:with-param>
                                                        </xsl:call-template>
                                                        <xsl:text>}</xsl:text>
                                                        <xsl:for-each select="rg:LocationForAcceptance">
                                                            <xsl:text>{\cs28\f1\fs22 </xsl:text>
                                                            <xsl:apply-templates>
                                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.02083 - 0.02083"/>
                                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                            </xsl:apply-templates>
                                                            <xsl:text>}</xsl:text>
                                                        </xsl:for-each>
                                                    </xsl:for-each>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>\f0\fs24</xsl:text>
                                    <xsl:value-of select="$cellend0"/>
                                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\f0\fs24</xsl:text>
                                    <xsl:value-of select="$cellend0"/>
                                    <xsl:if test="$templatetablelevel + 1 > 1">
                                        <xsl:text>{\*\nesttableprops</xsl:text>
                                    </xsl:if>
                                    <xsl:value-of select="$tablestyle0"/>
                                    <xsl:value-of select="$altova:RowStyle0"/>
                                    <xsl:value-of select="$rowend0"/>
                                    <xsl:variable name="altova:RowStyle1">
                                        <xsl:text>\trrh0</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                                        <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                            <xsl:text>\clftsWidth1</xsl:text>
                                        </xsl:if>
                                        <xsl:text>\cellx</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                                        <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                            <xsl:text>\clftsWidth1</xsl:text>
                                        </xsl:if>
                                        <xsl:text>\cellx</xsl:text>
                                        <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                                    </xsl:variable>
                                    <xsl:if test="$templatetablelevel + 1 = 1">
                                        <xsl:value-of select="$tablestyle0"/>
                                        <xsl:value-of select="$altova:RowStyle1"/>
                                    </xsl:if>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 1"/>
                                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\f0\fs24</xsl:text>
                                    <xsl:value-of select="$cellend0"/>
                                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs29\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Onderwerp</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs30\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_020_Onderwerp"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:text>\par </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs31\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Benoeming tot lid van </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs32\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_030_Benoeming"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="eml:Election">
                                                    <xsl:call-template name="ElectionNameSimple">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.02083 - 0.02083"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                    </xsl:call-template>
                                                    <xsl:call-template name="ElectionDomain">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.02083 - 0.02083"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                    </xsl:call-template>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>\f0\fs24</xsl:text>
                                    <xsl:value-of select="$cellend0"/>
                                    <xsl:if test="$templatetablelevel + 1 > 1">
                                        <xsl:text>{\*\nesttableprops</xsl:text>
                                    </xsl:if>
                                    <xsl:value-of select="$tablestyle0"/>
                                    <xsl:value-of select="$altova:RowStyle1"/>
                                    <xsl:value-of select="$rowend0"/>
                                    <xsl:text>\pard\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text> </xsl:text>
                                    <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
                                        <xsl:text>\pard</xsl:text>
                                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                        <xsl:text>\itap</xsl:text>
                                        <xsl:value-of select="$templatetablelevel + 0"/>
                                        <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s33\s34\ql\sl0\f1\fs22 </xsl:text>
                                        <xsl:text>\par </xsl:text>
                                        <xsl:text>\par </xsl:text>
                                        <xsl:text>\s0\f0\fs24\f0\fs24</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\par\par</xsl:text>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s35\s36\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs37\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Ter voldoening aan</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs38\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_040_1_deelMeeBenoeming"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:if test="//eml:ElectionCategory =&quot;EP&quot;">
                                        <xsl:choose>
                                            <xsl:when test="$lang=0">
                                                <xsl:text>{\cs39\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text> artikel Y 25, tweede lid, van de Kieswet juncto</xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:text>{\cs40\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:value-of select="$o5-2_040_2_deelMeeBenoeming"/>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:if>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs41\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text> artikel V 1, derde lid, van de Kieswet deel ik u mee dat is benoemd tot lid van </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs42\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_040_3_deelMeeBenoeming"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="eml:Election">
                                                    <xsl:call-template name="ElectionNameSimple">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:call-template>
                                                    <xsl:call-template name="ElectionDomain">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:call-template>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>{\cs43\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:for-each select="eml:CandidateFullName">
                                        <xsl:for-each select="xnl:PersonName">
                                            <xsl:for-each select="xnl:NameLine">
                                                <xsl:if test="@NameType=&quot;Initials&quot;">
                                                    <xsl:text>{\cs44\f1\fs22 </xsl:text>
                                                    <xsl:apply-templates>
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:apply-templates>
                                                    <xsl:text>}</xsl:text>
                                                    <xsl:text>{\cs45\f1\fs22 </xsl:text>
                                                    <xsl:call-template name="write-text">
                                                        <xsl:with-param name="text">
                                                            <xsl:text> </xsl:text>
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                    <xsl:text>}</xsl:text>
                                                </xsl:if>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                        <xsl:call-template name="LastNameH1">
                                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                        </xsl:call-template>
                                    </xsl:for-each>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs46\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>, wonende te </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs47\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_040_4_deelMeeBenoeming"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:call-template name="QualifyingAddressCity">
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:call-template>
                                    <xsl:text>{\cs48\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>.</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\par</xsl:text>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s49\s50\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs51\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Gelet op genoemde bepaling strekt deze kennisgeving de benoemde tot geloofsbrief.</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs52\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_050_kennisgeving"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\par</xsl:text>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s53\s54\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\cs55\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>De voorzitter van het centraal stembureau voor de verkiezing van de leden van </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\cs56\f1\fs22 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$o5-2_060_voorzitter"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="eml:Election">
                                                    <xsl:call-template name="ElectionNameSimple">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:call-template>
                                                    <xsl:call-template name="ElectionDomain">
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:call-template>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>{\cs57\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>,</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
                                    <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
                                        <xsl:text>\pard</xsl:text>
                                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                        <xsl:text>\itap</xsl:text>
                                        <xsl:value-of select="$templatetablelevel + 0"/>
                                        <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s58\s59\ql\sl0\f1\fs22 </xsl:text>
                                        <xsl:text>\par </xsl:text>
                                        <xsl:text>\par </xsl:text>
                                        <xsl:text>\s0\f0\fs24\f0\fs24</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\par\par</xsl:text>
                                    <xsl:text>\pard</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s60\s61\ql\sl0\f1\fs22 </xsl:text>
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="eml:EML">
                                            <xsl:for-each select="eml:Result">
                                                <xsl:for-each select="rg:RG520">
                                                    <xsl:for-each select="rg:CandidateLetter">
                                                        <xsl:for-each select="rg:Chairperson">
                                                            <xsl:text>{\cs62\f1\fs22 </xsl:text>
                                                            <xsl:apply-templates>
                                                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                            </xsl:apply-templates>
                                                            <xsl:text>}</xsl:text>
                                                        </xsl:for-each>
                                                    </xsl:for-each>
                                                </xsl:for-each>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24</xsl:text>
                                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                    <xsl:text>\itap</xsl:text>
                                    <xsl:value-of select="$templatetablelevel + 0"/>
                                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s15\s16\sl0\f1\fs22 </xsl:text>
                                    <xsl:text>\page </xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:for-each select="eml:Election">
                        <xsl:for-each select="eml:Contest">
                            <xsl:for-each select="eml:Selection">
                                <xsl:if test="eml:Elected = &quot;yes&quot; and  eml:Candidate"/>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\s0\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="ElectionNameShort">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs63\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name excluding date and &apos;verkiezing van...&apos;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="ElectionNameAcceptance">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs64\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name for acceptance of appointment</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory">
                <xsl:choose>
                    <xsl:when test=".= &quot;TK&quot; or .= &quot;EP&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs65\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de Tweede Kamer der Staten-Generaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs66\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_tweedeKamer"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;EK&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs67\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de Eerste Kamer der Staten-Generaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs68\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_eersteKamer"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;PS&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs69\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>provinciale staten van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs70\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_provincialeStaten"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;AB&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs71\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>het algemeen bestuur van het </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs72\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_algemeen_bestuur"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:call-template name="WaterschapTypeName">
                            <xsl:with-param name="isBold" select="0"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:when test=".=&quot;GR&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs73\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de raad van de gemeente</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs74\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_raadVanDeGemeente"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs75\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de bestuurscommissie</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs76\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_bestuurscommissie"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;GC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs77\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de gebiedscommissie</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs78\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_gebiedscommissie"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;ER&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs79\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de eilandsraad van het openbaar lichaam</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs80\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameAcceptance_eilandsraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Salutation">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="$isBold=0">
            <xsl:if test="0=1">
                <xsl:text>{\cs81\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs82\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs83\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs84\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs85\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:if test="0=1">
                <xsl:text>{\cs86\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs87\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs88\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs89\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs90\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Address">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs91\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Street and house number &quot;Dasstraat 17&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\cs92\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\cs93\f1\fs22\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PostalCodeCity">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs94\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Postal code and city like &quot;6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xal:Locality">
            <xsl:for-each select="xal:PostalCode">
                <xsl:for-each select="xal:PostalCodeNumber">
                    <xsl:text>{\cs95\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:if test="count(xal:PostalCode/xal:PostalCodeNumber[text() != &quot;&quot;]) &gt; 0 and count(xal:LocalityName[text() != &quot;&quot;]) &gt; 0">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:for-each select="xal:LocalityName">
                <xsl:text>{\cs96\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LastNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:param name="prefixToUppercase" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs97\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the last name &quot;Baron van der Zaag jr.&quot; (name components a+b+c+d).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs98\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs99\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs100\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs101\f1\fs22\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs102\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs103\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs104\f1\fs20 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs105\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs106\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs107\f1\fs20\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs108\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs109\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs110\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs111\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs112\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\cs113\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs114\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs115\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs116\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials and first name like &quot;H.H.G. (Henk)&quot; (name components e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs117\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs118\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs119\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs120\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs121\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs122\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs123\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs124\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs125\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs126\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs127\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs128\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs129\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs130\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs131\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs132\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs133\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs134\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs135\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs136\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs137\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs138\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs139\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs140\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Gender">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs141\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g), if @PublishGender = &quot;true&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs142\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs143\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs144\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs145\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs146\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs147\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs148\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs149\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs150\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs151\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs152\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs153\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs154\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs155\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs156\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs157\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs158\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs159\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs160\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs161\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs162\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs163\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs164\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs165\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs166\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs167\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs168\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs169\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs170\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs171\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs172\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs173\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs174\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs175\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs176\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs177\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenderGeneral">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="Gender"/>
        <xsl:param name="PublishGender" select="&quot;true&quot;"/>
        <xsl:param name="PublicationLanguage" select="&quot;nl&quot;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs178\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; or &quot; (f)&quot; with preceding blank (name component g) or not at all. Does not read from XML but from parameters.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="0=1">
            <xsl:text>{\cs179\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>*** $Gender = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs180\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$Gender"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs181\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, $PublicationLanguage = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs182\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$PublicationLanguage"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs183\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, $PublishGender = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs184\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$PublishGender"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs185\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, fontSize = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs186\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$fontSize"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs187\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, isBold = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs188\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$isBold"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cs189\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot; ***</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$Gender != &quot;&quot; and $PublishGender = &quot;true&quot;">
            <xsl:if test="$fontSize = &apos;normal&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender = &quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs190\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs191\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&apos;unknown&apos; or ($Gender=&apos;female&apos; and $PublicationLanguage = &apos;fy&apos;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs192\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs193\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs194\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs195\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs196\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs197\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs198\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs199\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs200\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs201\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$fontSize = &apos;smaller&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs202\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs203\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs204\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs205\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs206\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs207\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs208\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs209\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs210\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs211\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs212\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs213\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$fontSize = &apos;x-small&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs214\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs215\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs216\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs217\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs218\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs219\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs220\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs221\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs222\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs223\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs224\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs225\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="CompleteAddress">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs226\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Complete adress like &quot;Dasstraat 17, 6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs227\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs228\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs229\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs230\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs231\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs232\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs233\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs234\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs235\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs236\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs237\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs238\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs239\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs240\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs241\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs242\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs243\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs244\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs245\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs246\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="City">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs247\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>City (without postal code) &quot;DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs248\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs249\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs250\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs251\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Date">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs252\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs253\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs254\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs255\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs256\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs257\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs258\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs259\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs260\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs261\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs262\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs263\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs264\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs265\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs266\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs267\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs268\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs269\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs270\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs271\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs272\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs273\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs274\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs275\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs276\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs277\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs278\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs279\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs280\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs281\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs282\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs283\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs284\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs285\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs286\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs287\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs288\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs289\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs290\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs291\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs292\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs293\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs294\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs295\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs296\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs297\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs298\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs299\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs300\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs301\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs302\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs303\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs304\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs305\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs306\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs307\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs308\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs309\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs310\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs311\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs312\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs313\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs314\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs315\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs316\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs317\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs318\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs319\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs320\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs321\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs322\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs323\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs324\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs325\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs326\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs327\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs328\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs329\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs330\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs331\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs332\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs333\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs334\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs335\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs336\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs337\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs338\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs339\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs340\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs341\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs342\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs343\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs344\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs345\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs346\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs347\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs348\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs349\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs350\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs351\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs352\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs353\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs354\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs355\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs356\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs357\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs358\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs359\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs360\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs361\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs362\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs363\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs364\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs365\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs366\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs367\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenerateDate">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\cs368\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$generateDate"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="HashCode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\cs369\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$hashCode"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="FooterWithoutHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs370\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs371\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="GenerateDate">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:if test="$isDraft=&quot;true&quot;">
            <xsl:text>{\cs372\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>     -     </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs373\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(Concept) </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs374\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_FooterWithoutHashcode_concept"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FooterWithHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$isDraft=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs375\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs376\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\cs377\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>     -     </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs378\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(Concept) </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs379\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithoutHashcode_concept"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs380\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs381\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\cs382\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>     -     </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs383\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>SHA-256-Hashcode: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs384\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_hashcode"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\par </xsl:text>
                <xsl:call-template name="HashCode">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionNameSimple">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs385\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Just election name</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory">
                <xsl:choose>
                    <xsl:when test=".=&quot;EP&quot; or .=&quot;BC&quot; or .=&quot;AB&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs386\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>het </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs387\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_het"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs388\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs389\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_de"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs390\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs391\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs392\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs393\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs394\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten van</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs395\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;AB&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs396\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van het </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs397\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_algemeen_bestuur"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="WaterschapTypeName">
                                <xsl:with-param name="isBold" select="$isBold"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs398\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs399\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs400\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs401\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs402\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs403\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs404\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs405\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs406\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs407\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs408\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs409\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs410\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs411\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs412\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs413\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;AB&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs414\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van het </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs415\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_algemeen_bestuur"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="WaterschapTypeName">
                                <xsl:with-param name="isBold" select="$isBold"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs416\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs417\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs418\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs419\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs420\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs421\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs422\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs423\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs424\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs425\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test=".=&quot;PS&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs426\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs427\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;GR&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs428\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs429\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;ER&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs430\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van het openbaar lichaam</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs431\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_eilandsraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs432\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van stadsdeel</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs433\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_stadsdeel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\fs22\s434\s435\sl0\f1\fs22 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="SmallLineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\fs22\s436\s437\sl0\f1\fs22 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="KieskringParty">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs438\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Additional information about the distrinct for which a centrally submitted list is nominated</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="eml:ContestIdentifier/@Id = &quot;alle&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs439\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in alle kieskringen</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs440\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inAlleKieskringen"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="eml:ContestIdentifier">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs441\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in kieskring</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs442\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inKieskring"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\cs443\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="ContestIdentifier">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionDomain">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs444\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election domain as part of the elction name - if needed</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs445\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs446\f1\fs22 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs447\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs448\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs449\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs450\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs451\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs452\f1\fs22\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs453\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs454\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs455\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs456\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;medium&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs457\f1\fs26\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs458\f1\fs26\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs459\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs460\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs461\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs462\f1\fs26\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ContestIdentifier">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs463\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs464\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs465\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs466\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs467\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs468\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs469\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs470\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;medium&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs471\f1\fs26 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs472\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs473\f1\fs26 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs474\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Space">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="$fontSize=&quot;normal&quot;">
                <xsl:text>{\cs475\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&quot;smaller&quot;">
                <xsl:text>{\cs476\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&apos;x-small&apos;">
                <xsl:text>{\cs477\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs478\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Initials">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs479\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials like &quot; H.H.G.&quot; (name components f) with preceding blank.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xnl:PersonName">
            <xsl:for-each select="xnl:NameLine">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\cs480\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Line">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\cs481\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>________</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\cs482\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_________________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="FooterLine">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\cs483\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>______</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\cs484\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>__________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="LegacyFooter">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isHashcode" select="1"/>
        <xsl:param name="isPagenumber" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_2" select="."/>
        <xsl:variable name="altova:nTableWidthIn_1" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_1" select="$altova:nTableWidthIn_1 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_1" select="round($altova:nTableWidthTw_1 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_1" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_1" select="round(0.00 + 1.00 * $altova:nTableWidthTw_1)"/>
        <xsl:variable name="altova:TableWidthFactor_1">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_1 &gt; $altova:nTableWidthTw_1">
                    <xsl:value-of select="$altova:nTableWidthTw_1 div $altova:nSumColumnWidthsTw_1"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_1" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_1_0" select="round($altova:nTableWidthTw_1 * 0.83 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_1" select="round($altova:nTableWidthTw_1 * 0.17 * $altova:TableWidthFactor_1)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle1">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_1)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_1"/>
            <xsl:text>\ts485\ts486\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend1">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend1">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle2">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle2"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle2"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:variable name="altova:RowStyle3">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle3"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="FooterLine">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) + ($altova:nColumnWidthTw_1_1 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle3"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:variable name="altova:RowStyle4">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle4"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isHashcode=1">
            <xsl:call-template name="FooterWithHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="$isHashcode=0">
            <xsl:call-template name="FooterWithoutHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isPagenumber=1">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs487\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>pagina </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs488\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\cs489</xsl:text>
            <xsl:text>\chpgn</xsl:text>
            <xsl:text>{\cs490\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> / </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\field{\*\fldinst{\cs491\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle4"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="Contests">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="separator" select="&apos;comma&apos;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:for-each select="kr:ListData">
                <xsl:for-each select="kr:Contests">
                    <xsl:for-each select="kr:Contest">
                        <xsl:if test="$separator=&apos;newline&apos; and position()=1">
                            <xsl:text>\par </xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\cs492\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs493\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\cs494\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs495\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="$isBold = 0">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\cs496\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs497\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\cs498\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs499\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CompleteContactAddress">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:Contact">
            <xsl:for-each select="eml:MailingAddress">
                <xsl:call-template name="CompleteAddress">
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:Country">
                    <xsl:call-template name="CompleteAddress">
                        <xsl:with-param name="fontSize" select="$fontSize"/>
                        <xsl:with-param name="isBold" select="$isBold"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:for-each select="xal:CountryNameCode">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:if test="$fontSize = &apos;normal&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\cs500\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs501\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs502\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\cs503\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs504\f1\fs22\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs505\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                        <xsl:if test="$fontSize = &apos;x-small&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\cs506\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs507\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs508\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\cs509\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs510\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs511\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="QualifyingAddressCity">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:QualifyingAddress">
            <xsl:call-template name="City">
                <xsl:with-param name="isBold" select="$isBold"/>
                <xsl:with-param name="fontSize" select="$fontSize"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="xal:Country">
                <xsl:call-template name="City">
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:CountryNameCode">
                    <xsl:call-template name="Space">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:if test="$fontSize = &apos;normal&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs512\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs513\f1\fs22 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs514\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs515\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs516\f1\fs22\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs517\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;smaller&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs518\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs519\f1\fs20 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs520\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs521\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs522\f1\fs20\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs523\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;x-small&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs524\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs525\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs526\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs527\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs528\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs529\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="WaterschapTypeName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="contestId" select="//kr:ElectionDomain/@Id"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:choose>
            <xsl:when test="$font-size = &apos;medium&apos;">
                <xsl:choose>
                    <xsl:when test="$isBold = 0">
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs530\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs531\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs532\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs533\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs534\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs535\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs536\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs537\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs538\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs539\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs540\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs541\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs542\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs543\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs544\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs545\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$isBold = 0">
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs546\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs547\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs548\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs549\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs550\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs551\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs552\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs553\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs554\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs555\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs556\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs557\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs558\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs559\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs560\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs561\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="EmptyHeader"/>
    <xsl:template name="EmptyFooter"/>
    <xsl:template name="write-text">
        <xsl:param name="text"/>
        <xsl:param name="bEscape" select="true()"/>
        <xsl:choose>
            <xsl:when test="$bEscape">
                <xsl:variable name="sLinefeed" select="'&#x0A;'"/>
                <xsl:choose>
                    <xsl:when test="contains($text, $sLinefeed)">
                        <xsl:variable name="first-line" select="substring-before($text, $sLinefeed)"/>
                        <xsl:variable name="rest" select="substring-after($text, $sLinefeed)"/>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$first-line"/>
                        </xsl:call-template>
                        <xsl:text>\u13?</xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text" select="$rest"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$text"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($text)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-line">
        <xsl:param name="text"/>
        <xsl:variable name="text-length" select="string-length($text)"/>
        <xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
        <xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
        <xsl:choose>
            <xsl:when test="$text-after-bs-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '\'">
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\\')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-bs-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-line">
                    <xsl:with-param name="text" select="$text-after-bs"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-ob">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-ob" select="substring-after($text, '{')"/>
        <xsl:variable name="text-after-ob-length" select="string-length($text-after-ob)"/>
        <xsl:choose>
            <xsl:when test="$text-after-ob-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '{'">
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\{')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-ob-length - 1), '\{')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-ob-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="$text-after-ob"/>
                    <xsl:with-param name="text-length" select="$text-after-ob-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-cb">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-cb" select="substring-after($text, '}')"/>
        <xsl:variable name="text-after-cb-length" select="string-length($text-after-cb)"/>
        <xsl:choose>
            <xsl:when test="$text-after-cb-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '}'">
                        <xsl:value-of select="concat(substring($text,1,$text-length - 1), '\}')"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$text"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat(substring($text,1,$text-length - $text-after-cb-length - 1), '\}')"/>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="$text-after-cb"/>
                    <xsl:with-param name="text-length" select="$text-after-cb-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="text()|@*">
        <xsl:call-template name="write-text">
            <xsl:with-param name="text" select="."/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:GetColorID">
        <xsl:param name="text"/>
        <xsl:variable name="txt" select="translate($text, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$txt = 'WHITE'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'IVORY'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTYELLOW'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOW'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SNOW'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FLORALWHITE'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LEMONCHIFFON'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNSILK'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEASHELL'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDERBLUSH'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PAPAYAWHIP'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLANCHEDALMOND'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MISTYROSE'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BISQUE'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MOCCASIN'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVAJOWHITE'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PEACHPUFF'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLD'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PINK'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTPINK'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGE'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSALMON'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORANGE'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORAL'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HOTPINK'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TOMATO'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGERED'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPPINK'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FUCHSIA'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAGENTA'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'RED'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLDLACE'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGOLDENRODYELLOW'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LINEN'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ANTIQUEWHITE'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SALMON'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GHOSTWHITE'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MINTCREAM'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHITESMOKE'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BEIGE'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHEAT'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SANDYBROWN'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AZURE'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HONEYDEW'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ALICEBLUE'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'KHAKI'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCORAL'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGOLDENROD'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'VIOLET'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSALMON'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDER'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCYAN'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BURLYWOOD'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PLUM'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GAINSBORO'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CRIMSON'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEVIOLETRED'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLDENROD'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORCHID'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'THISTLE'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGRAY'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TAN'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHOCOLATE'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PERU'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIANRED'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMVIOLETRED'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SILVER'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKKHAKI'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROSYBROWN'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMORCHID'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGOLDENROD'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FIREBRICK'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'POWDERBLUE'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSTEELBLUE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALETURQUOISE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREENYELLOW'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTBLUE'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGRAY'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BROWN'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SIENNA'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOWGREEN'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORCHID'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGREEN'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKVIOLET'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMPURPLE'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGREEN'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSEAGREEN'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SADDLEBROWN'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKMAGENTA'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKRED'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUEVIOLET'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSKYBLUE'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SKYBLUE'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GRAY'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVE'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PURPLE'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAROON'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUAMARINE'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHARTREUSE'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAWNGREEN'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSLATEBLUE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSLATEGRAY'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEGRAY'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVEDRAB'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEBLUE'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DIMGRAY'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMAQUAMARINE'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNFLOWERBLUE'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CADETBLUE'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKOLIVEGREEN'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIGO'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMTURQUOISE'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEBLUE'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'STEELBLUE'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROYALBLUE'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TURQUOISE'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSEAGREEN'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIMEGREEN'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEGRAY'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEAGREEN'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FORESTGREEN'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSEAGREEN'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DODGERBLUE'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MIDNIGHTBLUE'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CYAN'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUA'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SPRINGGREEN'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIME'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSPRINGGREEN'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKTURQUOISE'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPSKYBLUE'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKCYAN'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TEAL'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREEN'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGREEN'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUE'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMBLUE'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKBLUE'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVY'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLACK'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFFF'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFF0'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFE0'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFF00'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAFA'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAF0'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFACD'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF8DC'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF5EE'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF0F5'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEFD5'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEBCD'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4E1'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4C4'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4B5'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDEAD'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDAB9'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFD700'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFC0CB'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFB6C1'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA500'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA07A'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF8C00'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF7F50'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF69B4'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF6347'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF4500'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF1493'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF0000'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FDF5E6'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAFAD2'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAF0E6'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAEBD7'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FA8072'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F8F8FF'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5FFFA'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5F5'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5DC'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5DEB3'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F4A460'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFFF'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFF0'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0F8FF'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0E68C'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F08080'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EEE8AA'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EE82EE'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E9967A'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E6E6FA'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E0FFFF'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEB887'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DDA0DD'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DCDCDC'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DC143C'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DB7093'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DAA520'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DA70D6'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D8BFD8'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D3D3D3'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2B48C'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2691E'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD853F'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD5C5C'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C71585'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C0C0C0'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BDB76B'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BC8F8F'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BA55D3'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B8860B'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B22222'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0E0E6'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0C4DE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AFEEEE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADFF2F'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADD8E6'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A9A9A9'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A52A2A'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A0522D'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9ACD32'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9932CC'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '98FB98'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9400D3'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9370DB'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '90EE90'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8FBC8B'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B4513'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B008B'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B0000'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8A2BE2'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEFA'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEEB'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808080'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808000'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800080'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800000'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFFD4'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFF00'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7CFC00'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7B68EE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '778899'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '708090'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6B8E23'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6A5ACD'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '696969'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '66CDAA'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6495ED'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '5F9EA0'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '556B2F'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4B0082'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '48D1CC'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '483D8B'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4682B4'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4169E1'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '40E0D0'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '3CB371'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '32CD32'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2F4F4F'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2E8B57'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '228B22'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '20B2AA'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '1E90FF'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '191970'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF7F'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF00'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FA9A'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00CED1'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00BFFF'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008B8B'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008080'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008000'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '006400'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000FF'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000CD'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00008B'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000080'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000000'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetFontID">
        <xsl:param name="font"/>
        <xsl:variable name="font-upper" select="translate($font, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$font-upper = 'TIMES NEW ROMAN'">
                <xsl:text>0</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'ARIAL'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'SYMBOL'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'WINGDINGS'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetRtfBorderStyle">
        <xsl:param name="style"/>
        <xsl:choose>
            <xsl:when test="$style='none'">
                <xsl:text>\brdrnil</xsl:text>
            </xsl:when>
            <xsl:when test="$style='hidden'">
                <xsl:text>\brdrnone</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dotted'">
                <xsl:text>\brdrdot</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dashed'">
                <xsl:text>\brdrdash</xsl:text>
            </xsl:when>
            <xsl:when test="$style='solid'">
                <xsl:text>\brdrs</xsl:text>
            </xsl:when>
            <xsl:when test="$style='double'">
                <xsl:text>\brdrd</xsl:text>
            </xsl:when>
            <xsl:when test="$style='groove'">
                <xsl:text>\brdrengrave</xsl:text>
            </xsl:when>
            <xsl:when test="$style='ridge'">
                <xsl:text>\brdremboss</xsl:text>
            </xsl:when>
            <xsl:when test="$style='inset'">
                <xsl:text>\brdrinset</xsl:text>
            </xsl:when>
            <xsl:when test="$style='outset'">
                <xsl:text>\brdroutset</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\brdrnil</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:ConvertWidthToTwips">
        <xsl:param name="width"/>
        <xsl:variable name="normal-width" select="normalize-space($width)"/>
        <xsl:choose>
            <xsl:when test="contains($normal-width,'px')">
                <xsl:value-of select="(number(substring-before($normal-width,'px')) * 1440) div $altova:nPxPerIn"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'cm')">
                <xsl:value-of select="(number(substring-before($normal-width,'cm')) * 1440) div 2.54"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'mm')">
                <xsl:value-of select="(number(substring-before($normal-width,'mm')) * 1440) div 25.4"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'in')">
                <xsl:value-of select="number(substring-before($normal-width,'in')) * 1440"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pc')">
                <xsl:value-of select="number(substring-before($normal-width,'pc')) * 240"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pt')">
                <xsl:value-of select="number(substring-before($normal-width,'pt')) * 20"/>
            </xsl:when>
            <xsl:when test="$normal-width='thin'">
                <xsl:value-of select="30"/>
            </xsl:when>
            <xsl:when test="$normal-width='medium'">
                <xsl:value-of select="60"/>
            </xsl:when>
            <xsl:when test="$normal-width='thick'">
                <xsl:value-of select="80"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
