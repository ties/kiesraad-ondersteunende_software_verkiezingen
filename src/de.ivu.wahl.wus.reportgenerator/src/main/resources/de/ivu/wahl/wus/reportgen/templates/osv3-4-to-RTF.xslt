<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2014 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:eml="urn:oasis:names:tc:evs:schema:eml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:kr="http://www.kiesraad.nl/extensions" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:rg="http://www.kiesraad.nl/reportgenerator" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:ts="urn:oasis:names:tc:evs:schema:eml:ts" xmlns:xal="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xnl="urn:oasis:names:tc:ciq:xsdschema:xNL:2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype ds eml fn iso4217 ix java kr link rg sps ts xal xbrldi xbrli xlink xnl xs xsi">
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-P22-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\osv3-4-text.xslt"/>
    <xsl:output method="text" encoding="UTF-8"/>
    <xsl:param name="SV_OutputFormat" select="'RTF'"/>
    <xsl:param name="generateDate" select="'01-02-2003 04:05:06'"/>
    <xsl:param name="hashCode" select="'12 34 56 78 90 AB CD EF 12 34 56 78 90 AB CD EF FF FF FF FF'"/>
    <xsl:param name="isDraft" select="'true'"/>
    <xsl:param name="lang" select="'1'"/>
    <xsl:variable name="XML" select="/"/>
    <xsl:variable name="altova:nPxPerIn" select="96"/>
    <xsl:template match="*" priority="-1.0">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:apply-templates>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:apply-templates>
    </xsl:template>
    <xsl:template match="/">
        <xsl:variable name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:text>{\rtf1\ansi\deff0</xsl:text>
        <xsl:text>{\fonttbl{\f0\fnil Times New Roman;}{\f1\fnil Arial;}{\f2\fnil Symbol;}{\f3\fnil Wingdings;}}</xsl:text>
        <xsl:text>{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red0\green0\blue139;\red0\green0\blue205;\red0\green0\blue255;\red0\green100\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green139\blue139;\red0\green191\blue255;\red0\green206\blue209;\red0\green250\blue154;\red0\green255\blue0;\red0\green255\blue127;\red0\green255\blue255;\red0\green255\blue255;\red25\green25\blue112;\red30\green144\blue255;\red32\green178\blue170;\red34\green139\blue34;\red46\green139\blue87;\red47\green79\blue79;\red50\green205\blue50;\red60\green179\blue113;\red64\green224\blue208;\red65\green105\blue225;\red70\green130\blue180;\red72\green61\blue139;\red72\green209\blue204;\red75\green0\blue130;\red85\green107\blue47;\red95\green158\blue160;\red100\green149\blue237;\red102\green205\blue170;\red105\green105\blue105;\red106\green90\blue205;\red107\green142\blue35;\red112\green128\blue144;\red119\green136\blue153;\red123\green104\blue238;\red124\green252\blue0;\red127\green255\blue0;\red127\green255\blue212;\red128\green0\blue0;\red128\green0\blue128;\red128\green128\blue0;\red128\green128\blue128;\red135\green206\blue235;\red135\green206\blue250;\red138\green43\blue226;\red139\green0\blue0;\red139\green0\blue139;\red139\green69\blue19;\red143\green188\blue139;\red144\green238\blue144;\red147\green112\blue219;\red148\green0\blue211;\red152\green251\blue152;\red153\green50\blue204;\red154\green205\blue50;\red160\green82\blue45;\red165\green42\blue42;\red169\green169\blue169;\red173\green216\blue230;\red173\green255\blue47;\red175\green238\blue238;\red176\green196\blue222;\red176\green224\blue230;\red178\green34\blue34;\red184\green134\blue11;\red186\green85\blue211;\red188\green143\blue143;\red189\green183\blue107;\red192\green192\blue192;\red199\green21\blue133;\red205\green92\blue92;\red205\green133\blue63;\red210\green105\blue30;\red210\green180\blue140;\red211\green211\blue211;\red216\green191\blue216;\red218\green112\blue214;\red218\green165\blue32;\red219\green112\blue147;\red220\green20\blue60;\red220\green220\blue220;\red221\green160\blue221;\red222\green184\blue135;\red224\green255\blue255;\red230\green230\blue250;\red233\green150\blue122;\red238\green130\blue238;\red238\green232\blue170;\red240\green128\blue128;\red240\green230\blue140;\red240\green248\blue255;\red240\green255\blue240;\red240\green255\blue255;\red244\green164\blue96;\red245\green222\blue179;\red245\green245\blue220;\red245\green245\blue245;\red245\green255\blue250;\red248\green248\blue255;\red250\green128\blue114;\red250\green235\blue215;\red250\green240\blue230;\red250\green250\blue210;\red253\green245\blue230;\red255\green0\blue0;\red255\green0\blue255;\red255\green0\blue255;\red255\green20\blue147;\red255\green69\blue0;\red255\green99\blue71;\red255\green105\blue180;\red255\green127\blue80;\red255\green140\blue0;\red255\green160\blue122;\red255\green165\blue0;\red255\green182\blue193;\red255\green192\blue203;\red255\green215\blue0;\red255\green218\blue185;\red255\green222\blue173;\red255\green228\blue181;\red255\green228\blue196;\red255\green228\blue225;\red255\green235\blue205;\red255\green239\blue213;\red255\green240\blue245;\red255\green245\blue238;\red255\green248\blue220;\red255\green250\blue205;\red255\green250\blue240;\red255\green250\blue250;\red255\green255\blue0;\red255\green255\blue224;\red255\green255\blue240;\red255\green255\blue255;}</xsl:text>
        <xsl:text>{\stylesheet</xsl:text>
        <xsl:text>{\s0\f0\fs24\sl0\fs22\snext0 Normal;}</xsl:text>
        <xsl:text>{\s1\f0\fs24\sl0\fs22\snext0 Paragraph;}</xsl:text>
        <xsl:text>{\s2\f0\fs24\i\snext0 Address;}</xsl:text>
        <xsl:text>{\s3\qc\f0\fs24\snext0 Center;}</xsl:text>
        <xsl:text>{\s4\lin720\f0\fs24\snext0 Blockquote;}</xsl:text>
        <xsl:text>{\s5\lin60\rin60\brdrs\brdrcf47\brdrw15\f0\fs24\snext0 Fieldset;}</xsl:text>
        <xsl:text>{\s6\f1\fs24\snext0 Preformatted;}</xsl:text>
        <xsl:text>{\s7\f1\fs24\snext0 Preformatted and wrapping;}</xsl:text>
        <xsl:text>{\s8\f1\fs48\b\snext0 Heading 1;}</xsl:text>
        <xsl:text>{\s9\f1\fs36\b\snext0 Heading 2;}</xsl:text>
        <xsl:text>{\s10\f1\fs26\b\snext0 Heading 3;}</xsl:text>
        <xsl:text>{\s11\f1\fs22\b\sl0\fs26\b\snext0 Heading 4;}</xsl:text>
        <xsl:text>{\s12\f1\fs18\b\snext0 Heading 5;}</xsl:text>
        <xsl:text>{\s13\f1\fs16\b\snext0 Heading 6;}</xsl:text>
        <xsl:text>{\s15\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s22\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s23\sl0\fs22\snext0 div;}</xsl:text>
        <xsl:text>{\s24\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s25\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s272\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s385\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s386\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s568\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s581\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s596\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s636\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s724\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s725\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s727\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s728\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s740\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s741\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s743\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s744\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s756\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s757\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s758\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s759\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\s760\sl0\f1\fs22\snext0 *;}</xsl:text>
        <xsl:text>{\s761\sl0\fs22\snext0 p;}</xsl:text>
        <xsl:text>{\*\cs16\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs17\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs18\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs19\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs20\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs21\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs26\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs27\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs28\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs29\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs30\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs31\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs32\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs36\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs37\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs38\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs39\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs40\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs41\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs42\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs43\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs44\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs48\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs49\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs50\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs51\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs52\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs53\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs54\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs55\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs56\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs57\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs58\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs59\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs60\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs61\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs62\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs63\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs64\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs65\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs66\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs67\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs68\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs69\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs70\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs71\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs72\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs73\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs74\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs75\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs76\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs77\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs81\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs82\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs83\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs84\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs85\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs86\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs87\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs88\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs89\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs90\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs91\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs92\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs93\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs94\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs95\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs96\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs97\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs98\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs99\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs100\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs101\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs102\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs103\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs104\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs105\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs106\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs107\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs108\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs109\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs113\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs114\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs115\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs116\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs117\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs118\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs119\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs120\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs121\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs122\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs123\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs124\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs125\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs126\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs127\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs128\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs129\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs130\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs131\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs132\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs133\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs134\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs135\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs136\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs137\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs138\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs139\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs140\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs141\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs142\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs143\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs147\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs148\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs149\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs150\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs151\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs152\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs153\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs154\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs155\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs156\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs160\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs161\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs162\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs163\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs164\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs165\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs166\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs167\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs168\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs169\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs170\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs171\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs172\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs173\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs174\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs175\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs176\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs177\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs178\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs179\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs180\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs181\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs182\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs183\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs184\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs185\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs186\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs190\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs191\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs192\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs193\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs194\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs195\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs196\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs197\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs198\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs199\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs200\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs201\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs202\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs203\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs204\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs205\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs206\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs207\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs208\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs209\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs210\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs211\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs212\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs213\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs214\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs215\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs216\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs217\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs218\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs219\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs220\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs221\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs222\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs223\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs224\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs225\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs226\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs227\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs228\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs229\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs230\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs231\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs232\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs233\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs234\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs235\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs236\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs237\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs238\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs239\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs240\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs241\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs242\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs243\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs244\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs245\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs246\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs247\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs248\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs249\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs250\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs251\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs252\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs253\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs254\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs255\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs256\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs257\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs258\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs259\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs260\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs261\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs262\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs263\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs264\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs265\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs266\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs267\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs268\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs269\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs270\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs271\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs273\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs274\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs275\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs276\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs277\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs278\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs279\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs280\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs281\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs282\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs283\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs284\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs285\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs286\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs287\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs288\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs289\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs290\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs291\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs292\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs293\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs294\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs295\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs296\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs297\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs298\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs299\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs300\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs301\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs302\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs303\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs304\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs305\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs306\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs307\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs308\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs309\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs310\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs311\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs312\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs313\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs314\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs315\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs316\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs317\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs318\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs319\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs320\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs321\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs322\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs323\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs324\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs325\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs326\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs327\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs328\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs329\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs330\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs331\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs332\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs333\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs334\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs335\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs336\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs337\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs338\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs339\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs340\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs341\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs342\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs343\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs344\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs345\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs346\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs347\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs348\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs349\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs350\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs351\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs352\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs353\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs354\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs355\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs356\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs357\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs358\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs359\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs360\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs361\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs362\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs363\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs364\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs365\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs366\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs367\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs368\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs369\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs370\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs371\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs372\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs373\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs374\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs375\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs376\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs377\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs378\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs379\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs380\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs381\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs382\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs383\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs384\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs387\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs388\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs392\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs393\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs394\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs395\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs396\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs397\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs398\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs399\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs400\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs401\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs402\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs403\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs404\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs405\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs406\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs407\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs408\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs409\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs410\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs411\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs412\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs413\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs414\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs415\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs416\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs417\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs418\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs419\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs420\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs421\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs422\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs423\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs424\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs425\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs426\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs427\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs428\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs429\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs430\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs431\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs432\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs433\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs434\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs435\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs436\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs437\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs438\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs439\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs440\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs441\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs442\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs443\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs444\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs445\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs446\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs447\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs448\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs449\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs450\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs451\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs452\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs453\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs454\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs455\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs456\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs457\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs458\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs459\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs460\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs461\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs462\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs463\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs464\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs465\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs466\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs467\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs468\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs469\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs470\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs471\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs472\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs473\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs474\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs475\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs476\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs477\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs478\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs479\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs480\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs481\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs482\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs483\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs484\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs485\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs486\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs487\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs488\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs489\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs490\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs491\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs492\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs493\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs494\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs495\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs496\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs497\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs498\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs499\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs500\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs501\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs502\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs503\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs504\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs505\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs506\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs507\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs508\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs509\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs510\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs511\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs512\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs513\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs514\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs515\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs516\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs517\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs518\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs519\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs520\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs521\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs522\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs523\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs524\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs525\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs526\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs527\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs528\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs529\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs530\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs531\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs532\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs533\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs534\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs535\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs536\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs537\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs538\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs539\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs540\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs541\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs542\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs543\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs544\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs545\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs546\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs547\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs548\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs549\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs550\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs551\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs552\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs553\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs554\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs555\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs556\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs557\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs558\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs559\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs560\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs561\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs562\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs563\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs564\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs565\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs566\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs567\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs569\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs570\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs571\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs572\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs573\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs574\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs575\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs576\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs577\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs578\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs579\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs580\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs582\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs583\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs584\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs585\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs586\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs587\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs588\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs589\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs590\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs591\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs592\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs593\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs594\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs595\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs597\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs598\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs599\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs600\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs601\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs602\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs603\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs604\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs605\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs606\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs607\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs608\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs609\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs610\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs611\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs612\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs613\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs614\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs615\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs616\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs617\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs618\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs619\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs620\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs621\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs622\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs623\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs624\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs625\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs626\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs627\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs628\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs629\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs630\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs631\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs632\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs633\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs634\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs635\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs637\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs638\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs639\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs640\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs644\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs645\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs646\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs647\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs648\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs649\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs650\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs651\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs652\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs653\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs654\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs655\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs656\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs657\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs658\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs659\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs660\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs661\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs665\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs666\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs667\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs668\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs669\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs670\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs671\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs672\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs673\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs674\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs675\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs676\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs677\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs678\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs679\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs680\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs681\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs682\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs683\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs684\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs685\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs686\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs687\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs688\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs689\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs690\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs691\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs692\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs693\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs694\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs695\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs696\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs697\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs698\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs699\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs700\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs701\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs702\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs703\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs704\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs705\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs706\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs707\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs708\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs709\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs710\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs711\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs712\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs713\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs714\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs715\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs716\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs717\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs718\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs719\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs720\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs721\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs722\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs723\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs726\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs729\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs730\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs731\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs732\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs733\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs734\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs735\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs736\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs737\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs738\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs739\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs742\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs745\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs746\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs747\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs748\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs749\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs750\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs751\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs752\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs753\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs754\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs755\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs762\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs763\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs764\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs765\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs766\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs767\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs768\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs769\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs770\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs771\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs772\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs773\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs774\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs775\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs776\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs777\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs778\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs779\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs780\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs781\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs782\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs783\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs784\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs785\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs786\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs787\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs788\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs789\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs790\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs791\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs792\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs793\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs794\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs795\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs796\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs797\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs798\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs802\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs803\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs804\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs805\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs806\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs807\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs808\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs809\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs810\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs811\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs812\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs813\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs814\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs815\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs816\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs817\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs818\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs819\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs820\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs821\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs822\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs823\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs824\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs825\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs826\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs827\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs828\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs829\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs830\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs831\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs832\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs833\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs834\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs835\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs836\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs837\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs838\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs839\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs840\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs841\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs842\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs843\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs844\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs845\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs846\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs850\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs851\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs852\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs853\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs854\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs855\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs856\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs857\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs858\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs859\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs860\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs861\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs862\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs863\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs864\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs865\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs866\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs867\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs868\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs869\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs870\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs871\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs872\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs873\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs874\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs875\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs876\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs877\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs878\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs879\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs880\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs881\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs882\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs886\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs887\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs888\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs889\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs890\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs891\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs892\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs893\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs894\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs895\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs896\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs897\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs898\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs899\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs900\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs901\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs902\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs903\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs904\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs905\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs906\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs907\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs908\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs909\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs910\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs911\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs912\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs913\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs914\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs915\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs916\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs917\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs918\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs919\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs920\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs921\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs922\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs923\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs924\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs925\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs926\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs927\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs928\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs929\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs930\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs931\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs932\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs933\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs934\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs935\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs936\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs937\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs938\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs939\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs940\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs941\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs942\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs943\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs944\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs945\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs946\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs947\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs948\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs949\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs950\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs951\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs952\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs953\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs954\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs955\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs956\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs957\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs958\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs959\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs960\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs961\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs962\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs963\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs964\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs965\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs966\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs970\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs971\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs972\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs973\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs974\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs975\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs976\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs977\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs978\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs979\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs980\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs981\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs982\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs983\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs984\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs985\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs986\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs987\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs988\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs989\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs990\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs991\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs992\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs993\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs994\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs995\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs996\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\cs997\f1\fs22\snext0 Character *;}</xsl:text>
        <xsl:text>{\*\ts33\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts34\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts35\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts45\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts46\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts47\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts78\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts79\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts80\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts110\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts111\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts112\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts144\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts145\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts146\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts157\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts158\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts159\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts187\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts188\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts189\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts389\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts390\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts391\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts641\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts642\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts643\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts662\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts663\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts664\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts799\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts800\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts801\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts847\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts848\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts849\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts883\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts884\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts885\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts967\tsrowd\ql\f1\fs22\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts968\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts969\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>}</xsl:text>
        <xsl:text>{\*\generator Altova StyleVision Enterprise Edition;}\viewkind1\viewzk0\viewscale100\newtblstyruls\nofeaturethrottle1 </xsl:text>
        <xsl:text>\dntblnsbdb\fs24\f0 </xsl:text>
        <xsl:call-template name="altova:DocumentSection_0">
            <xsl:with-param name="altova:nMaxWidthIn" select="7.07"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="altova:DocumentSection_0">
        <xsl:param name="altova:nMaxWidthIn"/>
        <xsl:param name="templatetablelevel"/>
        <xsl:text>\sectd\facingp\pgwsxn11900\pghsxn16820\margtsxn1120\marglsxn860\margbsxn1720\margrsxn860\headery0\footery0\cols1\colsx720\pgndec</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerl </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerr </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerl </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterLeft"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerr </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterRight"/>
        <xsl:text>}</xsl:text>
        <xsl:for-each select="$XML">
            <xsl:for-each select="eml:EML">
                <xsl:text>\par</xsl:text>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s3\qc\f0\fs24\s15\sl0\f1\fs26\b </xsl:text>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs16\f1\fs26\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>CENTRAAL STEMBUREAU (</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs17\f1\fs26\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$o3-4_010_CentraalStembureau"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="//eml:ElectionCategory[ text() = &apos;PS&apos; ]">
                        <xsl:for-each select="eml:ManagingAuthority">
                            <xsl:for-each select="eml:AuthorityIdentifier">
                                <xsl:text>{\cs18\f1\fs26\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs19\f1\fs26\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Kiesraad</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs20\f1\fs26\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$o3-4_060_Kiesraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\cs21\f1\fs26\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>)</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par\pard\s0\f0\fs24\b0\ql</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s1\f0\fs24\sl0\fs22\s22\s23\sl0\f1\fs22 </xsl:text>
                <xsl:for-each select="eml:CandidateList">
                    <xsl:text>\par\par</xsl:text>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\s1\f0\fs24\sl0\fs22\s22\s23\sl0\f1\fs22\s0\f0\fs24\sl0\fs22\s24\s25\sl0\f1\fs26\b </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs26\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Overzicht van de ingeleverde kandidatenlijsten</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs27\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$o3-4_020_Overzicht"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:call-template name="LineBreakTable">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par\pard\s0\s0\f0\fs24\f0\fs24\b0</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\par\s1\f0\fs24\sl0\fs22\s22\s23\sl0\f1\fs22 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs28\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Voor </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs29\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$o3-4_030_Voor"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:for-each select="eml:Election">
                        <xsl:call-template name="ElectionName">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG230c">
                        <xsl:choose>
                            <xsl:when test="//eml:ElectionCategory[ text() = &apos;TK&apos; ]">
                                <xsl:call-template name="OverviewCandidateListsTK">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="//eml:ElectionCategory[ text() = &apos;PS&apos; ]">
                                <xsl:call-template name="OverviewCandidateListsPS2">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:call-template name="OverviewCandidateListsEK">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:if test="//kr:ElectionSubcategory[text() = &apos;EK&apos;]">
                        <xsl:call-template name="ProvincesTable">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:if test="//kr:ElectionSubcategory[text() = &apos;EK&apos;]">
                        <xsl:text>\par </xsl:text>
                    </xsl:if>
                    <xsl:text>\page </xsl:text>
                    <xsl:for-each select="rg:RG230c">
                        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
                            <xsl:if test="rg:OverviewOfIdenticalLists">
                                <xsl:for-each select="rg:CandidateListName">
                                    <xsl:for-each select="eml:AffiliationIdentifier">
                                        <xsl:if test="@Id != &quot;&quot;">
                                            <xsl:for-each select="@Id">
                                                <xsl:text>{\cs30\f1\fs22\b </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:value-of select="string(.)"/>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                                <xsl:text>{\cs31\f1\fs20\b </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>. </xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:for-each>
                                        </xsl:if>
                                    </xsl:for-each>
                                    <xsl:if test="eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                                        <xsl:for-each select="eml:AffiliationIdentifier">
                                            <xsl:for-each select="eml:RegisteredName">
                                                <xsl:text>{\cs32\f1\fs22\b </xsl:text>
                                                <xsl:apply-templates>
                                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                </xsl:apply-templates>
                                                <xsl:text>}</xsl:text>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:if>
                                </xsl:for-each>
                                <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                                <xsl:variable name="altova:nTableWidthIn_0" select="$altova:nMaxWidthIn * 1.00000"/>
                                <xsl:variable name="altova:nTableWidthTw_0" select="$altova:nTableWidthIn_0 * 1440"/>
                                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_0" select="round($altova:nTableWidthTw_0 * 0.25)"/>
                                <xsl:variable name="altova:nTableIndentTw_0" select="0"/>
                                <xsl:variable name="altova:nSumColumnWidthsTw_0" select="round(800.50)"/>
                                <xsl:variable name="altova:TableWidthFactor_0">
                                    <xsl:choose>
                                        <xsl:when test="$altova:nSumColumnWidthsTw_0 &gt; $altova:nTableWidthTw_0">
                                            <xsl:value-of select="($altova:nTableWidthTw_0 - $altova:SumDefaultColumnsForWideTableTw_0) div $altova:nSumColumnWidthsTw_0"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="1"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:variable name="altova:nColumnsWithDefaultWidth_0" select="round(1)"/>
                                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_0">
                                    <xsl:choose>
                                        <xsl:when test="$altova:nColumnsWithDefaultWidth_0 = 0">
                                            <xsl:value-of select="round(1)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_0"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:variable name="altova:nDefaultColumnWidthTw_0">
                                    <xsl:choose>
                                        <xsl:when test="$altova:TableWidthFactor_0 &lt; 1">
                                            <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_0 div $altova:nColumnsWithDefaultWidthNotZero_0"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of select="round(($altova:nTableWidthTw_0 - $altova:nSumColumnWidthsTw_0) div $altova:nColumnsWithDefaultWidthNotZero_0)"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:variable name="altova:nColumnWidthTw_0_0" select="round(0.56 * 1440 * $altova:TableWidthFactor_0)"/>
                                <xsl:variable name="altova:nColumnWidthTw_0_1" select="$altova:nDefaultColumnWidthTw_0"/>
                                <xsl:text>\par </xsl:text>
                                <xsl:text>\pard\s0\f0\fs24</xsl:text>
                                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 1"/>
                                <xsl:variable name="tablestyle0">
                                    <xsl:text>\trowd</xsl:text>
                                    <xsl:text>\trautofit1</xsl:text>
                                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                                    <xsl:value-of select="round($altova:nTableWidthTw_0)"/>
                                    <xsl:text>\trleft</xsl:text>
                                    <xsl:value-of select="$altova:nTableIndentTw_0"/>
                                    <xsl:text>\ts33\ts34\ts35\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                                </xsl:variable>
                                <xsl:variable name="rowend0">
                                    <xsl:choose>
                                        <xsl:when test="$templatetablelevel + 1 = 1">
                                            <xsl:text>\row\pard</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:variable name="cellend0">
                                    <xsl:choose>
                                        <xsl:when test="$templatetablelevel + 1 = 1">
                                            <xsl:text>\cell</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>\nestcell</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:variable>
                                <xsl:variable name="altova:RowStyle0">
                                    <xsl:text>\trrh0\trhdr</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                                    <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                                    <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                                </xsl:variable>
                                <xsl:if test="$templatetablelevel + 1 = 1">
                                    <xsl:value-of select="$tablestyle0"/>
                                    <xsl:value-of select="$altova:RowStyle0"/>
                                </xsl:if>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 1"/>
                                <xsl:text>\ql\sl0\f1\fs22\b0 </xsl:text>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs36\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>Stel</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs37\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$o3-4_040_Stel"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend0"/>
                                <xsl:text>\ql\sl0\f1\fs22\b0 </xsl:text>
                                <xsl:choose>
                                    <xsl:when test="//eml:ElectionCategory != &apos;EK&apos;">
                                        <xsl:choose>
                                            <xsl:when test="$lang=0">
                                                <xsl:text>{\cs38\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>Kieskringen</xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:text>{\cs39\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:value-of select="$o3-4_050_Kieskringen"/>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:choose>
                                            <xsl:when test="$lang=0">
                                                <xsl:text>{\cs40\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>Provincies</xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:text>{\cs41\f1\fs22 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:value-of select="$o3-4_050_Provincies"/>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend0"/>
                                <xsl:if test="$templatetablelevel + 1 > 1">
                                    <xsl:text>{\*\nesttableprops</xsl:text>
                                </xsl:if>
                                <xsl:value-of select="$tablestyle0"/>
                                <xsl:value-of select="$altova:RowStyle0"/>
                                <xsl:value-of select="$rowend0"/>
                                <xsl:for-each select="rg:OverviewOfIdenticalLists">
                                    <xsl:for-each select="rg:IdenticalList">
                                        <xsl:variable name="altova:RowStyle1">
                                            <xsl:text>\trrh0</xsl:text>
                                            <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                            <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                                <xsl:text>\clftsWidth1</xsl:text>
                                            </xsl:if>
                                            <xsl:text>\cellx</xsl:text>
                                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                                            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                            <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                                <xsl:text>\clftsWidth1</xsl:text>
                                            </xsl:if>
                                            <xsl:text>\cellx</xsl:text>
                                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                                        </xsl:variable>
                                        <xsl:if test="$templatetablelevel + 1 = 1">
                                            <xsl:value-of select="$tablestyle0"/>
                                            <xsl:value-of select="$altova:RowStyle1"/>
                                        </xsl:if>
                                        <xsl:text>\pard</xsl:text>
                                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                        <xsl:text>\itap</xsl:text>
                                        <xsl:value-of select="$templatetablelevel + 1"/>
                                        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                        <xsl:for-each select="rg:Id">
                                            <xsl:text>{\cs42\f1\fs22 </xsl:text>
                                            <xsl:apply-templates>
                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_0 div 1440) - 0.01042 - 0.01042"/>
                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                            </xsl:apply-templates>
                                            <xsl:text>}</xsl:text>
                                        </xsl:for-each>
                                        <xsl:text>\f0\fs24</xsl:text>
                                        <xsl:value-of select="$cellend0"/>
                                        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                        <xsl:for-each select="rg:DistrictId">
                                            <xsl:text>{\cs43\f1\fs22 </xsl:text>
                                            <xsl:apply-templates>
                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.01042 - 0.01042"/>
                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                            </xsl:apply-templates>
                                            <xsl:text>}</xsl:text>
                                            <xsl:if test="position() &lt;  last()">
                                                <xsl:text>{\cs44\f1\fs20 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>, </xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:if>
                                        </xsl:for-each>
                                        <xsl:text>\f0\fs24</xsl:text>
                                        <xsl:value-of select="$cellend0"/>
                                        <xsl:if test="$templatetablelevel + 1 > 1">
                                            <xsl:text>{\*\nesttableprops</xsl:text>
                                        </xsl:if>
                                        <xsl:value-of select="$tablestyle0"/>
                                        <xsl:value-of select="$altova:RowStyle1"/>
                                        <xsl:value-of select="$rowend0"/>
                                    </xsl:for-each>
                                </xsl:for-each>
                                <xsl:variable name="altova:RowStyle2">
                                    <xsl:text>\trrh0</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                                    <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                                    <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                                </xsl:variable>
                                <xsl:if test="$templatetablelevel + 1 = 1">
                                    <xsl:value-of select="$tablestyle0"/>
                                    <xsl:value-of select="$altova:RowStyle2"/>
                                </xsl:if>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 1"/>
                                <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend0"/>
                                <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend0"/>
                                <xsl:if test="$templatetablelevel + 1 > 1">
                                    <xsl:text>{\*\nesttableprops</xsl:text>
                                </xsl:if>
                                <xsl:value-of select="$tablestyle0"/>
                                <xsl:value-of select="$altova:RowStyle2"/>
                                <xsl:value-of select="$rowend0"/>
                                <xsl:text>\pard\s1\f0\fs24\sl0\fs22\s22\s23\sl0\f1\fs22</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text> </xsl:text>
                                <xsl:text>\par </xsl:text>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\par\pard\s0\f0\fs24</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCandidateListsTK">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_2" select="."/>
        <xsl:variable name="altova:nTableWidthIn_1" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_1" select="$altova:nTableWidthIn_1 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_1" select="round($altova:nTableWidthTw_1 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_1" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_1" select="round(9573.00)"/>
        <xsl:variable name="altova:TableWidthFactor_1">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_1 &gt; $altova:nTableWidthTw_1">
                    <xsl:value-of select="$altova:nTableWidthTw_1 div $altova:nSumColumnWidthsTw_1"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_1" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_1_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_1" select="round(0.28 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_2" select="round(1.56 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_3" select="round(0.31 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_4" select="round(0.31 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_5" select="round(0.31 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_6" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_7" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_8" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_9" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_10" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_11" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_12" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_13" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_14" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_15" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_16" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_17" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_18" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_19" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_20" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_21" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_22" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_23" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_24" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:variable name="altova:nColumnWidthTw_1_25" select="round(0.18 * 1440 * $altova:TableWidthFactor_1)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle1">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_1)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_1"/>
            <xsl:text>\ts45\ts46\ts47\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend1">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend1">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle3">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_4 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col3_AfterColumn + $altova:nColumnWidthTw_1_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_5 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col4_AfterColumn + $altova:nColumnWidthTw_1_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_6 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col5_AfterColumn + $altova:nColumnWidthTw_1_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_7 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col6_AfterColumn + $altova:nColumnWidthTw_1_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_8 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col7_AfterColumn + $altova:nColumnWidthTw_1_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_9 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col8_AfterColumn + $altova:nColumnWidthTw_1_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_10 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col9_AfterColumn + $altova:nColumnWidthTw_1_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_11 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col10_AfterColumn + $altova:nColumnWidthTw_1_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_12 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col11_AfterColumn + $altova:nColumnWidthTw_1_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_13 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col12_AfterColumn + $altova:nColumnWidthTw_1_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_14 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col13_AfterColumn + $altova:nColumnWidthTw_1_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col14_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_15 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col14_AfterColumn + $altova:nColumnWidthTw_1_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col15_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_16 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col15_AfterColumn + $altova:nColumnWidthTw_1_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col16_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_17 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col17_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col16_AfterColumn + $altova:nColumnWidthTw_1_17"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col17_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_18 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col18_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col17_AfterColumn + $altova:nColumnWidthTw_1_18"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col18_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_19 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col19_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col18_AfterColumn + $altova:nColumnWidthTw_1_19"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col19_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_20 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col20_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col19_AfterColumn + $altova:nColumnWidthTw_1_20"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col20_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_21 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col21_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col20_AfterColumn + $altova:nColumnWidthTw_1_21"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col21_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_22 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col22_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col21_AfterColumn + $altova:nColumnWidthTw_1_22"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col22_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_23 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col23_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col22_AfterColumn + $altova:nColumnWidthTw_1_23"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col23_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_24 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col24_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col23_AfterColumn + $altova:nColumnWidthTw_1_24"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col24_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_25 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col25_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col24_AfterColumn + $altova:nColumnWidthTw_1_25"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col25_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle3"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs48\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijstnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs49\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aanduiding</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs50\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Ingeleverd</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs51\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Kieskring</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle3"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:variable name="altova:RowStyle4">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_4 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col3_AfterColumn + $altova:nColumnWidthTw_1_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_5 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col4_AfterColumn + $altova:nColumnWidthTw_1_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_6 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col5_AfterColumn + $altova:nColumnWidthTw_1_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_7 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col6_AfterColumn + $altova:nColumnWidthTw_1_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_8 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col7_AfterColumn + $altova:nColumnWidthTw_1_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col8_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_9 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col8_AfterColumn + $altova:nColumnWidthTw_1_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col9_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_10 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col9_AfterColumn + $altova:nColumnWidthTw_1_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col10_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_11 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col10_AfterColumn + $altova:nColumnWidthTw_1_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col11_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_12 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col11_AfterColumn + $altova:nColumnWidthTw_1_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col12_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_13 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col12_AfterColumn + $altova:nColumnWidthTw_1_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col13_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_14 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col13_AfterColumn + $altova:nColumnWidthTw_1_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col14_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_15 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col14_AfterColumn + $altova:nColumnWidthTw_1_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col15_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_16 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col15_AfterColumn + $altova:nColumnWidthTw_1_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col16_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_17 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col17_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col16_AfterColumn + $altova:nColumnWidthTw_1_17"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col17_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_18 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col18_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col17_AfterColumn + $altova:nColumnWidthTw_1_18"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col18_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_19 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col19_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col18_AfterColumn + $altova:nColumnWidthTw_1_19"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col19_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_20 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col20_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col19_AfterColumn + $altova:nColumnWidthTw_1_20"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col20_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_21 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col21_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col20_AfterColumn + $altova:nColumnWidthTw_1_21"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col21_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_22 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col22_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col21_AfterColumn + $altova:nColumnWidthTw_1_22"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col22_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_23 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col23_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col22_AfterColumn + $altova:nColumnWidthTw_1_23"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col23_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_24 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col24_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col23_AfterColumn + $altova:nColumnWidthTw_1_24"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col24_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_25 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col25_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col24_AfterColumn + $altova:nColumnWidthTw_1_25"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col25_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle4"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl-1939\f1\fs22 </xsl:text>
        <xsl:text>{\cs52\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs53\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs54\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs55\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep (gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs56\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs57\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs58\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs59\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>(niet</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs60\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs61\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs62\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs63\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs64\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs65\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs66\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>zichzelf</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs67\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs68\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>staande</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs69\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs70\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_10 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="6"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="7"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_12 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="8"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="9"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_14 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="10"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_15 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="11"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_16 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="12"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_17 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="13"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_18 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="14"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_19 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="15"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_20 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="16"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_21 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="17"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_22 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="18"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_23 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="19"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_24 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="20"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_25 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle4"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
            <xsl:sort select="rg:CandidateListName/@Id" data-type="number" order="ascending"/>
            <xsl:variable name="altova:RowStyle5">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_4 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col3_AfterColumn + $altova:nColumnWidthTw_1_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_5 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col4_AfterColumn + $altova:nColumnWidthTw_1_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_6 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col5_AfterColumn + $altova:nColumnWidthTw_1_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_7 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col6_AfterColumn + $altova:nColumnWidthTw_1_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_8 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col7_AfterColumn + $altova:nColumnWidthTw_1_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_9 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col8_AfterColumn + $altova:nColumnWidthTw_1_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_10 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col9_AfterColumn + $altova:nColumnWidthTw_1_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_11 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col10_AfterColumn + $altova:nColumnWidthTw_1_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_12 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col11_AfterColumn + $altova:nColumnWidthTw_1_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_13 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col12_AfterColumn + $altova:nColumnWidthTw_1_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_14 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col13_AfterColumn + $altova:nColumnWidthTw_1_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col14_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_15 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col14_AfterColumn + $altova:nColumnWidthTw_1_15"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col15_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_16 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col15_AfterColumn + $altova:nColumnWidthTw_1_16"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col16_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_17 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col17_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col16_AfterColumn + $altova:nColumnWidthTw_1_17"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col17_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_18 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col18_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col17_AfterColumn + $altova:nColumnWidthTw_1_18"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col18_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_19 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col19_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col18_AfterColumn + $altova:nColumnWidthTw_1_19"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col19_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_20 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col20_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col19_AfterColumn + $altova:nColumnWidthTw_1_20"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col20_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_21 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col21_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col20_AfterColumn + $altova:nColumnWidthTw_1_21"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col21_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_22 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col22_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col21_AfterColumn + $altova:nColumnWidthTw_1_22"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col22_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_23 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col23_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col22_AfterColumn + $altova:nColumnWidthTw_1_23"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col23_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_24 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col24_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col23_AfterColumn + $altova:nColumnWidthTw_1_24"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col24_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_1_25 = $altova:nDefaultColumnWidthTw_1">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl1_Col25_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col24_AfterColumn + $altova:nColumnWidthTw_1_25"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col25_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle1"/>
                <xsl:value-of select="$altova:RowStyle5"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs71\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>{\cs72\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:choose>
                    <xsl:when test="eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                        <xsl:for-each select="eml:AffiliationIdentifier">
                            <xsl:for-each select="eml:RegisteredName">
                                <xsl:text>{\cs73\f1\fs20 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_1 div 1440) + ($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs74\cf140\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>invisible</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;stel gelijkluidende lijsten&quot;]">
                    <xsl:text>{\cs75\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;lijstengroep&quot;]">
                    <xsl:text>{\cs76\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;op zichzelf staande lijst&quot;]">
                    <xsl:text>{\cs77\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_15 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_16 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_17 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="13"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_18 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="14"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_19 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="15"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_20 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="16"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_21 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="17"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_22 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="18"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_23 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="19"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_24 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="20"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_25 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend1"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle5"/>
            <xsl:value-of select="$rowend1"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle6">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_4 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col3_AfterColumn + $altova:nColumnWidthTw_1_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_5 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col4_AfterColumn + $altova:nColumnWidthTw_1_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_6 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col5_AfterColumn + $altova:nColumnWidthTw_1_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_7 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col6_AfterColumn + $altova:nColumnWidthTw_1_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_8 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col7_AfterColumn + $altova:nColumnWidthTw_1_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_9 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col8_AfterColumn + $altova:nColumnWidthTw_1_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_10 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col9_AfterColumn + $altova:nColumnWidthTw_1_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_11 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col10_AfterColumn + $altova:nColumnWidthTw_1_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_12 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col11_AfterColumn + $altova:nColumnWidthTw_1_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_13 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col12_AfterColumn + $altova:nColumnWidthTw_1_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_14 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col13_AfterColumn + $altova:nColumnWidthTw_1_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col14_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_15 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col14_AfterColumn + $altova:nColumnWidthTw_1_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col15_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_16 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col15_AfterColumn + $altova:nColumnWidthTw_1_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col16_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_17 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col17_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col16_AfterColumn + $altova:nColumnWidthTw_1_17"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col17_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_18 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col18_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col17_AfterColumn + $altova:nColumnWidthTw_1_18"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col18_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_19 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col19_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col18_AfterColumn + $altova:nColumnWidthTw_1_19"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col19_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_20 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col20_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col19_AfterColumn + $altova:nColumnWidthTw_1_20"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col20_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_21 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col21_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col20_AfterColumn + $altova:nColumnWidthTw_1_21"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col21_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_22 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col22_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col21_AfterColumn + $altova:nColumnWidthTw_1_22"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col22_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_23 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col23_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col22_AfterColumn + $altova:nColumnWidthTw_1_23"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col23_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_24 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col24_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col23_AfterColumn + $altova:nColumnWidthTw_1_24"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col24_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_1_25 = $altova:nDefaultColumnWidthTw_1">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl1_Col25_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col24_AfterColumn + $altova:nColumnWidthTw_1_25"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col25_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle1"/>
            <xsl:value-of select="$altova:RowStyle6"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend1"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle1"/>
        <xsl:value-of select="$altova:RowStyle6"/>
        <xsl:value-of select="$rowend1"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateListsPS2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_3" select="."/>
        <xsl:variable name="altova:nTableWidthIn_2" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_2" select="$altova:nTableWidthIn_2 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_2" select="round($altova:nTableWidthTw_2 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_2" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_2" select="round(6363.00)"/>
        <xsl:variable name="altova:TableWidthFactor_2">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_2 &gt; $altova:nTableWidthTw_2">
                    <xsl:value-of select="($altova:nTableWidthTw_2 - $altova:SumDefaultColumnsForWideTableTw_2) div $altova:nSumColumnWidthsTw_2"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_2" select="round(4)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_2">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_2 = 0">
                    <xsl:value-of select="round(4)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_2"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_2">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_2 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_2 div $altova:nColumnsWithDefaultWidthNotZero_2"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_2 - $altova:nSumColumnWidthsTw_2) div $altova:nColumnsWithDefaultWidthNotZero_2)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_2_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_1" select="round(0.94 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_2" select="round(1.94 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_3" select="round(0.42 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_4" select="round(0.42 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_5" select="round(0.42 * 1440 * $altova:TableWidthFactor_2)"/>
        <xsl:variable name="altova:nColumnWidthTw_2_6" select="$altova:nDefaultColumnWidthTw_2"/>
        <xsl:variable name="altova:nColumnWidthTw_2_7" select="$altova:nDefaultColumnWidthTw_2"/>
        <xsl:variable name="altova:nColumnWidthTw_2_8" select="$altova:nDefaultColumnWidthTw_2"/>
        <xsl:variable name="altova:nColumnWidthTw_2_9" select="$altova:nDefaultColumnWidthTw_2"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle2">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_2)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_2"/>
            <xsl:text>\ts78\ts79\ts80\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend2">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend2">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle7">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_4 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col3_AfterColumn + $altova:nColumnWidthTw_2_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_5 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col4_AfterColumn + $altova:nColumnWidthTw_2_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_6 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col5_AfterColumn + $altova:nColumnWidthTw_2_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_7 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col6_AfterColumn + $altova:nColumnWidthTw_2_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_8 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col7_AfterColumn + $altova:nColumnWidthTw_2_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_9 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col8_AfterColumn + $altova:nColumnWidthTw_2_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle2"/>
            <xsl:value-of select="$altova:RowStyle7"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs81\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijstnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs82\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aanduiding</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs83\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Ingeleverd</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs84\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Kieskring</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle2"/>
        <xsl:value-of select="$altova:RowStyle7"/>
        <xsl:value-of select="$rowend2"/>
        <xsl:variable name="altova:RowStyle8">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_4 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col3_AfterColumn + $altova:nColumnWidthTw_2_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_5 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col4_AfterColumn + $altova:nColumnWidthTw_2_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_6 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col5_AfterColumn + $altova:nColumnWidthTw_2_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_7 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col6_AfterColumn + $altova:nColumnWidthTw_2_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_8 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col7_AfterColumn + $altova:nColumnWidthTw_2_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col8_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_9 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col8_AfterColumn + $altova:nColumnWidthTw_2_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle2"/>
            <xsl:value-of select="$altova:RowStyle8"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl-1939\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs85\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs86\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs87\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep (gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs88\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs89\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs90\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs91\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>(niet</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs92\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs93\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs94\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs95\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs96\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs97\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs98\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>zichzelf</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs99\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs100\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>staande</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs101\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs102\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="1"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="2"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="3"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="4"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle2"/>
        <xsl:value-of select="$altova:RowStyle8"/>
        <xsl:value-of select="$rowend2"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
            <xsl:sort select="rg:CandidateListName/@Id" data-type="number" order="ascending"/>
            <xsl:variable name="altova:RowStyle9">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_4 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col3_AfterColumn + $altova:nColumnWidthTw_2_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_5 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col4_AfterColumn + $altova:nColumnWidthTw_2_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_6 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col5_AfterColumn + $altova:nColumnWidthTw_2_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_7 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col6_AfterColumn + $altova:nColumnWidthTw_2_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_8 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col7_AfterColumn + $altova:nColumnWidthTw_2_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_2_9 = $altova:nDefaultColumnWidthTw_2">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl2_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col8_AfterColumn + $altova:nColumnWidthTw_2_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col9_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle2"/>
                <xsl:value-of select="$altova:RowStyle9"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs103\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>{\cs104\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:choose>
                    <xsl:when test="eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                        <xsl:for-each select="eml:AffiliationIdentifier">
                            <xsl:for-each select="eml:RegisteredName">
                                <xsl:text>{\cs105\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_1 div 1440) + ($altova:nColumnWidthTw_2_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs106\cf140\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>invisible</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;stel gelijkluidende lijsten&quot;]">
                    <xsl:text>{\cs107\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;lijstengroep&quot;]">
                    <xsl:text>{\cs108\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;op zichzelf staande lijst&quot;]">
                    <xsl:text>{\cs109\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="1"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="2"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="3"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="4"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend2"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle2"/>
            <xsl:value-of select="$altova:RowStyle9"/>
            <xsl:value-of select="$rowend2"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle10">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_4 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col3_AfterColumn + $altova:nColumnWidthTw_2_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_5 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col4_AfterColumn + $altova:nColumnWidthTw_2_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_6 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col5_AfterColumn + $altova:nColumnWidthTw_2_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_7 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col6_AfterColumn + $altova:nColumnWidthTw_2_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_8 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col7_AfterColumn + $altova:nColumnWidthTw_2_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_2_9 = $altova:nDefaultColumnWidthTw_2">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl2_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col8_AfterColumn + $altova:nColumnWidthTw_2_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle2"/>
            <xsl:value-of select="$altova:RowStyle10"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend2"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle2"/>
        <xsl:value-of select="$altova:RowStyle10"/>
        <xsl:value-of select="$rowend2"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateListsEK">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_4" select="."/>
        <xsl:variable name="altova:nTableWidthIn_3" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_3" select="$altova:nTableWidthIn_3 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_3" select="round($altova:nTableWidthTw_3 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_3" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_3" select="round(4882.50)"/>
        <xsl:variable name="altova:TableWidthFactor_3">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_3 &gt; $altova:nTableWidthTw_3">
                    <xsl:value-of select="($altova:nTableWidthTw_3 - $altova:SumDefaultColumnsForWideTableTw_3) div $altova:nSumColumnWidthsTw_3"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_3" select="round(12)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_3">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_3 = 0">
                    <xsl:value-of select="round(12)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_3"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_3">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_3 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_3 div $altova:nColumnsWithDefaultWidthNotZero_3"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_3 - $altova:nSumColumnWidthsTw_3) div $altova:nColumnsWithDefaultWidthNotZero_3)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_3_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_3)"/>
        <xsl:variable name="altova:nColumnWidthTw_3_1" select="round(0.94 * 1440 * $altova:TableWidthFactor_3)"/>
        <xsl:variable name="altova:nColumnWidthTw_3_2" select="round(1.00 * 1440 * $altova:TableWidthFactor_3)"/>
        <xsl:variable name="altova:nColumnWidthTw_3_3" select="round(0.83 * 1440 * $altova:TableWidthFactor_3)"/>
        <xsl:variable name="altova:nColumnWidthTw_3_4" select="round(0.33 * 1440 * $altova:TableWidthFactor_3)"/>
        <xsl:variable name="altova:nColumnWidthTw_3_5" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_6" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_7" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_8" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_9" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_10" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_11" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_12" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_13" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_14" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_15" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:variable name="altova:nColumnWidthTw_3_16" select="$altova:nDefaultColumnWidthTw_3"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle3">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_3)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_3"/>
            <xsl:text>\ts110\ts111\ts112\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend3">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend3">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle11">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_3 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col2_AfterColumn + $altova:nColumnWidthTw_3_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_4 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col3_AfterColumn + $altova:nColumnWidthTw_3_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_5 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col4_AfterColumn + $altova:nColumnWidthTw_3_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_6 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col5_AfterColumn + $altova:nColumnWidthTw_3_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_7 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col6_AfterColumn + $altova:nColumnWidthTw_3_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_8 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col7_AfterColumn + $altova:nColumnWidthTw_3_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_9 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col8_AfterColumn + $altova:nColumnWidthTw_3_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_10 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col9_AfterColumn + $altova:nColumnWidthTw_3_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_11 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col10_AfterColumn + $altova:nColumnWidthTw_3_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_12 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col11_AfterColumn + $altova:nColumnWidthTw_3_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_13 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col12_AfterColumn + $altova:nColumnWidthTw_3_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_14 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col13_AfterColumn + $altova:nColumnWidthTw_3_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col14_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_15 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col14_AfterColumn + $altova:nColumnWidthTw_3_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col15_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_16 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col15_AfterColumn + $altova:nColumnWidthTw_3_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col16_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle3"/>
            <xsl:value-of select="$altova:RowStyle11"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs113\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst-</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs114\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_Lijst"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs115\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>nummer</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs116\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_nummer"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs117\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Aanduiding</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs118\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_Aanduiding"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs119\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>De groepering heeft</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs120\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_groeperingHeeft"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs121\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>ingediend: </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs122\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_ingediend"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs123\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>1) een lijstengroep</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs124\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_lijstengroep"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs125\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>2) een stel gelijk-</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs126\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_stelGelijk"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs127\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>luidende lijsten</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs128\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_luidendeLijsten"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs129\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>3) een op zichzelf staande lijst.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs130\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_zichzelfStaandeLijst"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs131\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Provincie(s)</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs132\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_OverviewCandidateListsEK_Provincies"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle3"/>
        <xsl:value-of select="$altova:RowStyle11"/>
        <xsl:value-of select="$rowend3"/>
        <xsl:variable name="altova:RowStyle12">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_3 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col2_AfterColumn + $altova:nColumnWidthTw_3_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_4 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col3_AfterColumn + $altova:nColumnWidthTw_3_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_5 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col4_AfterColumn + $altova:nColumnWidthTw_3_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_6 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col5_AfterColumn + $altova:nColumnWidthTw_3_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_7 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col6_AfterColumn + $altova:nColumnWidthTw_3_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_8 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col7_AfterColumn + $altova:nColumnWidthTw_3_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_9 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col8_AfterColumn + $altova:nColumnWidthTw_3_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_10 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col9_AfterColumn + $altova:nColumnWidthTw_3_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_11 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col10_AfterColumn + $altova:nColumnWidthTw_3_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_12 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col11_AfterColumn + $altova:nColumnWidthTw_3_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_13 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col12_AfterColumn + $altova:nColumnWidthTw_3_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_14 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col13_AfterColumn + $altova:nColumnWidthTw_3_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col14_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_15 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col14_AfterColumn + $altova:nColumnWidthTw_3_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col15_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_16 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col15_AfterColumn + $altova:nColumnWidthTw_3_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col16_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle3"/>
            <xsl:value-of select="$altova:RowStyle12"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs133\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs134\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs135\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs136\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="1"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="2"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="3"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="4"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="5"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="6"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_10 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="7"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="8"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_12 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="9"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="10"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_14 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="11"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_15 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="12"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_16 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle3"/>
        <xsl:value-of select="$altova:RowStyle12"/>
        <xsl:value-of select="$rowend3"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
            <xsl:sort select="rg:CandidateListName/@Id" data-type="number" order="ascending"/>
            <xsl:variable name="altova:RowStyle13">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_3 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col2_AfterColumn + $altova:nColumnWidthTw_3_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_4 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col3_AfterColumn + $altova:nColumnWidthTw_3_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_5 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col4_AfterColumn + $altova:nColumnWidthTw_3_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_6 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col5_AfterColumn + $altova:nColumnWidthTw_3_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_7 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col6_AfterColumn + $altova:nColumnWidthTw_3_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_8 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col7_AfterColumn + $altova:nColumnWidthTw_3_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_9 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col8_AfterColumn + $altova:nColumnWidthTw_3_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_10 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col9_AfterColumn + $altova:nColumnWidthTw_3_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_11 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col10_AfterColumn + $altova:nColumnWidthTw_3_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_12 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col11_AfterColumn + $altova:nColumnWidthTw_3_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_13 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col12_AfterColumn + $altova:nColumnWidthTw_3_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_14 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col13_AfterColumn + $altova:nColumnWidthTw_3_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col14_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_15 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col14_AfterColumn + $altova:nColumnWidthTw_3_15"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col15_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_3_16 = $altova:nDefaultColumnWidthTw_3">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl3_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col15_AfterColumn + $altova:nColumnWidthTw_3_16"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col16_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle3"/>
                <xsl:value-of select="$altova:RowStyle13"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs137\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>{\cs138\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:choose>
                    <xsl:when test="eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                        <xsl:for-each select="eml:AffiliationIdentifier">
                            <xsl:for-each select="eml:RegisteredName">
                                <xsl:text>{\cs139\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_1 div 1440) + ($altova:nColumnWidthTw_3_2 div 1440) + ($altova:nColumnWidthTw_3_3 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs140\cf140\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>invisible</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;lijstengroep&quot;]">
                    <xsl:text>{\cs141\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>1</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:when test="./rg:Type[text() = &quot;stel gelijkluidende lijsten&quot;]">
                    <xsl:text>{\cs142\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>2</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:when test="./rg:Type[text() = &quot;op zichzelf staande lijst&quot;]">
                    <xsl:text>{\cs143\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>3</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="1"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="2"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="3"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="4"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="5"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="6"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="7"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="8"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="9"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="10"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="11"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_15 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="12"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_3_16 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend3"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle3"/>
            <xsl:value-of select="$altova:RowStyle13"/>
            <xsl:value-of select="$rowend3"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle14">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_3 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col2_AfterColumn + $altova:nColumnWidthTw_3_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_4 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col3_AfterColumn + $altova:nColumnWidthTw_3_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_5 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col4_AfterColumn + $altova:nColumnWidthTw_3_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_6 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col5_AfterColumn + $altova:nColumnWidthTw_3_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_7 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col6_AfterColumn + $altova:nColumnWidthTw_3_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_8 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col7_AfterColumn + $altova:nColumnWidthTw_3_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_9 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col8_AfterColumn + $altova:nColumnWidthTw_3_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_10 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col9_AfterColumn + $altova:nColumnWidthTw_3_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_11 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col10_AfterColumn + $altova:nColumnWidthTw_3_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_12 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col11_AfterColumn + $altova:nColumnWidthTw_3_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_13 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col12_AfterColumn + $altova:nColumnWidthTw_3_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_14 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col13_AfterColumn + $altova:nColumnWidthTw_3_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col14_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_15 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col14_AfterColumn + $altova:nColumnWidthTw_3_15"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col15_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_3_16 = $altova:nDefaultColumnWidthTw_3">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl3_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col15_AfterColumn + $altova:nColumnWidthTw_3_16"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col16_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle3"/>
            <xsl:value-of select="$altova:RowStyle14"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend3"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle3"/>
        <xsl:value-of select="$altova:RowStyle14"/>
        <xsl:value-of select="$rowend3"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultP22-1-14">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isSeats" select="1"/>
        <xsl:for-each select="rg:OverviewOfCandidatesAndResults">
            <xsl:variable name="noOfCandidatesPerPage" select="39"/>
            <xsl:for-each select="rg:ListGroupAndResults">
                <xsl:if test="($isSeats = 1 and rg:Seats &gt; 0) or ($isSeats = 0 and rg:Seats = 0)">
                    <xsl:for-each select="rg:ListAndResults">
                        <xsl:variable name="candidateCount" select="count(rg:CandidateAndResult)"/>
                        <xsl:choose>
                            <xsl:when test="$candidateCount != ($noOfCandidatesPerPage + 1) and 
$candidateCount != ($noOfCandidatesPerPage * 2 + 1) and 
$candidateCount != ($noOfCandidatesPerPage * 2 + 2)">
                                <xsl:call-template name="OverviewCandidateResultP22-1-14-Base">
                                    <xsl:with-param name="isSeats" select="$isSeats"/>
                                    <xsl:with-param name="fromLine" select="1"/>
                                    <xsl:with-param name="tillLine" select="$noOfCandidatesPerPage"/>
                                    <xsl:with-param name="candidateCount" select="count(rg:CandidateAndResult)"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:call-template name="OverviewCandidateResultP22-1-14-Base">
                                    <xsl:with-param name="isSeats" select="$isSeats"/>
                                    <xsl:with-param name="fromLine" select="1"/>
                                    <xsl:with-param name="tillLine" select="$noOfCandidatesPerPage + 1"/>
                                    <xsl:with-param name="candidateCount" select="count(rg:CandidateAndResult)"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                            <xsl:when test="$candidateCount &gt;= ($noOfCandidatesPerPage + 2) and 
$candidateCount != ($noOfCandidatesPerPage * 2 + 1) and 
$candidateCount != ($noOfCandidatesPerPage * 2 + 2)">
                                <xsl:call-template name="OverviewCandidateResultP22-1-14-Base">
                                    <xsl:with-param name="isSeats" select="$isSeats"/>
                                    <xsl:with-param name="fromLine" select="$noOfCandidatesPerPage + 1"/>
                                    <xsl:with-param name="tillLine" select="$noOfCandidatesPerPage * 2"/>
                                    <xsl:with-param name="candidateCount" select="count(rg:CandidateAndResult)"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:when test="$candidateCount = ($noOfCandidatesPerPage * 2 + 1) or 
$candidateCount = ($noOfCandidatesPerPage * 2 + 2)">
                                <xsl:call-template name="OverviewCandidateResultP22-1-14-Base">
                                    <xsl:with-param name="isSeats" select="$isSeats"/>
                                    <xsl:with-param name="fromLine" select="$noOfCandidatesPerPage + 2"/>
                                    <xsl:with-param name="tillLine" select="$noOfCandidatesPerPage * 2 + 2"/>
                                    <xsl:with-param name="candidateCount" select="count(rg:CandidateAndResult)"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:if test="count(rg:CandidateAndResult) &gt;= 2 * $noOfCandidatesPerPage + 3">
                            <xsl:call-template name="OverviewCandidateResultP22-1-14-Base">
                                <xsl:with-param name="isSeats" select="$isSeats"/>
                                <xsl:with-param name="fromLine" select="$noOfCandidatesPerPage * 2 + 1"/>
                                <xsl:with-param name="tillLine" select="80"/>
                                <xsl:with-param name="candidateCount" select="count(rg:CandidateAndResult)"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultP22-1-14-Base">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isSeats" select="1"/>
        <xsl:param name="fromLine"/>
        <xsl:param name="tillLine"/>
        <xsl:param name="candidateCount"/>
        <xsl:if test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 1]/rg:VotesInElectoralDistrict) &lt;= 4">
            <xsl:call-template name="PartyHeaderEvenOdd">
                <xsl:with-param name="isEvenOdd" select="1"/>
                <xsl:with-param name="isSeats" select="$isSeats"/>
                <xsl:with-param name="ab" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:call-template name="OverviewCandidateResult1-1-4">
                <xsl:with-param name="fromLine" select="$fromLine"/>
                <xsl:with-param name="tillLine" select="$tillLine"/>
                <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 1]/rg:VotesInElectoralDistrict) &gt; 4">
            <xsl:call-template name="PartyHeaderEvenOdd">
                <xsl:with-param name="isEvenOdd" select="1"/>
                <xsl:with-param name="isSeats" select="$isSeats"/>
                <xsl:with-param name="ab" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:call-template name="OverviewCandidateResult1-1-7">
                <xsl:with-param name="fromLine" select="$fromLine"/>
                <xsl:with-param name="tillLine" select="$tillLine"/>
                <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                <xsl:with-param name="hasSecondPage" select="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart) = 2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:if test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart) = 2">
                <xsl:call-template name="PartyHeaderEvenOdd">
                    <xsl:with-param name="isEvenOdd" select="0"/>
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="ab" select="0"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:call-template name="OverviewCandidateResult1-8-20">
                    <xsl:with-param name="fromLine" select="$fromLine"/>
                    <xsl:with-param name="tillLine" select="$tillLine"/>
                    <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultP22-1-15">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:OverviewOfCandidatesAndResults">
            <xsl:for-each select="rg:ListGroupAndResults">
                <xsl:if test="rg:Seats &gt; 0">
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="PartyHeader3Lines">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="OverviewCandidateResultElected">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="OverviewCandidateResultNewListOrder">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewDHondtTableOneSeat">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:variable name="altova:CurrContextGrid_5" select="."/>
        <xsl:variable name="altova:nTableWidthIn_4" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_4" select="$altova:nTableWidthIn_4 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_4" select="round($altova:nTableWidthTw_4 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_4" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_4" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_4">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_4 &gt; $altova:nTableWidthTw_4">
                    <xsl:value-of select="($altova:nTableWidthTw_4 - $altova:SumDefaultColumnsForWideTableTw_4) div $altova:nSumColumnWidthsTw_4"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_4" select="round(3)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_4">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_4 = 0">
                    <xsl:value-of select="round(3)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_4"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_4">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_4 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_4 div $altova:nColumnsWithDefaultWidthNotZero_4"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_4 - $altova:nSumColumnWidthsTw_4) div $altova:nColumnsWithDefaultWidthNotZero_4)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_4_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_4)"/>
        <xsl:variable name="altova:nColumnWidthTw_4_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_4)"/>
        <xsl:variable name="altova:nColumnWidthTw_4_2" select="$altova:nDefaultColumnWidthTw_4"/>
        <xsl:variable name="altova:nColumnWidthTw_4_3" select="$altova:nDefaultColumnWidthTw_4"/>
        <xsl:variable name="altova:nColumnWidthTw_4_4" select="$altova:nDefaultColumnWidthTw_4"/>
        <xsl:variable name="altova:nColumnWidthTw_4_5" select="round(0.86 * 1440 * $altova:TableWidthFactor_4)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle4">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_4)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_4"/>
            <xsl:text>\ts144\ts145\ts146\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend4">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend4">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle15">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
            <xsl:text>\clvertalt\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_3 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col2_AfterColumn + $altova:nColumnWidthTw_4_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_4 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col3_AfterColumn + $altova:nColumnWidthTw_4_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_4_5 = $altova:nDefaultColumnWidthTw_4">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl4_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col4_AfterColumn + $altova:nColumnWidthTw_4_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col5_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle4"/>
            <xsl:value-of select="$altova:RowStyle15"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs147\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs148\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>reeds toegewezen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs149\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal zetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs150\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>gemiddeld aantal stemmen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs151\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>bij toewijzing restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs152\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal restzetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend4"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle4"/>
        <xsl:value-of select="$altova:RowStyle15"/>
        <xsl:value-of select="$rowend4"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle16">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_3 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col2_AfterColumn + $altova:nColumnWidthTw_4_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_4 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col3_AfterColumn + $altova:nColumnWidthTw_4_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_4_5 = $altova:nDefaultColumnWidthTw_4">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl4_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col4_AfterColumn + $altova:nColumnWidthTw_4_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col5_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle4"/>
                <xsl:value-of select="$altova:RowStyle16"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\cs153\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\cs154\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:PriorSeats">
                <xsl:text>{\cs155\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_2 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:DHondtFraction">
                <xsl:if test="@step = 1">
                    <xsl:call-template name="ElectionFractionPart1">
                        <xsl:with-param name="smaller" select="1"/>
                        <xsl:with-param name="bold" select="false()"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_3 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:text>\ql\sl0\li100\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:DHondtFraction">
                <xsl:if test="@step = 1">
                    <xsl:call-template name="ElectionFractionPart2">
                        <xsl:with-param name="smaller" select="1"/>
                        <xsl:with-param name="bold" select="false()"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_4 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:if test="rg:NewSeats != 0">
                <xsl:for-each select="rg:NewSeats">
                    <xsl:text>{\cs156\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_4_5 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend4"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle4"/>
            <xsl:value-of select="$altova:RowStyle16"/>
            <xsl:value-of select="$rowend4"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewDHondtTable6">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:param name="offset"/>
        <xsl:variable name="altova:CurrContextGrid_6" select="."/>
        <xsl:variable name="altova:nTableWidthIn_5" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_5" select="$altova:nTableWidthIn_5 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_5" select="round($altova:nTableWidthTw_5 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_5" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_5" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_5">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_5 &gt; $altova:nTableWidthTw_5">
                    <xsl:value-of select="($altova:nTableWidthTw_5 - $altova:SumDefaultColumnsForWideTableTw_5) div $altova:nSumColumnWidthsTw_5"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_5" select="round(12)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_5">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_5 = 0">
                    <xsl:value-of select="round(12)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_5"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_5">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_5 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_5 div $altova:nColumnsWithDefaultWidthNotZero_5"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_5 - $altova:nSumColumnWidthsTw_5) div $altova:nColumnsWithDefaultWidthNotZero_5)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_5_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_2" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_3" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_4" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_5" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_6" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_7" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_8" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_9" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_10" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_11" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_12" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_13" select="$altova:nDefaultColumnWidthTw_5"/>
        <xsl:variable name="altova:nColumnWidthTw_5_14" select="round(0.86 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle5">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_5)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_5"/>
            <xsl:text>\ts157\ts158\ts159\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend5">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend5">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle17">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
            <xsl:text>\clvertalt\clmgf\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
            <xsl:text>\clvertalt\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle17"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="@article = &quot;P13&quot; or //kr:ElectionSubcategory[ text() = &quot;EK&quot; ]">
                <xsl:text>{\cs160\f1\fs22\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs161\f1\fs22\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs162\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:if test="$maxNumberOfAssignments &lt;= 6 + $offset">
            <xsl:text>{\cs163\f1\fs22\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal restzetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle5"/>
        <xsl:value-of select="$altova:RowStyle17"/>
        <xsl:value-of select="$rowend5"/>
        <xsl:variable name="altova:RowStyle18">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
            <xsl:text>\clvertalc\clmgf\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle18"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="1 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) + ($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="2 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) + ($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="3 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) + ($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="4 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) + ($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="5 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) + ($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="6 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) + ($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle5"/>
        <xsl:value-of select="$altova:RowStyle18"/>
        <xsl:value-of select="$rowend5"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle19">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle5"/>
                <xsl:value-of select="$altova:RowStyle19"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\cs164\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\cs165\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="1 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="1 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="2 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="2 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="3 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="3 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="4 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="4 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="5 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="5 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="6 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\li60\f1\fs22 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="6 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
            <xsl:if test="$maxNumberOfAssignments &lt;= 6 + $offset">
                <xsl:if test="rg:NewSeats != 0">
                    <xsl:for-each select="rg:NewSeats">
                        <xsl:text>{\cs166\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_14 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle19"/>
            <xsl:value-of select="$rowend5"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle20">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle20"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>{\cs167\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel toegekend aan</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs168\f1\fs22\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst of lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="1 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) + ($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="2 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) + ($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="3 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) + ($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="4 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) + ($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="5 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) + ($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="6 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) + ($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle5"/>
        <xsl:value-of select="$altova:RowStyle20"/>
        <xsl:value-of select="$rowend5"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="DistrictNumber">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:choose>
                        <xsl:when test="$alle = 1 and @id = &apos;alle&apos;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs169\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Totaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs170\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_Totaal"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>\par </xsl:text>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs171\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>aantal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs172\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_aantal"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>\par </xsl:text>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs173\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>stemmen</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs174\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_stemmen"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="position() = $position and @id != &apos;alle&apos;">
                            <xsl:for-each select="@id">
                                <xsl:text>{\cs175\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DistrictNumberTop">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="aantal" select="0"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:if test="$alle = 1 and @id = &apos;alle&apos;">
                        <xsl:choose>
                            <xsl:when test="$aantal = 1">
                                <xsl:text>{\cs176\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>totaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\par </xsl:text>
                                <xsl:text>{\cs177\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>aantal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs178\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>totaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DistrictNumberBottom">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="aantal" select="1"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:choose>
                        <xsl:when test="$alle = 1 and @id = &apos;alle&apos;">
                            <xsl:if test="$aantal = 1">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs179\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>aantal</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs180\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP22_DistrictNumber_aantal"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text>\par </xsl:text>
                            </xsl:if>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs181\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>stemmen</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs182\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_stemmen"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="position() = $position and @id != &apos;alle&apos;">
                            <xsl:for-each select="@id">
                                <xsl:text>{\cs183\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DistrictVoteA">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:if test="rg:CandidateAndResult[position()=1]/rg:VotesInElectoralDistrictPart[position()=$part]/rg:VotesInElectoralDistrict[position()=$position and @id!=&apos;alle&apos;]">
            <xsl:text>{\cs184\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DistrictVoteB">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:if test="rg:CandidateAndResult[position()=1]/rg:VotesInElectoralDistrictPart[position()=$part]/rg:VotesInElectoralDistrict[position()=$position and @id!=&apos;alle&apos;]">
            <xsl:text>{\cs185\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DistrictABLine">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:if test="rg:CandidateAndResult[position()=1]/rg:VotesInElectoralDistrictPart[position()=$part]/rg:VotesInElectoralDistrict[position()=$position and @id!=&apos;alle&apos;]">
            <xsl:text>{\cs186\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>_____</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ProvincesTable">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_7" select="."/>
        <xsl:variable name="altova:nTableWidthIn_6" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_6" select="$altova:nTableWidthIn_6 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_6" select="round($altova:nTableWidthTw_6 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_6" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_6" select="round(0.00 + 1.00 * $altova:nTableWidthTw_6)"/>
        <xsl:variable name="altova:TableWidthFactor_6">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_6 &gt; $altova:nTableWidthTw_6">
                    <xsl:value-of select="$altova:nTableWidthTw_6 div $altova:nSumColumnWidthsTw_6"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_6" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_6_0" select="round($altova:nTableWidthTw_6 * 0.33 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_1" select="round($altova:nTableWidthTw_6 * 0.33 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_2" select="round($altova:nTableWidthTw_6 * 0.33 * $altova:TableWidthFactor_6)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle6">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_6)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_6"/>
            <xsl:text>\ts187\ts188\ts189\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend6">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend6">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle21">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle21"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs190\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>1. Groningen</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs191\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_1"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs192\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>5. Flevoland</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs193\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_5"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs194\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>9. Zuid-Holland</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs195\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_9"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle21"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:variable name="altova:RowStyle22">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle22"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs196\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>2. Fryslân</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs197\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_2"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs198\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>6. Gelderland</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs199\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_6"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs200\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>10. Zeeland</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs201\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_10"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle22"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:variable name="altova:RowStyle23">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle23"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs202\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>3. Drenthe</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs203\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_3"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs204\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>7. Utrecht</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs205\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_7"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs206\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>11. Noord-Brabant</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs207\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_11"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle23"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:variable name="altova:RowStyle24">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle24"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs208\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>4. Overijssel</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs209\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_4"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs210\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>8. Noord-Holland</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs211\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_8"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs212\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>12. Limburg</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs213\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP22_ProvincesTable_12"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle24"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="CandidateListSubmitted">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="smaller" select="1"/>
        <xsl:for-each select="rg:SubmittedInElectoralDistrict[position() = $districtId]">
            <xsl:choose>
                <xsl:when test=". = &quot;true&quot;">
                    <xsl:choose>
                        <xsl:when test="$smaller = 1">
                            <xsl:text>{\cs214\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>*</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs215\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>*</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$smaller = 1">
                            <xsl:text>{\cs216\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>·</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs217\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>·</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateListSubmittedHeader">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="smaller" select="1"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts[position() = 1]">
            <xsl:for-each select="rg:SubmittedInElectoralDistrict[position() = $districtId]">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="@id">
                            <xsl:text>{\cs218\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="@id">
                            <xsl:text>{\cs219\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ListOrCombinedListPart2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="count(rg:ListOrCombinedList/rg:ListInCombination) &gt;0">
            <xsl:text>{\cs220\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>(</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="rg:ListInCombination">
                    <xsl:text>{\cs221\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:if test="position() != last()">
                        <xsl:text>{\cs222\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>{\cs223\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>)</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[text()= &apos;PS2&apos; or text()= &apos;TK&apos;]">
                <xsl:for-each select="rg:ListOrCombinedList">
                    <xsl:if test="@districtNumber">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs224\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(Kieskring </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs225\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP22_ListOrCombinedListPart2_Kieskring"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:for-each select="@districtNumber">
                            <xsl:text>{\cs226\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs227\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="//kr:ElectionSubcategory[text()= &apos;EK&apos;]">
                <xsl:for-each select="rg:ListOrCombinedList">
                    <xsl:if test="@provinceName">
                        <xsl:for-each select="@provinceName">
                            <xsl:text>{\cs228\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs229\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs230\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="DHondtFractionPart1">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtFraction">
            <xsl:if test="@step = $step">
                <xsl:call-template name="ElectionFractionPart1">
                    <xsl:with-param name="smaller" select="1"/>
                    <xsl:with-param name="bold" select="count (self::rg:DHondtFraction[@winner = &quot;true&quot;])"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DHondtFractionPart2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtFraction">
            <xsl:if test="@step = $step">
                <xsl:call-template name="ElectionFractionPart2">
                    <xsl:with-param name="smaller" select="1"/>
                    <xsl:with-param name="bold" select="count (self::rg:DHondtFraction[@winner = &quot;true&quot;])"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DHondtHeader">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:if test="$maxNumberOfAssignments &gt;= $step">
            <xsl:text>{\cs231\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$step"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DHondtWinners">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtAssignmentLine[rg:DHondtFraction[@step = $step and @winner=&quot;true&quot;]]">
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\cs232\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\cs233\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreakRTF">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;RTF&apos;">
            <xsl:text>\par </xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="VotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:VotesInElectoralDistrict">
            <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                <xsl:text>{\cs234\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\cs235\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="TotalVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfDistrictsVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\cs236\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\cs237\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="BlancVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfBlancVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\cs238\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\cs239\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="InvalidVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfInvalidVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\cs240\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\cs241\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ElectoralDistrictNumber">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:ElectoralDistrictName[position() = $districtId]">
            <xsl:for-each select="@id">
                <xsl:text>{\cs242\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\cs243\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ElectionName">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs244\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name including date</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs245\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>de verkiezing van de leden van </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs246\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ElectionName_verkiezingLeden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs247\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> op </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs248\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_ElectionName_op"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="kr:ElectionDate">
                <xsl:call-template name="Date">
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ElectionNameShort">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs249\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name excluding date and &apos;verkiezing van...&apos;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Salutation">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="$isBold=0">
            <xsl:if test="0=1">
                <xsl:text>{\cs250\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs251\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs252\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs253\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs254\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:if test="0=1">
                <xsl:text>{\cs255\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs256\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs257\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs258\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs259\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Address">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs260\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Street and house number &quot;Dasstraat 17&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\cs261\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\cs262\f1\fs22\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PostalCodeCity">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs263\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Postal code and city like &quot;6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xal:Locality">
            <xsl:for-each select="xal:PostalCode">
                <xsl:text>{\cs264\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:if test="count(xal:PostalCode/xal:PostalCodeNumber[text() != &quot;&quot;]) &gt; 0 and count(xal:LocalityName[text() != &quot;&quot;]) &gt; 0">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:for-each select="xal:LocalityName">
                <xsl:text>{\cs265\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyName">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs266\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs267\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs268\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs269\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs270\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs271\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\s272\sl0\f1\fs22 </xsl:text>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs273\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs274\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs275\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs276\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs277\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs278\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LastNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs279\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the last name &quot;Baron van der Zaag jr.&quot; (name components a+b+c+d).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs280\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs281\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs282\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs283\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs284\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs285\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs286\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs287\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs288\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs289\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\cs290\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\cs291\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs292\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials and first name like &quot;H.H.G. (Henk)&quot; (name components e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs293\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs294\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs295\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs296\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs297\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs298\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs299\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs300\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs301\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs302\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs303\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs304\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs305\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs306\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs307\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs308\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs309\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs310\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs311\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs312\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\cs313\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\cs314\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs315\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs316\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Gender">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs317\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g), if @PublishGender = &quot;true&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs318\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs319\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs320\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs321\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs322\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs323\f1\fs22 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs324\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs325\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs326\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs327\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs328\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs329\f1\fs22\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs330\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs331\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs332\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs333\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs334\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs335\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs336\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs337\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs338\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs339\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs340\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs341\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs342\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs343\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs344\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs345\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs346\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs347\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs348\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs349\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs350\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs351\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\cs352\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\cs353\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="CompleteAddress">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs354\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Complete adress like &quot;Dasstraat 17, 6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs355\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs356\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs357\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs358\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs359\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs360\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs361\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs362\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs363\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs364\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs365\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs366\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs367\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs368\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs369\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\cs370\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs371\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\cs372\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\cs373\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs374\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="NameBCEF">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs375\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the name &quot;van der Zaag, H.H.G. (Henk)&quot; (name components b+c+e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="LastNameH1">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:text>{\cs376\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>, </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:call-template name="FirstNameH1">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Kieskring">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="./eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;]  or ../eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;] or ../eml:Election/eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;]">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs377\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> in kieskring </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs378\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_Kieskring_inKieskring"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="eml:ContestIdentifier/@Id != &quot;alle&quot;">
                    <xsl:call-template name="ContestIdentifier">
                        <xsl:with-param name="isBold" select="1"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="rg:RG210">
                        <xsl:call-template name="ContestIdentifier">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>
    <xsl:template name="City">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs379\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>City (without postal code) &quot;DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs380\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs381\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs382\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\cs383\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FootnoteSign">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="kr:ElectionSubcategory">
                <xsl:if test=".=&quot;TK&quot; or .=&quot;EK&quot; or .=&quot;PS2&quot;">
                    <xsl:text>{\cs384\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> *)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="FootnoteKieskring">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="kr:ElectionSubcategory">
                <xsl:if test=".=&quot;TK&quot; or .=&quot;EK&quot; or .=&quot;PS2&quot;">
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\s0\f0\fs24\sl0\fs22\s385\s386\sl0\f1\fs22 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs387\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Voetnoten:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs388\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_FootnoteKieskring_voetnoten"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\par\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_8" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_7" select="$altova:nMaxWidthIn * 0.90000"/>
                    <xsl:variable name="altova:nTableWidthTw_7" select="$altova:nTableWidthIn_7 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_7" select="round($altova:nTableWidthTw_7 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_7" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_7" select="round(0.00 + 1.03 * $altova:nTableWidthTw_7)"/>
                    <xsl:variable name="altova:TableWidthFactor_7">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_7 &gt; $altova:nTableWidthTw_7">
                                <xsl:value-of select="$altova:nTableWidthTw_7 div $altova:nSumColumnWidthsTw_7"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_7" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_7_0" select="round($altova:nTableWidthTw_7 * 0.03 * $altova:TableWidthFactor_7)"/>
                    <xsl:variable name="altova:nColumnWidthTw_7_1" select="round($altova:nTableWidthTw_7 * 1.00 * $altova:TableWidthFactor_7)"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle7">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_7)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\ts389\ts390\ts391\trpaddt0\trpaddl0\trpaddb0\trpaddr0\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend7">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend7">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle25">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle7"/>
                        <xsl:value-of select="$altova:RowStyle25"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                    <xsl:text>{\cs392\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs393\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Alleen in te vullen, indien het een verkiezing betreft van de leden van de Tweede Kamer of van provinciale staten van een provincie die uit meer dan één kieskring bestaat. Achter “kieskring” het nummer van de kieskring en tussen haakjes de naam van de gemeente waar het hoofdstembureau is gevestigd vermelden.</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs394\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_FootnoteKieskring_alleenInTeVullen"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle7"/>
                    <xsl:value-of select="$altova:RowStyle25"/>
                    <xsl:value-of select="$rowend7"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Date">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs395\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs396\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs397\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs398\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs399\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs400\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs401\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs402\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs403\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs404\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs405\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs406\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs407\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs408\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs409\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs410\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs411\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs412\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs413\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs414\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs415\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs416\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs417\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs418\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs419\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs420\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs421\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs422\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs423\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs424\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs425\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs426\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs427\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs428\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs429\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs430\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs431\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs432\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs433\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs434\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs435\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs436\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs437\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs438\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs439\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs440\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs441\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs442\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs443\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs444\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs445\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs446\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs447\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs448\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs449\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs450\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs451\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs452\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs453\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs454\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs455\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs456\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs457\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs458\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs459\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs460\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs461\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs462\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs463\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs464\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs465\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs466\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs467\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs468\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs469\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs470\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs471\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs472\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs473\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs474\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs475\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs476\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs477\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs478\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs479\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs480\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs481\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\cs482\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\cs483\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs484\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs485\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs486\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs487\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs488\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs489\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs490\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs491\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs492\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs493\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs494\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs495\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs496\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs497\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs498\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs499\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs500\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs501\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs502\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs503\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs504\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs505\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs506\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs507\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs508\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\cs509\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs510\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DateOfBirth">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="eml:DateOfBirth">
                <xsl:for-each select="eml:DateOfBirth">
                    <xsl:call-template name="Date">
                        <xsl:with-param name="isBold" select="$isBold"/>
                        <xsl:with-param name="fontSize" select="$fontSize"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="$fontSize = &apos;normal&apos;">
                    <xsl:if test="$isBold=0">
                        <xsl:for-each select="kr:DateOfBirthAnnex">
                            <xsl:text>{\cs511\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>XX </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:choose>
                                <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                    <xsl:text>{\cs512\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>januari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                    <xsl:text>{\cs513\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>februari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                    <xsl:text>{\cs514\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>maart</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                    <xsl:text>{\cs515\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>april</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                    <xsl:text>{\cs516\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>mei</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                    <xsl:text>{\cs517\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juni</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                    <xsl:text>{\cs518\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juli</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                    <xsl:text>{\cs519\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>augustus</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                    <xsl:text>{\cs520\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>september</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                    <xsl:text>{\cs521\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>oktober</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                    <xsl:text>{\cs522\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>november</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                    <xsl:text>{\cs523\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>december</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                    <xsl:text>{\cs524\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>XXX</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                            </xsl:choose>
                            <xsl:text>{\cs525\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs526\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="substring(text(),7, 4)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$isBold = 1">
                    <xsl:for-each select="kr:DateOfBirthAnnex">
                        <xsl:text>{\cs527\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>XX </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:choose>
                            <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                <xsl:text>{\cs528\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                <xsl:text>{\cs529\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                <xsl:text>{\cs530\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                <xsl:text>{\cs531\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                <xsl:text>{\cs532\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                <xsl:text>{\cs533\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                <xsl:text>{\cs534\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                <xsl:text>{\cs535\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                <xsl:text>{\cs536\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                <xsl:text>{\cs537\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                <xsl:text>{\cs538\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                <xsl:text>{\cs539\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                <xsl:text>{\cs540\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>XXX</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:text>{\cs541\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cs542\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="substring(text(),7, 4)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="GenerateDate">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\cs543\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$generateDate"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="HashCode">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\cs544\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$hashCode"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="FooterWithoutHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$isDraft=&quot;true&quot;">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs545\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(Concept) </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs546\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_FooterWithoutHashcode_concept"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs547\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs548\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="GenerateDate">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Checkbox">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="text()=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs549\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>■</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs550\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Checkbox_iconChecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\cs551\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>  </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs552\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs553\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Checkbox_iconUnchecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\cs554\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>  </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="FooterWithHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$isDraft=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs555\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(Concept) | </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs556\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_concept"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs557\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Hashcode: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs558\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_hashcode"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="HashCode">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\cs559\f1\fs16 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> | </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionNameP2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs560\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name without date</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs561\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>verkiezing van de leden van </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs562\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ElectionNameP2_verkiezingLeden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="CombinedListNumbers">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs563\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;list number&gt;&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:if test="position() != 1">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs564\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs565\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedList_en"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\cs566\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListNames">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs567\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;list name&gt;&quot; or for blanko lists &quot;blanco lijst met als eerste kandidaat &lt;last name of first candidate&gt;&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par\par</xsl:text>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s7\f1\fs24\s568\sl0\f1\fs22 </xsl:text>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:if test="position() != 1">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs569\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs570\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedList_en"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:call-template name="CombinedListListName">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\cs571\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
        <xsl:text>\s0\f0\fs24\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="CombinedListI17">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:choose>
                <xsl:when test="position() = 1">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs572\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>- Lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs573\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_CombinedListI17_lijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\cs574\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> en lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\cs575\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_CombinedListI17_enLijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\cs576\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>: </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="CombinedListListName">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PostalCode">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs577\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Postal code and city like &quot;6361 DV&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:PostalCode">
                    <xsl:text>{\cs578\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:PostalCode">
                    <xsl:text>{\cs579\f1\fs22\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PartyName2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs580\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>If no name is registered, display &quot;blanco lijst met als eerste kandidaat...&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\s581\sl0\f1\fs22 </xsl:text>
                <xsl:choose>
                    <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                        <xsl:for-each select="eml:AffiliationIdentifier">
                            <xsl:for-each select="eml:RegisteredName">
                                <xsl:text>{\cs582\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs583\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>blanco lijst met als eerste kandidaat</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs584\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_PartyName2_blancoLijst"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>{\cs585\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:if test="position() = 1">
                                <xsl:for-each select="eml:CandidateFullName">
                                    <xsl:call-template name="LastNameH1">
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:call-template>
                                    <xsl:text>{\cs586\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:call-template name="FirstNameH1">
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <xsl:call-template name="Gender">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:choose>
                    <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                        <xsl:for-each select="eml:AffiliationIdentifier">
                            <xsl:for-each select="eml:RegisteredName">
                                <xsl:text>{\cs587\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs588\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>blanco lijst met als eerste kandidaat</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs589\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_PartyName2_blancoLijst"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>{\cs590\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:if test="position() = 1">
                                <xsl:for-each select="eml:CandidateFullName">
                                    <xsl:call-template name="LastNameH1">
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:call-template>
                                    <xsl:text>{\cs591\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:call-template name="FirstNameH1">
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:call-template>
                                </xsl:for-each>
                                <xsl:call-template name="Gender">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="PartyNameInOmissions">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs592\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>If no name is registered, display &quot;blanco lijst met als eerste kandidaat...&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs593\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs594\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs595\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameInOmissions_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="FirstCandidateName">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:call-template name="KieskringParty">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\s596\sl0\f1\fs22 </xsl:text>
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs597\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs598\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs599\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameInOmissions_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="FirstCandidateName">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:call-template name="KieskringParty">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFraction">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:for-each select="rg:Fraction">
            <xsl:text>{\cs600\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                <xsl:text>{\cs601\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs602\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\cs603\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>/</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="@denominator">
                    <xsl:text>{\cs604\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Gender2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="isSmaller" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs605\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isSmaller=0">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs606\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs607\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs608\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs609\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs610\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs611\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs612\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs613\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs614\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs615\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs616\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs617\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$isSmaller=1">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs618\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs619\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs620\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs621\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs622\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs623\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs624\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs625\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs626\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs627\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs628\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs629\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstCandidateName">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:FirstCandidateName">
            <xsl:call-template name="LastNameH1">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\cs630\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>, </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="FirstNameH1">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:call-template name="Gender2">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyNameOrFirstCandidate">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs631\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>If no name is registered, display the &quot;blanco lijst met als eerste kandidaat&quot; + first candidates name</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text()!=&quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs632\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs633\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs634\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameOrFirstCandidate_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:for-each select="rg:FirstCandidateName">
                                <xsl:call-template name="LastNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                                <xsl:text>{\cs635\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>,</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="Initials">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\s636\sl0\f1\fs22 </xsl:text>
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text()!=&quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\cs637\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs638\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs639\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameOrFirstCandidate_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:for-each select="rg:FirstCandidateName">
                                <xsl:call-template name="LastNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                                <xsl:text>{\cs640\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>,</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="Initials">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="SignatureBlock">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="distance" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_9" select="."/>
        <xsl:variable name="altova:nTableWidthIn_8" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_8" select="$altova:nTableWidthIn_8 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_8" select="round($altova:nTableWidthTw_8 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_8" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_8" select="round(2800.50)"/>
        <xsl:variable name="altova:TableWidthFactor_8">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_8 &gt; $altova:nTableWidthTw_8">
                    <xsl:value-of select="($altova:nTableWidthTw_8 - $altova:SumDefaultColumnsForWideTableTw_8) div $altova:nSumColumnWidthsTw_8"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_8" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_8">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_8 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_8"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_8">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_8 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_8 div $altova:nColumnsWithDefaultWidthNotZero_8"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_8 - $altova:nSumColumnWidthsTw_8) div $altova:nColumnsWithDefaultWidthNotZero_8)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_8_0" select="round(1.94 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_1" select="$altova:nDefaultColumnWidthTw_8"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle8">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_8)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_8"/>
            <xsl:text>\ts641\ts642\ts643\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend8">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend8">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle26">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle26"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs644\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Plaats: ........................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs645\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_plaats"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs646\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: .......................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs647\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs648\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................, Voorzitter</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs649\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_voorzitter"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs650\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs651\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs652\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs653\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs654\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>...................................................................... Leden</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs655\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_leden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs656\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs657\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs658\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs659\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs660\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs661\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle8"/>
        <xsl:value-of select="$altova:RowStyle26"/>
        <xsl:value-of select="$rowend8"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="SignatureBlock-3">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_10" select="."/>
        <xsl:variable name="altova:nTableWidthIn_9" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_9" select="$altova:nTableWidthIn_9 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_9" select="round($altova:nTableWidthTw_9 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_9" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_9" select="round(2800.50)"/>
        <xsl:variable name="altova:TableWidthFactor_9">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_9 &gt; $altova:nTableWidthTw_9">
                    <xsl:value-of select="($altova:nTableWidthTw_9 - $altova:SumDefaultColumnsForWideTableTw_9) div $altova:nSumColumnWidthsTw_9"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_9" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_9">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_9 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_9"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_9">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_9 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_9 div $altova:nColumnsWithDefaultWidthNotZero_9"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_9 - $altova:nSumColumnWidthsTw_9) div $altova:nColumnsWithDefaultWidthNotZero_9)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_9_0" select="round(1.94 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_1" select="$altova:nDefaultColumnWidthTw_9"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle9">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_9)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_9"/>
            <xsl:text>\ts662\ts663\ts664\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend9">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend9">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle27">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle27"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs665\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Plaats: ........................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs666\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_plaats"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs667\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: .......................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs668\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs669\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>............................................., Voorzitter</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs670\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_voorzitter"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs671\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.............................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs672\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs673\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>............................................. Leden</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs674\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_leden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs675\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.............................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs676\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle9"/>
        <xsl:value-of select="$altova:RowStyle27"/>
        <xsl:value-of select="$rowend9"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="ElectionNameSimple">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs677\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Just election name</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory">
                <xsl:choose>
                    <xsl:when test=".=&quot;EP&quot; or .=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs678\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>het </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs679\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_het"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs680\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs681\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_de"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs682\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs683\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs684\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs685\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs686\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten van</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs687\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs688\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs689\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs690\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs691\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs692\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs693\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs694\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs695\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs696\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs697\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs698\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs699\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs700\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs701\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs702\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs703\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs704\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs705\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs706\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs707\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs708\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs709\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs710\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs711\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs712\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs713\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test=".=&quot;PS&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs714\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs715\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;GR&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs716\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs717\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;ER&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs718\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van het openbaar lichaam</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs719\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_eilandsraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs720\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van stadsdeel</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs721\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_stadsdeel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters1">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs722\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Door de in de zittingsruimte aanwezige kiezers zijn</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs723\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1_aanwezigeKiezers"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="LineBreakTable">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ObjectionsByVoters1b">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:ObjectionsByVoters">
            <xsl:for-each select="rg:NotesOnObjections">
                <xsl:choose>
                    <xsl:when test="../rg:NotesOnObjections[text() != &quot;&quot;]">
                        <xsl:choose>
                            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\fs22\s724\s725\sl0\f1\fs22 </xsl:text>
                                <xsl:text>{\cs726\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\fs22\s727\s728\sl0\f1\fs22 </xsl:text>
                                <xsl:text>{\cs729\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs730\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs731\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs732\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs733\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs734\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs735\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs736\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs737\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs738\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs739\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters2a">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>\par </xsl:text>
        <xsl:for-each select="rg:ObjectionsByVoters">
            <xsl:for-each select="rg:Objections">
                <xsl:choose>
                    <xsl:when test="../rg:Objections[text() != &quot;&quot;]">
                        <xsl:choose>
                            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\fs22\s740\s741\sl0\f1\fs22 </xsl:text>
                                <xsl:text>{\cs742\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\fs22\s743\s744\sl0\f1\fs22 </xsl:text>
                                <xsl:text>{\cs745\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs746\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs747\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs748\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs749\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs750\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs751\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs752\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs753\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\cs754\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\cs755\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\fs22\s756\s757\sl0\f1\fs22 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LineBreakPdf">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>\par </xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="SmallLineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\fs22\s758\s759\sl0\f1\fs22 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LineBreakTable">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\fs22\s760\s761\sl0\f1\fs22 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="KieskringParty">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs762\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Additional information about the distrinct for which a centrally submitted list is nominated</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="eml:ContestIdentifier/@Id = &quot;alle&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs763\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in alle kieskringen</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs764\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inAlleKieskringen"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="eml:ContestIdentifier">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs765\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in kieskring</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs766\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inKieskring"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\cs767\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="ContestIdentifier">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionDomain">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs768\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election domain as part of the elction name - if needed</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs769\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs770\f1\fs22 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs771\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs772\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs773\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs774\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs775\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs776\f1\fs22\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs777\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs778\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs779\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs780\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;medium&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\cs781\f1\fs26\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs782\f1\fs26\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\cs783\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs784\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs785\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs786\f1\fs26\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ContestIdentifier">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs787\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs788\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs789\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs790\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs791\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs792\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs793\f1\fs22\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs794\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;medium&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs795\f1\fs26 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs796\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\cs797\f1\fs26 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\cs798\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters1b">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_11" select="."/>
        <xsl:variable name="altova:nTableWidthIn_10" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_10" select="$altova:nTableWidthIn_10 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_10" select="round($altova:nTableWidthTw_10 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_10" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_10" select="round(600.50)"/>
        <xsl:variable name="altova:TableWidthFactor_10">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_10 &gt; $altova:nTableWidthTw_10">
                    <xsl:value-of select="($altova:nTableWidthTw_10 - $altova:SumDefaultColumnsForWideTableTw_10) div $altova:nSumColumnWidthsTw_10"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_10" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_10">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_10 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_10"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_10">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_10 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_10 div $altova:nColumnsWithDefaultWidthNotZero_10"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_10 - $altova:nSumColumnWidthsTw_10) div $altova:nColumnsWithDefaultWidthNotZero_10)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_10_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_1" select="$altova:nDefaultColumnWidthTw_10"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle10">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_10)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_10"/>
            <xsl:text>\ts799\ts800\ts801\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend10">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend10">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle28">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle28"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs802\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ geen bezwaren ingebracht.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs803\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1b_geenBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle10"/>
        <xsl:value-of select="$altova:RowStyle28"/>
        <xsl:value-of select="$rowend10"/>
        <xsl:variable name="altova:RowStyle29">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle29"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="string(rg:ObjectionsByVoters/rg:Objections) != &quot;&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs804\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>■</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs805\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ObjectionsByVoters1b_iconChecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs806\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs807\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ObjectionsByVoters1b_iconUnchecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs808\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> de volgende bezwaren ingebracht:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs809\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1b_volgendeBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle10"/>
        <xsl:value-of select="$altova:RowStyle29"/>
        <xsl:value-of select="$rowend10"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
        <xsl:call-template name="ObjectionsByVoters2a">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Space">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="$fontSize=&quot;normal&quot;">
                <xsl:text>{\cs810\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&quot;smaller&quot;">
                <xsl:text>{\cs811\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&apos;x-small&apos;">
                <xsl:text>{\cs812\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs813\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFractionPart1">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:param name="bold" select="0"/>
        <xsl:choose>
            <xsl:when test="$bold = 0">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\cs814\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\cs815\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\cs816\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\cs817\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFractionPart2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:param name="bold" select="0"/>
        <xsl:choose>
            <xsl:when test="$bold = 0">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\cs818\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs819\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\cs820\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\cs821\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs822\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\cs823\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\cs824\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs825\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\cs826\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\cs827\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs828\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\cs829\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="CombinedList2">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs830\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;RegistererdName&gt; (lijst &lt;@Id&gt;)&quot; or for blanko lists &quot;blanco lijst met als eerste kandidaat &lt;last name of first candidate&gt; (lijst &lt;@Id&gt;)&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:if test="position() != 1">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs831\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs832\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedList2_en"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:call-template name="CombinedListListName">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs833\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (lijst </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs834\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CombinedList2_lijst"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\cs835\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>) </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListListNumber">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:AffiliationIdentifier">
            <xsl:choose>
                <xsl:when test="@Id != 0 and @Id != &quot;&quot;">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs836\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs837\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>   </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListListName">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="eml:RegisteredName">
                        <xsl:text>{\cs838\f1\fs22 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs839\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs840\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedListListName_blancoLijst"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:for-each select="rg:FirstCandidateName">
                    <xsl:call-template name="LastNameH1">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Initials">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs841\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials like &quot; H.H.G.&quot; (name components f) with preceding blank.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xnl:PersonName">
            <xsl:for-each select="xnl:NameLine">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\cs842\f1\fs22 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Line">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\cs843\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>________</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\cs844\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_________________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="FooterLine">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\cs845\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>______</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\cs846\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>__________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="LegacyFooter">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isHashcode" select="1"/>
        <xsl:param name="isPagenumber" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_12" select="."/>
        <xsl:variable name="altova:nTableWidthIn_11" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_11" select="$altova:nTableWidthIn_11 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_11" select="round($altova:nTableWidthTw_11 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_11" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_11" select="round(0.00 + 1.00 * $altova:nTableWidthTw_11)"/>
        <xsl:variable name="altova:TableWidthFactor_11">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_11 &gt; $altova:nTableWidthTw_11">
                    <xsl:value-of select="$altova:nTableWidthTw_11 div $altova:nSumColumnWidthsTw_11"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_11" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_11_0" select="round($altova:nTableWidthTw_11 * 0.83 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_1" select="round($altova:nTableWidthTw_11 * 0.17 * $altova:TableWidthFactor_11)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle11">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_11)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_11"/>
            <xsl:text>\ts847\ts848\ts849\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend11">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend11">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle30">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle30"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle11"/>
        <xsl:value-of select="$altova:RowStyle30"/>
        <xsl:value-of select="$rowend11"/>
        <xsl:variable name="altova:RowStyle31">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle31"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:call-template name="FooterLine">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_0 div 1440) + ($altova:nColumnWidthTw_11_1 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle11"/>
        <xsl:value-of select="$altova:RowStyle31"/>
        <xsl:value-of select="$rowend11"/>
        <xsl:variable name="altova:RowStyle32">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle32"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isHashcode=1">
            <xsl:call-template name="FooterWithHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="$isHashcode=0">
            <xsl:call-template name="FooterWithoutHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isPagenumber=1">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs850\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>pagina </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs851\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\cs852</xsl:text>
            <xsl:text>\chpgn</xsl:text>
            <xsl:text>{\cs853\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> / </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\field{\*\fldinst{\cs854\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend11"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle11"/>
        <xsl:value-of select="$altova:RowStyle32"/>
        <xsl:value-of select="$rowend11"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="Gender3">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs855\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot;hij&quot; or &quot;zij&quot;, if @PublishGender = &quot;true&quot;, otherwise as &quot;hij/zij&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="../kr:ListData/@PublishGender=&quot;true&quot;">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs856\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>hij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs857\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_hij"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs858\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs859\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_zij"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs860\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs861\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs862\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>hij/zij</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs863\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Gender3_hijZij"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Gender4">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs864\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot;hij&quot; or &quot;zij&quot;, if @PublishGender = &quot;true&quot;, otherwise as &quot;hij/zij&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="../kr:ListData/@PublishGender=&quot;true&quot;">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs865\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs866\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_him"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs867\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs868\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_har"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\cs869\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs870\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs871\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>zich</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs872\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Gender4_himHar"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Contests">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="separator" select="&apos;comma&apos;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:for-each select="kr:ListData">
                <xsl:for-each select="kr:Contests">
                    <xsl:for-each select="kr:Contest">
                        <xsl:if test="$separator=&apos;newline&apos; and position()=1">
                            <xsl:text>\par </xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\cs873\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs874\f1\fs22\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\cs875\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs876\f1\fs22\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="$isBold = 0">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\cs877\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\cs878\f1\fs22 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\cs879\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\cs880\f1\fs22 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsReference">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="authority" select="&apos;hoofstembureau&apos;"/>
        <xsl:param name="skipFirstSentence" select="0"/>
        <xsl:if test="$skipFirstSentence = 0">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs881\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Door de in de zittingsruimte aanwezige kiezers zijn</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs882\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_ObjectionsReference_aanwezigeKiezers"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:variable name="altova:CurrContextGrid_13" select="."/>
        <xsl:variable name="altova:nTableWidthIn_12" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_12" select="$altova:nTableWidthIn_12 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_12" select="round($altova:nTableWidthTw_12 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_12" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_12" select="round(901.00)"/>
        <xsl:variable name="altova:TableWidthFactor_12">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_12 &gt; $altova:nTableWidthTw_12">
                    <xsl:value-of select="($altova:nTableWidthTw_12 - $altova:SumDefaultColumnsForWideTableTw_12) div $altova:nSumColumnWidthsTw_12"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_12" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_12">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_12 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_12"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_12">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_12 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_12 div $altova:nColumnsWithDefaultWidthNotZero_12"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_12 - $altova:nSumColumnWidthsTw_12) div $altova:nColumnsWithDefaultWidthNotZero_12)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_12_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_12)"/>
        <xsl:variable name="altova:nColumnWidthTw_12_1" select="round(0.21 * 1440 * $altova:TableWidthFactor_12)"/>
        <xsl:variable name="altova:nColumnWidthTw_12_2" select="$altova:nDefaultColumnWidthTw_12"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle12">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_12)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_12"/>
            <xsl:text>\ts883\ts884\ts885\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend12">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend12">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle33">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12" select="$altova:nTableIndentTw_12"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_0 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl12 + $altova:nColumnWidthTw_12_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_1 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col0_AfterColumn + $altova:nColumnWidthTw_12_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_2 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col1_AfterColumn + $altova:nColumnWidthTw_12_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle12"/>
            <xsl:value-of select="$altova:RowStyle33"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs886\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs887\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs888\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>geen bezwaren ingebracht.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs889\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_geenBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle12"/>
        <xsl:value-of select="$altova:RowStyle33"/>
        <xsl:value-of select="$rowend12"/>
        <xsl:variable name="altova:RowStyle34">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12" select="$altova:nTableIndentTw_12"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_0 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl12 + $altova:nColumnWidthTw_12_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_1 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col0_AfterColumn + $altova:nColumnWidthTw_12_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_12_2 = $altova:nDefaultColumnWidthTw_12">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl12_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col1_AfterColumn + $altova:nColumnWidthTw_12_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle12"/>
            <xsl:value-of select="$altova:RowStyle34"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs890\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs891\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs892\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>de volgende bezwaren ingebracht (zie gewaarmerkte bijlage voor bezwaren en opmerkingen daarover van het </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs893\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_volgendeBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>{\cs894\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$authority"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cs895\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>).</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend12"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle12"/>
        <xsl:value-of select="$altova:RowStyle34"/>
        <xsl:value-of select="$rowend12"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="LivingAddress">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\cs896\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>City and Country code (if present) &quot;Amsterdam&quot; or &quot;Berlin (DE)&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="kr:LivingAddress">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="kr:LocalityName">
                    <xsl:text>{\cs897\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="kr:CountryNameCode">
                    <xsl:text>{\cs898\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cs899\f1\fs22 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cs900\f1\fs22 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="kr:LocalityName">
                    <xsl:text>{\cs901\f1\fs22\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="kr:CountryNameCode">
                    <xsl:text>{\cs902\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cs903\f1\fs22\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cs904\f1\fs22\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CompleteContactAddress">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:Contact">
            <xsl:for-each select="eml:MailingAddress">
                <xsl:call-template name="CompleteAddress">
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:Country">
                    <xsl:call-template name="CompleteAddress">
                        <xsl:with-param name="fontSize" select="$fontSize"/>
                        <xsl:with-param name="isBold" select="$isBold"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:for-each select="xal:CountryNameCode">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:if test="$fontSize = &apos;normal&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\cs905\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs906\f1\fs22 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs907\f1\fs22 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\cs908\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs909\f1\fs22\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs910\f1\fs22\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                        <xsl:if test="$fontSize = &apos;x-small&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\cs911\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs912\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs913\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\cs914\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs915\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\cs916\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="QualifyingAddressCity">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:QualifyingAddress">
            <xsl:call-template name="City">
                <xsl:with-param name="isBold" select="$isBold"/>
                <xsl:with-param name="fontSize" select="$fontSize"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="xal:Country">
                <xsl:call-template name="City">
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:CountryNameCode">
                    <xsl:call-template name="Space">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:if test="$fontSize = &apos;normal&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs917\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs918\f1\fs22 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs919\f1\fs22 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs920\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs921\f1\fs22\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs922\f1\fs22\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;smaller&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs923\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs924\f1\fs20 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs925\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs926\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs927\f1\fs20\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs928\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;x-small&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\cs929\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs930\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs931\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\cs932\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs933\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs934\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ChapterElection">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isH3" select="0"/>
        <xsl:text>{\cs935\f1\fs22\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>1. </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs936\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Verkiezing</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs937\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterElection_Verkiezing"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isH3 = 0">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs938\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs939\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterElection_HetGaatOmVerkiezing"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs940\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de kandidatenlijst voor de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs941\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterElection_HetGaatOmKandidatenlijst"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:call-template name="ElectionNameShort">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="ChapterDistrictsOptions">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="eml:ContestIdentifier[@Id != &quot;alle&quot;]">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs942\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>uitsluitend voor de volgende kieskring(en): </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs943\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_uitsluitend"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count(eml:Affiliation/kr:ListData/kr:Contests/kr:Contest) &gt; 0">
                        <xsl:call-template name="Contests">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="eml:ContestIdentifier">
                            <xsl:for-each select="eml:ContestName">
                                <xsl:text>{\cs944\f1\fs22\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs945\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>voor </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs946\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_voor"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs947\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>alle kieskringen</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs948\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_alleKieskringen"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs949\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> waarvoor de kandidatenlijst wordt ingeleverd.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs950\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_waarvoorIngeleverd"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="ChapterDistrictsTitle">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\cs951\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Kieskringen</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs952\f1\fs22\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterDistrictTitle_Kieskringen"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>{\cs953\f1\fs22\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="$lang = 0">
                <xsl:text>{\cs954\f1\fs22\i </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>(alleen invullen bij de verkiezing van de Tweede Kamer, Eerste Kamer, of de provinciale staten van een provincie met meer dan één kieskring)</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs955\f1\fs22\i </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterDistrictTitle_alleenInvullen"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ChapterPartyName">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isH3" select="0"/>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\cs956\f1\fs22\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>3. </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="//eml:ElectionCategory[.!=&quot;BC&quot;]">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs957\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding van de politieke groepering</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs958\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingVan"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\cs959\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding van de (politieke) groepering</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs960\f1\fs22\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingVan_BC"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isH3 = 1">
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\cs961\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>De geregistreerde aanduiding van de politieke groepering: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs962\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_geregistreerdeAanduiding"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$isH3 = 2">
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\cs963\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>De samengevoegde aanduiding van de politieke groeperingen: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs964\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_samengevoegdeAanduiding"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\cs965\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding boven de kandidatenlijst: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\cs966\f1\fs22 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingBoven"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:for-each select="eml:Affiliation">
            <xsl:call-template name="PartyName">
                <xsl:with-param name="isBold" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="CandidatesOnListTable">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="showDateOfBirth" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:variable name="altova:CurrContextGrid_14" select="."/>
            <xsl:variable name="altova:nTableWidthIn_13" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_13" select="$altova:nTableWidthIn_13 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_13" select="round($altova:nTableWidthTw_13 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_13" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_13" select="round(8722.50)"/>
            <xsl:variable name="altova:TableWidthFactor_13">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_13 &gt; $altova:nTableWidthTw_13">
                        <xsl:value-of select="$altova:nTableWidthTw_13 div $altova:nSumColumnWidthsTw_13"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_13" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_13_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_1" select="round(1.81 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_2" select="round(1.25 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_3" select="round(1.06 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_4" select="round(1.67 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle13">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_13"/>
                <xsl:text>\ts967\ts968\ts969\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend13">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend13">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle35">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_2 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col1_AfterColumn + $altova:nColumnWidthTw_13_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_3 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col2_AfterColumn + $altova:nColumnWidthTw_13_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_4 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col3_AfterColumn + $altova:nColumnWidthTw_13_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle13"/>
                <xsl:value-of select="$altova:RowStyle35"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs970\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>naam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs971\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-naam"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs972\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>voorletters</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs973\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-voorletters"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs974\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>geboortedatum</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs975\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-geboortedatum"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\par </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\cs976\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>woonplaats</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cs977\f1\fs22\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-woonplaats"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle13"/>
            <xsl:value-of select="$altova:RowStyle35"/>
            <xsl:value-of select="$rowend13"/>
            <xsl:for-each select="eml:Candidate">
                <xsl:variable name="altova:RowStyle36">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_2 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col1_AfterColumn + $altova:nColumnWidthTw_13_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_3 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col2_AfterColumn + $altova:nColumnWidthTw_13_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_4 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col3_AfterColumn + $altova:nColumnWidthTw_13_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col4_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle13"/>
                    <xsl:value-of select="$altova:RowStyle36"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:CandidateIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\cs978\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                <xsl:for-each select="eml:CandidateFullName">
                    <xsl:call-template name="LastNameH1">
                        <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:CandidateFullName">
                    <xsl:call-template name="FirstNameH1">
                        <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_2 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:call-template name="Gender">
                    <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_2 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                <xsl:choose>
                    <xsl:when test="eml:DateOfBirth">
                        <xsl:for-each select="eml:DateOfBirth">
                            <xsl:call-template name="Date">
                                <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_3 div 1440) - 0.02083 - 0.02083"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="kr:DateOfBirthAnnex">
                            <xsl:text>{\cs979\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>XX </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:choose>
                                <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                    <xsl:text>{\cs980\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>januari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                    <xsl:text>{\cs981\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>februari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                    <xsl:text>{\cs982\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>maart</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                    <xsl:text>{\cs983\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>april</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                    <xsl:text>{\cs984\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>mei</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                    <xsl:text>{\cs985\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juni</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                    <xsl:text>{\cs986\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juli</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                    <xsl:text>{\cs987\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>augustus</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                    <xsl:text>{\cs988\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>september</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                    <xsl:text>{\cs989\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>oktober</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                    <xsl:text>{\cs990\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>november</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                    <xsl:text>{\cs991\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>december</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                    <xsl:text>{\cs992\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>XXX</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                            </xsl:choose>
                            <xsl:text>{\cs993\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\cs994\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="substring(text(),7, 4)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                <xsl:call-template name="QualifyingAddressCity">
                    <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_4 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle13"/>
                <xsl:value-of select="$altova:RowStyle36"/>
                <xsl:value-of select="$rowend13"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Filter0">
        <xsl:param name="altova:nMaxWidthIn" select="7.06944"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:choose>
            <xsl:when test="text() = &quot;0&quot;">
                <xsl:text>{\cs995\f1\fs22 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>________________</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$isBold = 1">
                <xsl:text>{\cs996\f1\fs22\b </xsl:text>
                <xsl:choose>
                    <xsl:when test="self::*">
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="string(.)"/>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cs997\f1\fs22 </xsl:text>
                <xsl:choose>
                    <xsl:when test="self::*">
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="string(.)"/>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterRight">
        <xsl:variable name="altova:nMaxWidthIn" select="7.07"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="isHashcode" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterLeft">
        <xsl:variable name="altova:nMaxWidthIn" select="7.07"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="isHashcode" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="EmptyHeader"/>
    <xsl:template name="write-text">
        <xsl:param name="text"/>
        <xsl:param name="bEscape" select="true()"/>
        <xsl:choose>
            <xsl:when test="$bEscape">
                <xsl:variable name="sLinefeed" select="'&#x0A;'"/>
                <xsl:choose>
                    <xsl:when test="contains($text, $sLinefeed)">
                        <xsl:variable name="first-line" select="substring-before($text, $sLinefeed)"/>
                        <xsl:variable name="rest" select="substring-after($text, $sLinefeed)"/>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$first-line"/>
                        </xsl:call-template>
                        <xsl:text>\u13?</xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text" select="$rest"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$text"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($text)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-line">
        <xsl:param name="text"/>
        <xsl:variable name="text-length" select="string-length($text)"/>
        <xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
        <xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
        <xsl:choose>
            <xsl:when test="$text-after-bs-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '\'">
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\\')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-bs-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-line">
                    <xsl:with-param name="text" select="$text-after-bs"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-ob">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-ob" select="substring-after($text, '{')"/>
        <xsl:variable name="text-after-ob-length" select="string-length($text-after-ob)"/>
        <xsl:choose>
            <xsl:when test="$text-after-ob-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '{'">
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\{')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-ob-length - 1), '\{')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-ob-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="$text-after-ob"/>
                    <xsl:with-param name="text-length" select="$text-after-ob-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-cb">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-cb" select="substring-after($text, '}')"/>
        <xsl:variable name="text-after-cb-length" select="string-length($text-after-cb)"/>
        <xsl:choose>
            <xsl:when test="$text-after-cb-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '}'">
                        <xsl:value-of select="concat(substring($text,1,$text-length - 1), '\}')"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$text"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat(substring($text,1,$text-length - $text-after-cb-length - 1), '\}')"/>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="$text-after-cb"/>
                    <xsl:with-param name="text-length" select="$text-after-cb-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="text()|@*">
        <xsl:call-template name="write-text">
            <xsl:with-param name="text" select="."/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:GetColorID">
        <xsl:param name="text"/>
        <xsl:variable name="txt" select="translate($text, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$txt = 'WHITE'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'IVORY'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTYELLOW'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOW'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SNOW'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FLORALWHITE'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LEMONCHIFFON'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNSILK'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEASHELL'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDERBLUSH'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PAPAYAWHIP'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLANCHEDALMOND'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MISTYROSE'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BISQUE'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MOCCASIN'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVAJOWHITE'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PEACHPUFF'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLD'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PINK'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTPINK'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGE'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSALMON'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORANGE'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORAL'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HOTPINK'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TOMATO'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGERED'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPPINK'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FUCHSIA'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAGENTA'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'RED'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLDLACE'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGOLDENRODYELLOW'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LINEN'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ANTIQUEWHITE'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SALMON'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GHOSTWHITE'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MINTCREAM'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHITESMOKE'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BEIGE'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHEAT'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SANDYBROWN'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AZURE'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HONEYDEW'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ALICEBLUE'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'KHAKI'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCORAL'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGOLDENROD'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'VIOLET'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSALMON'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDER'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCYAN'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BURLYWOOD'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PLUM'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GAINSBORO'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CRIMSON'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEVIOLETRED'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLDENROD'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORCHID'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'THISTLE'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGRAY'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TAN'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHOCOLATE'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PERU'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIANRED'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMVIOLETRED'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SILVER'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKKHAKI'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROSYBROWN'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMORCHID'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGOLDENROD'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FIREBRICK'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'POWDERBLUE'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSTEELBLUE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALETURQUOISE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREENYELLOW'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTBLUE'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGRAY'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BROWN'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SIENNA'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOWGREEN'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORCHID'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGREEN'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKVIOLET'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMPURPLE'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGREEN'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSEAGREEN'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SADDLEBROWN'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKMAGENTA'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKRED'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUEVIOLET'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSKYBLUE'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SKYBLUE'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GRAY'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVE'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PURPLE'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAROON'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUAMARINE'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHARTREUSE'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAWNGREEN'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSLATEBLUE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSLATEGRAY'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEGRAY'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVEDRAB'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEBLUE'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DIMGRAY'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMAQUAMARINE'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNFLOWERBLUE'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CADETBLUE'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKOLIVEGREEN'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIGO'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMTURQUOISE'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEBLUE'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'STEELBLUE'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROYALBLUE'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TURQUOISE'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSEAGREEN'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIMEGREEN'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEGRAY'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEAGREEN'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FORESTGREEN'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSEAGREEN'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DODGERBLUE'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MIDNIGHTBLUE'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CYAN'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUA'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SPRINGGREEN'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIME'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSPRINGGREEN'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKTURQUOISE'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPSKYBLUE'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKCYAN'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TEAL'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREEN'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGREEN'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUE'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMBLUE'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKBLUE'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVY'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLACK'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFFF'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFF0'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFE0'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFF00'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAFA'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAF0'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFACD'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF8DC'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF5EE'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF0F5'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEFD5'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEBCD'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4E1'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4C4'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4B5'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDEAD'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDAB9'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFD700'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFC0CB'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFB6C1'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA500'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA07A'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF8C00'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF7F50'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF69B4'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF6347'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF4500'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF1493'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF0000'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FDF5E6'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAFAD2'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAF0E6'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAEBD7'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FA8072'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F8F8FF'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5FFFA'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5F5'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5DC'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5DEB3'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F4A460'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFFF'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFF0'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0F8FF'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0E68C'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F08080'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EEE8AA'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EE82EE'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E9967A'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E6E6FA'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E0FFFF'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEB887'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DDA0DD'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DCDCDC'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DC143C'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DB7093'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DAA520'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DA70D6'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D8BFD8'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D3D3D3'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2B48C'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2691E'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD853F'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD5C5C'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C71585'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C0C0C0'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BDB76B'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BC8F8F'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BA55D3'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B8860B'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B22222'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0E0E6'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0C4DE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AFEEEE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADFF2F'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADD8E6'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A9A9A9'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A52A2A'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A0522D'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9ACD32'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9932CC'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '98FB98'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9400D3'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9370DB'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '90EE90'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8FBC8B'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B4513'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B008B'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B0000'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8A2BE2'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEFA'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEEB'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808080'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808000'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800080'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800000'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFFD4'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFF00'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7CFC00'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7B68EE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '778899'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '708090'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6B8E23'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6A5ACD'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '696969'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '66CDAA'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6495ED'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '5F9EA0'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '556B2F'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4B0082'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '48D1CC'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '483D8B'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4682B4'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4169E1'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '40E0D0'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '3CB371'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '32CD32'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2F4F4F'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2E8B57'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '228B22'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '20B2AA'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '1E90FF'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '191970'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF7F'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF00'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FA9A'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00CED1'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00BFFF'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008B8B'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008080'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008000'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '006400'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000FF'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000CD'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00008B'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000080'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000000'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetFontID">
        <xsl:param name="font"/>
        <xsl:variable name="font-upper" select="translate($font, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$font-upper = 'TIMES NEW ROMAN'">
                <xsl:text>0</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'ARIAL'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'SYMBOL'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'WINGDINGS'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetRtfBorderStyle">
        <xsl:param name="style"/>
        <xsl:choose>
            <xsl:when test="$style='none'">
                <xsl:text>\brdrnil</xsl:text>
            </xsl:when>
            <xsl:when test="$style='hidden'">
                <xsl:text>\brdrnone</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dotted'">
                <xsl:text>\brdrdot</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dashed'">
                <xsl:text>\brdrdash</xsl:text>
            </xsl:when>
            <xsl:when test="$style='solid'">
                <xsl:text>\brdrs</xsl:text>
            </xsl:when>
            <xsl:when test="$style='double'">
                <xsl:text>\brdrd</xsl:text>
            </xsl:when>
            <xsl:when test="$style='groove'">
                <xsl:text>\brdrengrave</xsl:text>
            </xsl:when>
            <xsl:when test="$style='ridge'">
                <xsl:text>\brdremboss</xsl:text>
            </xsl:when>
            <xsl:when test="$style='inset'">
                <xsl:text>\brdrinset</xsl:text>
            </xsl:when>
            <xsl:when test="$style='outset'">
                <xsl:text>\brdroutset</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\brdrnil</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:ConvertWidthToTwips">
        <xsl:param name="width"/>
        <xsl:variable name="normal-width" select="normalize-space($width)"/>
        <xsl:choose>
            <xsl:when test="contains($normal-width,'px')">
                <xsl:value-of select="(number(substring-before($normal-width,'px')) * 1440) div $altova:nPxPerIn"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'cm')">
                <xsl:value-of select="(number(substring-before($normal-width,'cm')) * 1440) div 2.54"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'mm')">
                <xsl:value-of select="(number(substring-before($normal-width,'mm')) * 1440) div 25.4"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'in')">
                <xsl:value-of select="number(substring-before($normal-width,'in')) * 1440"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pc')">
                <xsl:value-of select="number(substring-before($normal-width,'pc')) * 240"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pt')">
                <xsl:value-of select="number(substring-before($normal-width,'pt')) * 20"/>
            </xsl:when>
            <xsl:when test="$normal-width='thin'">
                <xsl:value-of select="30"/>
            </xsl:when>
            <xsl:when test="$normal-width='medium'">
                <xsl:value-of select="60"/>
            </xsl:when>
            <xsl:when test="$normal-width='thick'">
                <xsl:value-of select="80"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
