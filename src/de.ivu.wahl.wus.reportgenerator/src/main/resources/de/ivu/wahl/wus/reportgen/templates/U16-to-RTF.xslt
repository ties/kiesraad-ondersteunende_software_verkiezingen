<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2015 rel. 4 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altova-xfi="http://www.altova.com/xslt-extensions/xbrl" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:clitype="clitype" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:eml="urn:oasis:names:tc:evs:schema:eml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:kr="http://www.kiesraad.nl/extensions" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:rg="http://www.kiesraad.nl/reportgenerator" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:ts="urn:oasis:names:tc:evs:schema:eml:ts" xmlns:xal="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xff="http://www.xbrl.org/2010/function/formula" xmlns:xfi="http://www.xbrl.org/2008/function/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xnl="urn:oasis:names:tc:ciq:xsdschema:xNL:2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altova-xfi altovaext array clitype ds eml fn iso4217 ix java kr link map math rg sps ts xal xbrldi xbrli xff xfi xlink xnl xs xsi">
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-simple-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-P22-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\U16-text.xslt"/>
    <xsl:output method="text" encoding="UTF-8"/>
    <xsl:param name="SV_OutputFormat" select="'RTF'"/>
    <xsl:param name="generateDate" select="'01-02-2003 04:05:06'"/>
    <xsl:param name="hashCode" select="'12 34 56 78 90 AB CD EF 12 34 56 78 90 AB CD EF FF FF FF FF'"/>
    <xsl:param name="isDraft" select="'false'"/>
    <xsl:param name="lang" select="'1'"/>
    <xsl:variable name="XML" select="/"/>
    <xsl:variable name="altova:nPxPerIn" select="96"/>
    <xsl:template match="*" priority="-1.0">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:apply-templates>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:apply-templates>
    </xsl:template>
    <xsl:template match="/">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:text>{\rtf1\ansi\deff0</xsl:text>
        <xsl:text>{\fonttbl{\f0\fnil Times New Roman;}{\f1\fnil Arial;}{\f2\fnil Symbol;}{\f3\fnil Wingdings;}}</xsl:text>
        <xsl:text>{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red0\green0\blue139;\red0\green0\blue205;\red0\green0\blue255;\red0\green100\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green139\blue139;\red0\green191\blue255;\red0\green206\blue209;\red0\green250\blue154;\red0\green255\blue0;\red0\green255\blue127;\red0\green255\blue255;\red0\green255\blue255;\red25\green25\blue112;\red30\green144\blue255;\red32\green178\blue170;\red34\green139\blue34;\red46\green139\blue87;\red47\green79\blue79;\red50\green205\blue50;\red60\green179\blue113;\red64\green224\blue208;\red65\green105\blue225;\red70\green130\blue180;\red72\green61\blue139;\red72\green209\blue204;\red75\green0\blue130;\red85\green107\blue47;\red95\green158\blue160;\red100\green149\blue237;\red102\green205\blue170;\red105\green105\blue105;\red106\green90\blue205;\red107\green142\blue35;\red112\green128\blue144;\red119\green136\blue153;\red123\green104\blue238;\red124\green252\blue0;\red127\green255\blue0;\red127\green255\blue212;\red128\green0\blue0;\red128\green0\blue128;\red128\green128\blue0;\red128\green128\blue128;\red135\green206\blue235;\red135\green206\blue250;\red138\green43\blue226;\red139\green0\blue0;\red139\green0\blue139;\red139\green69\blue19;\red143\green188\blue139;\red144\green238\blue144;\red147\green112\blue219;\red148\green0\blue211;\red152\green251\blue152;\red153\green50\blue204;\red154\green205\blue50;\red160\green82\blue45;\red165\green42\blue42;\red169\green169\blue169;\red173\green216\blue230;\red173\green255\blue47;\red175\green238\blue238;\red176\green196\blue222;\red176\green224\blue230;\red178\green34\blue34;\red184\green134\blue11;\red186\green85\blue211;\red188\green143\blue143;\red189\green183\blue107;\red192\green192\blue192;\red199\green21\blue133;\red205\green92\blue92;\red205\green133\blue63;\red210\green105\blue30;\red210\green180\blue140;\red211\green211\blue211;\red216\green191\blue216;\red218\green112\blue214;\red218\green165\blue32;\red219\green112\blue147;\red220\green20\blue60;\red220\green220\blue220;\red221\green160\blue221;\red222\green184\blue135;\red224\green255\blue255;\red230\green230\blue250;\red233\green150\blue122;\red238\green130\blue238;\red238\green232\blue170;\red240\green128\blue128;\red240\green230\blue140;\red240\green248\blue255;\red240\green255\blue240;\red240\green255\blue255;\red244\green164\blue96;\red245\green222\blue179;\red245\green245\blue220;\red245\green245\blue245;\red245\green255\blue250;\red248\green248\blue255;\red250\green128\blue114;\red250\green235\blue215;\red250\green240\blue230;\red250\green250\blue210;\red253\green245\blue230;\red255\green0\blue0;\red255\green0\blue255;\red255\green0\blue255;\red255\green20\blue147;\red255\green69\blue0;\red255\green99\blue71;\red255\green105\blue180;\red255\green127\blue80;\red255\green140\blue0;\red255\green160\blue122;\red255\green165\blue0;\red255\green182\blue193;\red255\green192\blue203;\red255\green215\blue0;\red255\green218\blue185;\red255\green222\blue173;\red255\green228\blue181;\red255\green228\blue196;\red255\green228\blue225;\red255\green235\blue205;\red255\green239\blue213;\red255\green240\blue245;\red255\green245\blue238;\red255\green248\blue220;\red255\green250\blue205;\red255\green250\blue240;\red255\green250\blue250;\red255\green255\blue0;\red255\green255\blue224;\red255\green255\blue240;\red255\green255\blue255;\red166\green166\blue166;\red170\green170\blue170;\red172\green168\blue153;\red236\green233\blue216;}</xsl:text>
        <xsl:text>{\stylesheet</xsl:text>
        <xsl:text>{\s0\f0\fs24\snext0 Normal;}</xsl:text>
        <xsl:text>{\s1\f0\fs24\snext0 Paragraph;}</xsl:text>
        <xsl:text>{\s2\f0\fs24\i\snext0 Address;}</xsl:text>
        <xsl:text>{\s3\qc\f0\fs24\snext0 Center;}</xsl:text>
        <xsl:text>{\s4\lin720\f0\fs24\snext0 Blockquote;}</xsl:text>
        <xsl:text>{\s5\lin60\rin60\brdrs\brdrcf47\brdrw15\f0\fs24\snext0 Fieldset;}</xsl:text>
        <xsl:text>{\s6\f1\fs24\snext0 Preformatted;}</xsl:text>
        <xsl:text>{\s7\f1\fs24\snext0 Preformatted and wrapping;}</xsl:text>
        <xsl:text>{\s8\f1\fs48\b\snext0 Heading 1;}</xsl:text>
        <xsl:text>{\s9\f1\fs36\b\snext0 Heading 2;}</xsl:text>
        <xsl:text>{\s10\f1\fs26\b\snext0 Heading 3;}</xsl:text>
        <xsl:text>{\s11\f1\fs22\b\snext0 Heading 4;}</xsl:text>
        <xsl:text>{\s12\f1\fs18\b\snext0 Heading 5;}</xsl:text>
        <xsl:text>{\s13\f1\fs16\b\snext0 Heading 6;}</xsl:text>
        <xsl:text>{\*\ts15\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts16\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts17\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts18\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts19\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts20\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts21\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts22\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts23\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts24\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts25\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts26\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts27\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts28\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts29\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts30\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts31\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts32\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts33\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts34\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts35\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts36\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts37\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts38\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts39\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts40\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts41\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts42\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts43\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts44\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts45\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts46\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts47\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts48\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts49\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts50\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts51\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts52\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts53\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts54\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts55\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts56\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts57\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts58\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts59\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts60\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts61\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts62\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts63\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts64\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts65\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts66\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts67\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts68\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts69\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts70\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts71\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts72\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts73\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts74\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts75\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts76\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts77\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts78\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts79\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts80\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts81\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts82\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts83\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts84\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts85\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts86\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts87\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts88\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts89\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts90\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts91\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts92\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts93\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts94\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts95\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts96\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts97\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts98\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts99\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts100\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts101\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts102\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts103\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts104\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts105\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts106\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts107\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts108\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts109\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts110\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts111\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts112\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts113\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts114\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts115\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts116\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>}</xsl:text>
        <xsl:text>{\*\generator Altova StyleVision Enterprise Edition;}\viewkind1\viewzk0\viewscale100\newtblstyruls\nofeaturethrottle1 </xsl:text>
        <xsl:text>\dntblnsbdb\fs24\f0 </xsl:text>
        <xsl:call-template name="altova:DocumentSection_0">
            <xsl:with-param name="altova:nMaxWidthIn" select="6.26"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="altova:DocumentSection_0">
        <xsl:param name="altova:nMaxWidthIn"/>
        <xsl:param name="templatetablelevel"/>
        <xsl:text>\sectd\facingp\pgwsxn11900\pghsxn16820\margtsxn1280\marglsxn1440\margbsxn1720\margrsxn1440\headery0\footery0\cols1\colsx720\pgndec\ftnbj\ftnrstcont\ftnnar</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerl </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerr </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerl </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterLeft"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerr </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterRight"/>
        <xsl:text>}</xsl:text>
        <xsl:text>\par</xsl:text>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="$XML">
            <xsl:for-each select="eml:EML">
                <xsl:for-each select="eml:Result">
                    <xsl:for-each select="eml:Election">
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Model U 16</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs32\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Proces-verbaal van de verkiezingsuitslag van de Eerste Kamer</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Met dit formulier wordt verslag gedaan van de zitting waarin de uitslag is vastgesteld van de verkiezing voor de Eerste Kamer.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="ChapterElection">
                            <xsl:with-param name="isU16" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum verkiezing: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="eml:ElectionIdentifier">
                            <xsl:for-each select="kr:ElectionDate">
                                <xsl:call-template name="Date">
                                    <xsl:with-param name="isBold" select="1"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>2. Zitting</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Het betreft de zitting van het centraal stembureau in &apos;s-Gravenhage.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_0" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_0" select="$altova:nTableWidthIn_0 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_0" select="round($altova:nTableWidthTw_0 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_0" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_0" select="round(6801.00)"/>
                        <xsl:variable name="altova:TableWidthFactor_0">
                            <xsl:choose>
                                <xsl:when test="$altova:nSumColumnWidthsTw_0 &gt; $altova:nTableWidthTw_0">
                                    <xsl:value-of select="$altova:nTableWidthTw_0 div $altova:nSumColumnWidthsTw_0"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_0" select="0"/>
                        <xsl:variable name="altova:nColumnWidthTw_0_0" select="round(1.39 * 1440 * $altova:TableWidthFactor_0)"/>
                        <xsl:variable name="altova:nColumnWidthTw_0_1" select="round(3.33 * 1440 * $altova:TableWidthFactor_0)"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle0">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth1</xsl:text>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_0"/>
                            <xsl:text>\ts15\ts16\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend0">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend0">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle0">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle0"/>
                            <xsl:value-of select="$altova:RowStyle0"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum zitting</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="rg:DateOfMeetingO1P20">
                            <xsl:call-template name="Date">
                                <xsl:with-param name="isBold" select="1"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.02083 - 0.02083"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle0"/>
                        <xsl:value-of select="$altova:RowStyle0"/>
                        <xsl:value-of select="$rowend0"/>
                        <xsl:variable name="altova:RowStyle1">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle0"/>
                            <xsl:value-of select="$altova:RowStyle1"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs22 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Tijdstip zitting</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="rg:TimeOfMeetingP20">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_0_1 div 1440) - 0.02083 - 0.02083"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle0"/>
                        <xsl:value-of select="$altova:RowStyle1"/>
                        <xsl:value-of select="$rowend0"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                    </xsl:for-each>
                    <xsl:call-template name="LineBreakTable">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>3. Stemwaarden per provincie</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Volgens artikel U 2 van de Kieswet zijn de stemwaarden vastgesteld op basis van de inwonersaantallen per provincie op 1 januari van het verkiezingsjaar, zoals gepubliceerd door het Centraal Bureau voor de Statistiek (Stcrt. </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:for-each select="rg:PublicationVoteValuesDate">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="substring(text(),1, 4)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="rg:PublicationVoteValuesNumber">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>).</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:for-each select="rg:ElectoralDistrictsOverview">
                            <xsl:variable name="altova:CurrContextGrid_2" select="."/>
                            <xsl:variable name="altova:nTableWidthIn_1" select="$altova:nMaxWidthIn * 0.80000"/>
                            <xsl:variable name="altova:nTableWidthTw_1" select="$altova:nTableWidthIn_1 * 1440"/>
                            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_1" select="round($altova:nTableWidthTw_1 * 0.25)"/>
                            <xsl:variable name="altova:nTableIndentTw_1" select="0"/>
                            <xsl:variable name="altova:nSumColumnWidthsTw_1" select="round(0.00 + 1.00 * $altova:nTableWidthTw_1)"/>
                            <xsl:variable name="altova:TableWidthFactor_1">
                                <xsl:choose>
                                    <xsl:when test="$altova:nSumColumnWidthsTw_1 &gt; $altova:nTableWidthTw_1">
                                        <xsl:value-of select="$altova:nTableWidthTw_1 div $altova:nSumColumnWidthsTw_1"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="1"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="altova:nDefaultColumnWidthTw_1" select="0"/>
                            <xsl:variable name="altova:nColumnWidthTw_1_0" select="round($altova:nTableWidthTw_1 * 0.30 * $altova:TableWidthFactor_1)"/>
                            <xsl:variable name="altova:nColumnWidthTw_1_1" select="round($altova:nTableWidthTw_1 * 0.20 * $altova:TableWidthFactor_1)"/>
                            <xsl:variable name="altova:nColumnWidthTw_1_2" select="round($altova:nTableWidthTw_1 * 0.30 * $altova:TableWidthFactor_1)"/>
                            <xsl:variable name="altova:nColumnWidthTw_1_3" select="round($altova:nTableWidthTw_1 * 0.20 * $altova:TableWidthFactor_1)"/>
                            <xsl:text>\pard\s0\f0\fs24</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:variable name="tablestyle1">
                                <xsl:text>\trowd</xsl:text>
                                <xsl:text>\trautofit1</xsl:text>
                                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                                <xsl:value-of select="round($altova:nTableWidthTw_1)"/>
                                <xsl:text>\trleft</xsl:text>
                                <xsl:value-of select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\ts17\ts18\trspdl22\trspdt22\trspdb22\trspdr22\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                            </xsl:variable>
                            <xsl:variable name="rowend1">
                                <xsl:choose>
                                    <xsl:when test="$templatetablelevel + 1 = 1">
                                        <xsl:text>\row\pard</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="cellend1">
                                <xsl:choose>
                                    <xsl:when test="$templatetablelevel + 1 = 1">
                                        <xsl:text>\cell</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>\nestcell</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="altova:RowStyle2">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle2"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>stemwaarde</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>stemwaarde</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle2"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle3">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle3"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 1]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 1]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 7]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 7]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle3"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle4">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle4"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 2]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 2]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 8]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 8]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle4"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle5">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle5"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 3]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 3]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 9]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 9]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle5"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle6">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle6"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 4]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 4]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 10]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 10]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle6"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle7">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle7"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 5]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 5]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 11]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 11]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle7"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:variable name="altova:RowStyle8">
                                <xsl:text>\trrh0</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_1_3 = $altova:nDefaultColumnWidthTw_1">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl1_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col2_AfterColumn + $altova:nColumnWidthTw_1_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle1"/>
                                <xsl:value-of select="$altova:RowStyle8"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 6]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_0 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 6]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 12]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_1_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:for-each select="rg:ElectoralDistrictName[position() = 12]">
                                <xsl:for-each select="@voteValue">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend1"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle8"/>
                            <xsl:value-of select="$rowend1"/>
                            <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 0"/>
                            <xsl:text> </xsl:text>
                        </xsl:for-each>
                        <xsl:call-template name="LineBreakTable">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\page </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>4. Ingeleverde kandidatenlijsten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>De volgende politieke groeperingen hebben deelgenomen aan de verkiezing:</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="LineBreak">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewCandidateListsEK">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>5. Stemmen per lijst </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewVotesEK">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>6. Kiesdeler </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="Kiesdeler">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>7. Verdeling volle zetels</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewFirstAssigment">
                            <xsl:with-param name="isEK" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>8. Verdeling restzetels</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>De restzetels zijn achtereenvolgens toegewezen aan de lijsten die met een zetel erbij het grootste gemiddelde aantal stemmen per zetel hebben.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewDHondtAssignment">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="OverviewDHondtAssignmentSpecial">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>9. Totaal aantal zetels per politieke groepering</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewListResult">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>10. Verdeling zetels binnen lijstengroep</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:choose>
                            <xsl:when test="count(rg:AssignmentWithinListGroups) &gt; 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Op basis van artikel U 12 van de Kieswet wordt bij de verdeling van zetels binnen een lijstengroep eerst de groepskiesdeler bepaald. Vervolgens wordt het aantal stemmen per lijst gedeeld door de groepskiesdeler. Dat levert het aantal volle zetels per lijst op. De lijst die na verdeling van de zetels het grootste overschot heeft, krijgt de restzetel(s).</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="LineBreak">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                                <xsl:text>\page </xsl:text>
                                <xsl:call-template name="OverviewAssignmentWithinListGroups">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Niet van toepassing.</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="LineBreak">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                                <xsl:text>\page </xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:for-each>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>11. Stemmen per lijst met tenminste één zetel en toewijzing zetels aan kandidaten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewCandidateResultU16-IJ">
                            <xsl:with-param name="isSeats" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>12. Stemmen per lijst zonder zetel</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:if test="count( rg:RG520/rg:OverviewOfCandidatesAndResults/rg:ListGroupAndResults[ rg:Seats = 0 ] ) = 0">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Niet van toepassing</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$U16_210_Niet_toepassing"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                    <xsl:for-each select="rg:RG520">
                        <xsl:call-template name="OverviewCandidateResultU16-IJ">
                            <xsl:with-param name="isSeats" select="0"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>13. Gekozen kandidaten in alfabetische volgorde</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:for-each select="rg:RG520">
                        <xsl:for-each select="rg:OverviewOfElectedCandidates">
                            <xsl:variable name="altova:CurrContextGrid_3" select="."/>
                            <xsl:variable name="altova:nTableWidthIn_2" select="$altova:nMaxWidthIn * 1.00000"/>
                            <xsl:variable name="altova:nTableWidthTw_2" select="$altova:nTableWidthIn_2 * 1440"/>
                            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_2" select="round($altova:nTableWidthTw_2 * 0.25)"/>
                            <xsl:variable name="altova:nTableIndentTw_2" select="0"/>
                            <xsl:variable name="altova:nSumColumnWidthsTw_2" select="round(0.00 + 1.00 * $altova:nTableWidthTw_2)"/>
                            <xsl:variable name="altova:TableWidthFactor_2">
                                <xsl:choose>
                                    <xsl:when test="$altova:nSumColumnWidthsTw_2 &gt; $altova:nTableWidthTw_2">
                                        <xsl:value-of select="$altova:nTableWidthTw_2 div $altova:nSumColumnWidthsTw_2"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="1"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="altova:nDefaultColumnWidthTw_2" select="0"/>
                            <xsl:variable name="altova:nColumnWidthTw_2_0" select="round($altova:nTableWidthTw_2 * 0.35 * $altova:TableWidthFactor_2)"/>
                            <xsl:variable name="altova:nColumnWidthTw_2_1" select="round($altova:nTableWidthTw_2 * 0.10 * $altova:TableWidthFactor_2)"/>
                            <xsl:variable name="altova:nColumnWidthTw_2_2" select="round($altova:nTableWidthTw_2 * 0.35 * $altova:TableWidthFactor_2)"/>
                            <xsl:variable name="altova:nColumnWidthTw_2_3" select="round($altova:nTableWidthTw_2 * 0.20 * $altova:TableWidthFactor_2)"/>
                            <xsl:text>\pard\s0\f0\fs24</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:variable name="tablestyle2">
                                <xsl:text>\trowd</xsl:text>
                                <xsl:text>\trautofit1</xsl:text>
                                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                                <xsl:value-of select="round($altova:nTableWidthTw_2)"/>
                                <xsl:text>\trleft</xsl:text>
                                <xsl:value-of select="$altova:nTableIndentTw_2"/>
                                <xsl:text>\ts19\ts20\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                            </xsl:variable>
                            <xsl:variable name="rowend2">
                                <xsl:choose>
                                    <xsl:when test="$templatetablelevel + 1 = 1">
                                        <xsl:text>\row\pard</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="cellend2">
                                <xsl:choose>
                                    <xsl:when test="$templatetablelevel + 1 = 1">
                                        <xsl:text>\cell</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>\nestcell</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:variable>
                            <xsl:variable name="altova:RowStyle9">
                                <xsl:text>\trrh0\trhdr</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
                                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                                    <xsl:text>\clftsWidth1</xsl:text>
                                </xsl:if>
                                <xsl:text>\cellx</xsl:text>
                                <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
                                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
                            </xsl:variable>
                            <xsl:if test="$templatetablelevel + 1 = 1">
                                <xsl:value-of select="$tablestyle2"/>
                                <xsl:value-of select="$altova:RowStyle9"/>
                            </xsl:if>
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>aanduiding politieke groepering</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend2"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>lijst</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend2"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>naam kandidaat</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend2"/>
                            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>woonplaats</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                            <xsl:value-of select="$cellend2"/>
                            <xsl:if test="$templatetablelevel + 1 > 1">
                                <xsl:text>{\*\nesttableprops</xsl:text>
                            </xsl:if>
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle9"/>
                            <xsl:value-of select="$rowend2"/>
                            <xsl:for-each select="rg:ElectedCandidate">
                                <xsl:variable name="PublishGender" select="kr:ListData/@PublishGender"/>
                                <xsl:variable name="PublicationLanguage" select="kr:ListData/@PublicationLanguage"/>
                                <xsl:variable name="altova:RowStyle10">
                                    <xsl:text>\trrh0</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_2_2 = $altova:nDefaultColumnWidthTw_2">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl2_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col1_AfterColumn + $altova:nColumnWidthTw_2_2"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col2_AfterColumn)"/>
                                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                                    <xsl:if test="$altova:nColumnWidthTw_2_3 = $altova:nDefaultColumnWidthTw_2">
                                        <xsl:text>\clftsWidth1</xsl:text>
                                    </xsl:if>
                                    <xsl:text>\cellx</xsl:text>
                                    <xsl:variable name="altova:CurrGridPos_Tbl2_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col2_AfterColumn + $altova:nColumnWidthTw_2_3"/>
                                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col3_AfterColumn)"/>
                                </xsl:variable>
                                <xsl:if test="$templatetablelevel + 1 = 1">
                                    <xsl:value-of select="$tablestyle2"/>
                                    <xsl:value-of select="$altova:RowStyle10"/>
                                </xsl:if>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 1"/>
                                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="eml:RegisteredName">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_0 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend2"/>
                                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="@Id">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="string(.)"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend2"/>
                                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                                <xsl:for-each select="eml:Candidate">
                                    <xsl:for-each select="eml:CandidateFullName">
                                        <xsl:call-template name="LastNameH1">
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_2 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:call-template>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>, </xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                        <xsl:call-template name="FirstNameH1">
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_2 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:call-template>
                                    </xsl:for-each>
                                </xsl:for-each>
                                <xsl:call-template name="GenderGeneral">
                                    <xsl:with-param name="Gender" select="eml:Gender"/>
                                    <xsl:with-param name="PublishGender" select="$PublishGender"/>
                                    <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_2 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:call-template>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend2"/>
                                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                                <xsl:for-each select="eml:Candidate">
                                    <xsl:for-each select="eml:QualifyingAddress">
                                        <xsl:call-template name="City">
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_3 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:call-template>
                                        <xsl:for-each select="xal:Country">
                                            <xsl:call-template name="City">
                                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_3 div 1440) - 0.01042 - 0.01042"/>
                                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                            </xsl:call-template>
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text> </xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                            <xsl:for-each select="xal:CountryNameCode">
                                                <xsl:text>{\f1\fs18 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>(</xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                                <xsl:text>{\f1\fs18 </xsl:text>
                                                <xsl:apply-templates>
                                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_2_3 div 1440) - 0.01042 - 0.01042"/>
                                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                                </xsl:apply-templates>
                                                <xsl:text>}</xsl:text>
                                                <xsl:text>{\f1\fs18 </xsl:text>
                                                <xsl:call-template name="write-text">
                                                    <xsl:with-param name="text">
                                                        <xsl:text>)</xsl:text>
                                                    </xsl:with-param>
                                                </xsl:call-template>
                                                <xsl:text>}</xsl:text>
                                            </xsl:for-each>
                                        </xsl:for-each>
                                    </xsl:for-each>
                                </xsl:for-each>
                                <xsl:text>\f0\fs24</xsl:text>
                                <xsl:value-of select="$cellend2"/>
                                <xsl:if test="$templatetablelevel + 1 > 1">
                                    <xsl:text>{\*\nesttableprops</xsl:text>
                                </xsl:if>
                                <xsl:value-of select="$tablestyle2"/>
                                <xsl:value-of select="$altova:RowStyle10"/>
                                <xsl:value-of select="$rowend2"/>
                            </xsl:for-each>
                            <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 0"/>
                            <xsl:text> </xsl:text>
                        </xsl:for-each>
                        <xsl:text>\page </xsl:text>
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>14. Bezwaren van aanwezige kiezers</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Tijdens de zitting zijn:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_4" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_3" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_3" select="$altova:nTableWidthIn_3 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_3" select="round($altova:nTableWidthTw_3 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_3" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_3" select="round(901.00)"/>
                        <xsl:variable name="altova:TableWidthFactor_3">
                            <xsl:choose>
                                <xsl:when test="$altova:nSumColumnWidthsTw_3 &gt; $altova:nTableWidthTw_3">
                                    <xsl:value-of select="($altova:nTableWidthTw_3 - $altova:SumDefaultColumnsForWideTableTw_3) div $altova:nSumColumnWidthsTw_3"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnsWithDefaultWidth_3" select="round(1)"/>
                        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_3">
                            <xsl:choose>
                                <xsl:when test="$altova:nColumnsWithDefaultWidth_3 = 0">
                                    <xsl:value-of select="round(1)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_3"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_3">
                            <xsl:choose>
                                <xsl:when test="$altova:TableWidthFactor_3 &lt; 1">
                                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_3 div $altova:nColumnsWithDefaultWidthNotZero_3"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="round(($altova:nTableWidthTw_3 - $altova:nSumColumnWidthsTw_3) div $altova:nColumnsWithDefaultWidthNotZero_3)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnWidthTw_3_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_3)"/>
                        <xsl:variable name="altova:nColumnWidthTw_3_1" select="round(0.21 * 1440 * $altova:TableWidthFactor_3)"/>
                        <xsl:variable name="altova:nColumnWidthTw_3_2" select="$altova:nDefaultColumnWidthTw_3"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle3">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                            <xsl:value-of select="round($altova:nTableWidthTw_3)"/>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_3"/>
                            <xsl:text>\ts21\ts22\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend3">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend3">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle11">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle3"/>
                            <xsl:value-of select="$altova:RowStyle11"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>□ </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>geen bezwaren ingebracht.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle11"/>
                        <xsl:value-of select="$rowend3"/>
                        <xsl:variable name="altova:RowStyle12">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle3"/>
                            <xsl:value-of select="$altova:RowStyle12"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>□ </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>bezwaren ingebracht: zie gewaarmerkte bijlage met opmerkingen van het centraal stembureau.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend3"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle12"/>
                        <xsl:value-of select="$rowend3"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>15. Ondertekening</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_5" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_4" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_4" select="$altova:nTableWidthIn_4 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_4" select="round($altova:nTableWidthTw_4 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_4" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_4" select="round(3150.50)"/>
                        <xsl:variable name="altova:TableWidthFactor_4">
                            <xsl:choose>
                                <xsl:when test="$altova:nSumColumnWidthsTw_4 &gt; $altova:nTableWidthTw_4">
                                    <xsl:value-of select="($altova:nTableWidthTw_4 - $altova:SumDefaultColumnsForWideTableTw_4) div $altova:nSumColumnWidthsTw_4"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnsWithDefaultWidth_4" select="round(1)"/>
                        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_4">
                            <xsl:choose>
                                <xsl:when test="$altova:nColumnsWithDefaultWidth_4 = 0">
                                    <xsl:value-of select="round(1)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_4"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_4">
                            <xsl:choose>
                                <xsl:when test="$altova:TableWidthFactor_4 &lt; 1">
                                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_4 div $altova:nColumnsWithDefaultWidthNotZero_4"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="round(($altova:nTableWidthTw_4 - $altova:nSumColumnWidthsTw_4) div $altova:nColumnsWithDefaultWidthNotZero_4)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnWidthTw_4_0" select="round(2.19 * 1440 * $altova:TableWidthFactor_4)"/>
                        <xsl:variable name="altova:nColumnWidthTw_4_1" select="$altova:nDefaultColumnWidthTw_4"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle4">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                            <xsl:value-of select="round($altova:nTableWidthTw_4)"/>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\ts23\ts24\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend4">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend4">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle13">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle4"/>
                            <xsl:value-of select="$altova:RowStyle13"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_________________________________________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle13"/>
                        <xsl:value-of select="$rowend4"/>
                        <xsl:variable name="altova:RowStyle14">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle4"/>
                            <xsl:value-of select="$altova:RowStyle14"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Naam en handtekening voorzitter </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_________________________________________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle14"/>
                        <xsl:value-of select="$rowend4"/>
                        <xsl:variable name="altova:RowStyle15">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle4"/>
                            <xsl:value-of select="$altova:RowStyle15"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Naam en handtekening leden</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_________________________________________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle15"/>
                        <xsl:value-of select="$rowend4"/>
                        <xsl:variable name="altova:RowStyle16">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle4"/>
                            <xsl:value-of select="$altova:RowStyle16"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_________________________________________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle16"/>
                        <xsl:value-of select="$rowend4"/>
                        <xsl:variable name="altova:RowStyle17">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle4"/>
                            <xsl:value-of select="$altova:RowStyle17"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_________________________________________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend4"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle17"/>
                        <xsl:value-of select="$rowend4"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\s0\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="OverviewVotesEK">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_6" select="."/>
        <xsl:variable name="altova:nTableWidthIn_5" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_5" select="$altova:nTableWidthIn_5 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_5" select="round($altova:nTableWidthTw_5 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_5" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_5" select="round(9047.50)"/>
        <xsl:variable name="altova:TableWidthFactor_5">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_5 &gt; $altova:nTableWidthTw_5">
                    <xsl:value-of select="$altova:nTableWidthTw_5 div $altova:nSumColumnWidthsTw_5"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_5" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_5_0" select="round(0.56 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_1" select="round(0.17 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_2" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_3" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_4" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_5" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_6" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_7" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_8" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_9" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_10" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_11" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_12" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_13" select="round(0.42 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:variable name="altova:nColumnWidthTw_5_14" select="round(0.56 * 1440 * $altova:TableWidthFactor_5)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle5">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_5)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_5"/>
            <xsl:text>\ts25\ts26\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend5">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend5">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle18">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle18"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst-</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>nummer</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>A: aantal stemmen per provincie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>B: gelden voor</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>totaal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle5"/>
        <xsl:value-of select="$altova:RowStyle18"/>
        <xsl:value-of select="$rowend5"/>
        <xsl:for-each select="rg:ElectoralDistrictsOverview">
            <xsl:variable name="altova:RowStyle19">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle5"/>
                <xsl:value-of select="$altova:RowStyle19"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl-1320\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle19"/>
            <xsl:value-of select="$rowend5"/>
        </xsl:for-each>
        <xsl:for-each select="rg:OverviewOfListsAndDistrictsAndVotes">
            <xsl:variable name="altova:RowStyle20">
                <xsl:text>\trrh20</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle5"/>
                <xsl:value-of select="$altova:RowStyle20"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="@listNumber">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\par </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 1]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 2]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 3]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 4]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 5]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 6]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 7]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 8]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 9]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 10]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 11]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = 12]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:VotesInElectoralDistrict[ @id = &quot;alle&quot; ]">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend5"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle20"/>
            <xsl:value-of select="$rowend5"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle21">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_3 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col2_AfterColumn + $altova:nColumnWidthTw_5_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col3_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_4 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col3_AfterColumn + $altova:nColumnWidthTw_5_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_5 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col4_AfterColumn + $altova:nColumnWidthTw_5_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_6 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col5_AfterColumn + $altova:nColumnWidthTw_5_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col6_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_7 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col6_AfterColumn + $altova:nColumnWidthTw_5_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_8 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col7_AfterColumn + $altova:nColumnWidthTw_5_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col8_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_9 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col8_AfterColumn + $altova:nColumnWidthTw_5_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col9_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_10 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col9_AfterColumn + $altova:nColumnWidthTw_5_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col10_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_11 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col10_AfterColumn + $altova:nColumnWidthTw_5_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col11_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_12 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col11_AfterColumn + $altova:nColumnWidthTw_5_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col12_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_13 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col12_AfterColumn + $altova:nColumnWidthTw_5_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col13_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_5_14 = $altova:nDefaultColumnWidthTw_5">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl5_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col13_AfterColumn + $altova:nColumnWidthTw_5_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle5"/>
            <xsl:value-of select="$altova:RowStyle21"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>totaal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_2 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="6"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="7"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="8"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="9"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_10 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="10"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="11"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_12 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="TotalVotesPerProvince">
            <xsl:with-param name="position" select="12"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_5_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend5"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle5"/>
        <xsl:value-of select="$altova:RowStyle21"/>
        <xsl:value-of select="$rowend5"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Totaal aantal uitgebrachte stemmen </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:for-each select="rg:OverviewOfDistrictsVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict[@id = &quot;alle&quot;]">
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="TotalVotesPerProvince">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:for-each select="rg:OverviewOfDistrictsVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict[position() = $position]">
                <xsl:for-each select="@weighted">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultU16-IJ">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isSeats" select="1"/>
        <xsl:for-each select="rg:OverviewOfCandidatesAndResults">
            <xsl:for-each select="rg:ListGroupAndResults[($isSeats = 1 and rg:Seats &gt; 0) or ($isSeats = 0 and rg:Seats = 0)]">
                <xsl:for-each select="rg:ListAndResults">
                    <xsl:variable name="candidateCount" select="count( rg:CandidateAndResult )"/>
                    <xsl:call-template name="OverviewCandidateResultU16-IJ-Base">
                        <xsl:with-param name="isSeats" select="$isSeats"/>
                        <xsl:with-param name="fromLine" select="1"/>
                        <xsl:with-param name="tillLine" select="20"/>
                        <xsl:with-param name="candidateCount" select="$candidateCount"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:if test="$candidateCount &gt;= 21">
                        <xsl:call-template name="OverviewCandidateResultU16-IJ-Base">
                            <xsl:with-param name="isSeats" select="$isSeats"/>
                            <xsl:with-param name="fromLine" select="21"/>
                            <xsl:with-param name="tillLine" select="40"/>
                            <xsl:with-param name="candidateCount" select="$candidateCount"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:if test="$candidateCount &gt;= 41">
                        <xsl:call-template name="OverviewCandidateResultU16-IJ-Base">
                            <xsl:with-param name="isSeats" select="$isSeats"/>
                            <xsl:with-param name="fromLine" select="41"/>
                            <xsl:with-param name="tillLine" select="60"/>
                            <xsl:with-param name="candidateCount" select="$candidateCount"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:if test="$candidateCount &gt;= 61">
                        <xsl:call-template name="OverviewCandidateResultU16-IJ-Base">
                            <xsl:with-param name="isSeats" select="$isSeats"/>
                            <xsl:with-param name="fromLine" select="61"/>
                            <xsl:with-param name="tillLine" select="80"/>
                            <xsl:with-param name="candidateCount" select="$candidateCount"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                </xsl:for-each>
                <xsl:if test="$isSeats = 1">
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="PartyHeader3Lines">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="OverviewCandidateResultElected">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakTable">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="OverviewCandidateResultNewListOrder">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultU16-IJ-Base">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isSeats" select="1"/>
        <xsl:param name="fromLine"/>
        <xsl:param name="tillLine"/>
        <xsl:param name="candidateCount"/>
        <xsl:choose>
            <xsl:when test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 1]/rg:VotesInElectoralDistrict) &lt;= 3">
                <xsl:call-template name="PartyHeaderEvenOdd">
                    <xsl:with-param name="isEvenOdd" select="0"/>
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:call-template name="OverviewCandidateResult-EK-1-2">
                    <xsl:with-param name="fromLine" select="$fromLine"/>
                    <xsl:with-param name="tillLine" select="$tillLine"/>
                    <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:when test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart) = 1">
                <xsl:call-template name="PartyHeaderEvenOdd">
                    <xsl:with-param name="isEvenOdd" select="0"/>
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:call-template name="OverviewCandidateResult-EK-1-4">
                    <xsl:with-param name="fromLine" select="$fromLine"/>
                    <xsl:with-param name="tillLine" select="$tillLine"/>
                    <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="PartyHeaderEvenOdd">
                    <xsl:with-param name="isEvenOdd" select="1"/>
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:call-template name="OverviewCandidateResult-EK-1-5">
                    <xsl:with-param name="fromLine" select="$fromLine"/>
                    <xsl:with-param name="tillLine" select="$tillLine"/>
                    <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:if test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart) = 2">
                    <xsl:call-template name="PartyHeaderEvenOdd">
                        <xsl:with-param name="isEvenOdd" select="0"/>
                        <xsl:with-param name="isSeats" select="$isSeats"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="OverviewCandidateResult-EK-6-12">
                        <xsl:with-param name="fromLine" select="$fromLine"/>
                        <xsl:with-param name="tillLine" select="$tillLine"/>
                        <xsl:with-param name="remainingCandidates" select="$candidateCount - $tillLine"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult-EK-1-2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_7" select="."/>
        <xsl:variable name="altova:nTableWidthIn_6" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_6" select="$altova:nTableWidthIn_6 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_6" select="round($altova:nTableWidthTw_6 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_6" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_6" select="round(9003.50)"/>
        <xsl:variable name="altova:TableWidthFactor_6">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_6 &gt; $altova:nTableWidthTw_6">
                    <xsl:value-of select="$altova:nTableWidthTw_6 div $altova:nSumColumnWidthsTw_6"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_6" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_6_0" select="round(0.21 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_1" select="round(0.63 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_2" select="round(2.15 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_3" select="round(0.14 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_4" select="round(1.04 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_5" select="round(1.04 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:variable name="altova:nColumnWidthTw_6_6" select="round(1.04 * 1440 * $altova:TableWidthFactor_6)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle6">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_6)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_6"/>
            <xsl:text>\ts27\ts28\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend6">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend6">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle22">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_3 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col2_AfterColumn + $altova:nColumnWidthTw_6_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_4 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col3_AfterColumn + $altova:nColumnWidthTw_6_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_5 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col4_AfterColumn + $altova:nColumnWidthTw_6_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_6 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col5_AfterColumn + $altova:nColumnWidthTw_6_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle22"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>naam kandidaat</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>A: aantal stemmen per provincie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = 1]">
                <xsl:for-each select="rg:VotesInElectoralDistrict[@id = &apos;alle&apos;]">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>totaal</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle22"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:variable name="altova:RowStyle23">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_3 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col2_AfterColumn + $altova:nColumnWidthTw_6_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_4 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col3_AfterColumn + $altova:nColumnWidthTw_6_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_5 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col4_AfterColumn + $altova:nColumnWidthTw_6_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_6 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col5_AfterColumn + $altova:nColumnWidthTw_6_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle23"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>B: gelden voor</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle23"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:variable name="altova:RowStyle24">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_3 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col2_AfterColumn + $altova:nColumnWidthTw_6_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col3_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_4 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col3_AfterColumn + $altova:nColumnWidthTw_6_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_5 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col4_AfterColumn + $altova:nColumnWidthTw_6_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_6_6 = $altova:nDefaultColumnWidthTw_6">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl6_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col5_AfterColumn + $altova:nColumnWidthTw_6_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle24"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl-1320\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend6"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle6"/>
        <xsl:value-of select="$altova:RowStyle24"/>
        <xsl:value-of select="$rowend6"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle25">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_3 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col2_AfterColumn + $altova:nColumnWidthTw_6_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_4 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col3_AfterColumn + $altova:nColumnWidthTw_6_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_5 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col4_AfterColumn + $altova:nColumnWidthTw_6_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_6 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col5_AfterColumn + $altova:nColumnWidthTw_6_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col6_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle6"/>
                <xsl:value-of select="$altova:RowStyle25"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateInTable">
                <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) + ($altova:nColumnWidthTw_6_2 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle25"/>
            <xsl:value-of select="$rowend6"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=1 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle26">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_2 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col1_AfterColumn + $altova:nColumnWidthTw_6_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_3 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col2_AfterColumn + $altova:nColumnWidthTw_6_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_4 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col3_AfterColumn + $altova:nColumnWidthTw_6_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_5 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col4_AfterColumn + $altova:nColumnWidthTw_6_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_6_6 = $altova:nDefaultColumnWidthTw_6">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl6_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col5_AfterColumn + $altova:nColumnWidthTw_6_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col6_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle6"/>
                <xsl:value-of select="$altova:RowStyle26"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend6"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle6"/>
            <xsl:value-of select="$altova:RowStyle26"/>
            <xsl:value-of select="$rowend6"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult-EK-1-4">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_8" select="."/>
        <xsl:variable name="altova:nTableWidthIn_7" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_7" select="$altova:nTableWidthIn_7 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_7" select="round($altova:nTableWidthTw_7 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_7" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_7" select="round(9004.50)"/>
        <xsl:variable name="altova:TableWidthFactor_7">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_7 &gt; $altova:nTableWidthTw_7">
                    <xsl:value-of select="$altova:nTableWidthTw_7 div $altova:nSumColumnWidthsTw_7"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_7" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_7_0" select="round(0.21 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_1" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_2" select="round(2.15 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_3" select="round(0.14 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_4" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_5" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_6" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_7" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:variable name="altova:nColumnWidthTw_7_8" select="round(0.63 * 1440 * $altova:TableWidthFactor_7)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle7">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_7)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_7"/>
            <xsl:text>\ts29\ts30\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend7">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend7">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle27">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_2 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col1_AfterColumn + $altova:nColumnWidthTw_7_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_3 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col2_AfterColumn + $altova:nColumnWidthTw_7_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_4 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col3_AfterColumn + $altova:nColumnWidthTw_7_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_5 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col4_AfterColumn + $altova:nColumnWidthTw_7_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_6 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col5_AfterColumn + $altova:nColumnWidthTw_7_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_7 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col6_AfterColumn + $altova:nColumnWidthTw_7_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_8 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col7_AfterColumn + $altova:nColumnWidthTw_7_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle7"/>
            <xsl:value-of select="$altova:RowStyle27"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>naam kandidaat</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A: aantal stemmen per provincie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>totaal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle7"/>
        <xsl:value-of select="$altova:RowStyle27"/>
        <xsl:value-of select="$rowend7"/>
        <xsl:variable name="altova:RowStyle28">
            <xsl:text>\trrh274\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_2 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col1_AfterColumn + $altova:nColumnWidthTw_7_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_3 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col2_AfterColumn + $altova:nColumnWidthTw_7_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_4 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col3_AfterColumn + $altova:nColumnWidthTw_7_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_5 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col4_AfterColumn + $altova:nColumnWidthTw_7_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_6 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col5_AfterColumn + $altova:nColumnWidthTw_7_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_7 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col6_AfterColumn + $altova:nColumnWidthTw_7_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_8 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col7_AfterColumn + $altova:nColumnWidthTw_7_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle7"/>
            <xsl:value-of select="$altova:RowStyle28"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0 and count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 2]/rg:VotesInElectoralDistrict) &gt; 1">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B: gelden voor</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle7"/>
        <xsl:value-of select="$altova:RowStyle28"/>
        <xsl:value-of select="$rowend7"/>
        <xsl:variable name="altova:RowStyle29">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_2 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col1_AfterColumn + $altova:nColumnWidthTw_7_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_3 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col2_AfterColumn + $altova:nColumnWidthTw_7_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col3_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_4 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col3_AfterColumn + $altova:nColumnWidthTw_7_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_5 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col4_AfterColumn + $altova:nColumnWidthTw_7_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_6 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col5_AfterColumn + $altova:nColumnWidthTw_7_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_7 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col6_AfterColumn + $altova:nColumnWidthTw_7_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_7_8 = $altova:nDefaultColumnWidthTw_7">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl7_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col7_AfterColumn + $altova:nColumnWidthTw_7_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle7"/>
            <xsl:value-of select="$altova:RowStyle29"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl-1320\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend7"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle7"/>
        <xsl:value-of select="$altova:RowStyle29"/>
        <xsl:value-of select="$rowend7"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle30">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_2 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col1_AfterColumn + $altova:nColumnWidthTw_7_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_3 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col2_AfterColumn + $altova:nColumnWidthTw_7_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_4 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col3_AfterColumn + $altova:nColumnWidthTw_7_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_5 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col4_AfterColumn + $altova:nColumnWidthTw_7_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_6 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col5_AfterColumn + $altova:nColumnWidthTw_7_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_7 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col6_AfterColumn + $altova:nColumnWidthTw_7_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_8 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col7_AfterColumn + $altova:nColumnWidthTw_7_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle7"/>
                <xsl:value-of select="$altova:RowStyle30"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateInTable">
                <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) + ($altova:nColumnWidthTw_7_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle7"/>
            <xsl:value-of select="$altova:RowStyle30"/>
            <xsl:value-of select="$rowend7"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=1 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle31">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_2 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col1_AfterColumn + $altova:nColumnWidthTw_7_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_3 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col2_AfterColumn + $altova:nColumnWidthTw_7_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_4 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col3_AfterColumn + $altova:nColumnWidthTw_7_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_5 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col4_AfterColumn + $altova:nColumnWidthTw_7_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_6 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col5_AfterColumn + $altova:nColumnWidthTw_7_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_7 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col6_AfterColumn + $altova:nColumnWidthTw_7_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_7_8 = $altova:nDefaultColumnWidthTw_7">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl7_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col7_AfterColumn + $altova:nColumnWidthTw_7_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle7"/>
                <xsl:value-of select="$altova:RowStyle31"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend7"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle7"/>
            <xsl:value-of select="$altova:RowStyle31"/>
            <xsl:value-of select="$rowend7"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult-EK-1-5">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_9" select="."/>
        <xsl:variable name="altova:nTableWidthIn_8" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_8" select="$altova:nTableWidthIn_8 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_8" select="round($altova:nTableWidthTw_8 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_8" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_8" select="round(9004.50)"/>
        <xsl:variable name="altova:TableWidthFactor_8">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_8 &gt; $altova:nTableWidthTw_8">
                    <xsl:value-of select="$altova:nTableWidthTw_8 div $altova:nSumColumnWidthsTw_8"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_8" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_8_0" select="round(0.21 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_1" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_2" select="round(2.15 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_3" select="round(0.14 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_4" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_5" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_6" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_7" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:variable name="altova:nColumnWidthTw_8_8" select="round(0.63 * 1440 * $altova:TableWidthFactor_8)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle8">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_8)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_8"/>
            <xsl:text>\ts31\ts32\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend8">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend8">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle32">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_2 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col1_AfterColumn + $altova:nColumnWidthTw_8_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_3 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col2_AfterColumn + $altova:nColumnWidthTw_8_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_4 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col3_AfterColumn + $altova:nColumnWidthTw_8_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_5 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col4_AfterColumn + $altova:nColumnWidthTw_8_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_6 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col5_AfterColumn + $altova:nColumnWidthTw_8_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_7 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col6_AfterColumn + $altova:nColumnWidthTw_8_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_8 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col7_AfterColumn + $altova:nColumnWidthTw_8_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle32"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>naam kandidaat</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A: aantal stemmen per provincie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle8"/>
        <xsl:value-of select="$altova:RowStyle32"/>
        <xsl:value-of select="$rowend8"/>
        <xsl:variable name="altova:RowStyle33">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_2 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col1_AfterColumn + $altova:nColumnWidthTw_8_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_3 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col2_AfterColumn + $altova:nColumnWidthTw_8_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_4 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col3_AfterColumn + $altova:nColumnWidthTw_8_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_5 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col4_AfterColumn + $altova:nColumnWidthTw_8_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_6 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col5_AfterColumn + $altova:nColumnWidthTw_8_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_7 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col6_AfterColumn + $altova:nColumnWidthTw_8_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_8 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col7_AfterColumn + $altova:nColumnWidthTw_8_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle33"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0 and count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 2]/rg:VotesInElectoralDistrict) &gt; 1">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B: gelden voor</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle8"/>
        <xsl:value-of select="$altova:RowStyle33"/>
        <xsl:value-of select="$rowend8"/>
        <xsl:variable name="altova:RowStyle34">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_2 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col1_AfterColumn + $altova:nColumnWidthTw_8_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_3 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col2_AfterColumn + $altova:nColumnWidthTw_8_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col3_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_4 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col3_AfterColumn + $altova:nColumnWidthTw_8_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_5 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col4_AfterColumn + $altova:nColumnWidthTw_8_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_6 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col5_AfterColumn + $altova:nColumnWidthTw_8_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_7 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col6_AfterColumn + $altova:nColumnWidthTw_8_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_8_8 = $altova:nDefaultColumnWidthTw_8">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl8_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col7_AfterColumn + $altova:nColumnWidthTw_8_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle34"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl-1320\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="position" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend8"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle8"/>
        <xsl:value-of select="$altova:RowStyle34"/>
        <xsl:value-of select="$rowend8"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle35">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_2 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col1_AfterColumn + $altova:nColumnWidthTw_8_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_3 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col2_AfterColumn + $altova:nColumnWidthTw_8_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_4 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col3_AfterColumn + $altova:nColumnWidthTw_8_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_5 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col4_AfterColumn + $altova:nColumnWidthTw_8_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_6 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col5_AfterColumn + $altova:nColumnWidthTw_8_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_7 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col6_AfterColumn + $altova:nColumnWidthTw_8_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_8 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col7_AfterColumn + $altova:nColumnWidthTw_8_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle8"/>
                <xsl:value-of select="$altova:RowStyle35"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateInTable">
                <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) + ($altova:nColumnWidthTw_8_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle35"/>
            <xsl:value-of select="$rowend8"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=1 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle36">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_2 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col1_AfterColumn + $altova:nColumnWidthTw_8_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_3 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col2_AfterColumn + $altova:nColumnWidthTw_8_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_4 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col3_AfterColumn + $altova:nColumnWidthTw_8_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_5 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col4_AfterColumn + $altova:nColumnWidthTw_8_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_6 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col5_AfterColumn + $altova:nColumnWidthTw_8_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_7 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col6_AfterColumn + $altova:nColumnWidthTw_8_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_8_8 = $altova:nDefaultColumnWidthTw_8">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl8_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col7_AfterColumn + $altova:nColumnWidthTw_8_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle8"/>
                <xsl:value-of select="$altova:RowStyle36"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend8"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle8"/>
            <xsl:value-of select="$altova:RowStyle36"/>
            <xsl:value-of select="$rowend8"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult-EK-6-12">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_10" select="."/>
        <xsl:variable name="altova:nTableWidthIn_9" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_9" select="$altova:nTableWidthIn_9 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_9" select="round($altova:nTableWidthTw_9 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_9" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_9" select="round(9165.00)"/>
        <xsl:variable name="altova:TableWidthFactor_9">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_9 &gt; $altova:nTableWidthTw_9">
                    <xsl:value-of select="$altova:nTableWidthTw_9 div $altova:nSumColumnWidthsTw_9"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_9" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_9_0" select="round(0.56 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_1" select="round(0.14 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_2" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_3" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_4" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_5" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_6" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_7" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_8" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:variable name="altova:nColumnWidthTw_9_9" select="round(0.71 * 1440 * $altova:TableWidthFactor_9)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle9">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_9)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_9"/>
            <xsl:text>\ts33\ts34\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend9">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend9">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle37">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_4 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col3_AfterColumn + $altova:nColumnWidthTw_9_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_5 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col4_AfterColumn + $altova:nColumnWidthTw_9_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_6 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col5_AfterColumn + $altova:nColumnWidthTw_9_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_7 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col6_AfterColumn + $altova:nColumnWidthTw_9_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_8 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col7_AfterColumn + $altova:nColumnWidthTw_9_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col8_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_9 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col8_AfterColumn + $altova:nColumnWidthTw_9_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle37"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0 and count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 2]/rg:VotesInElectoralDistrict) &gt; 1">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A: aantal stemmen per provincie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Totaal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle9"/>
        <xsl:value-of select="$altova:RowStyle37"/>
        <xsl:value-of select="$rowend9"/>
        <xsl:variable name="altova:RowStyle38">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_4 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col3_AfterColumn + $altova:nColumnWidthTw_9_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_5 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col4_AfterColumn + $altova:nColumnWidthTw_9_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_6 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col5_AfterColumn + $altova:nColumnWidthTw_9_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_7 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col6_AfterColumn + $altova:nColumnWidthTw_9_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_8 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col7_AfterColumn + $altova:nColumnWidthTw_9_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col8_AfterColumn)"/>
            <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_9 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col8_AfterColumn + $altova:nColumnWidthTw_9_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle38"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0 and count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 2]/rg:VotesInElectoralDistrict) &gt; 1">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B: gelden voor</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle9"/>
        <xsl:value-of select="$altova:RowStyle38"/>
        <xsl:value-of select="$rowend9"/>
        <xsl:variable name="altova:RowStyle39">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_4 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col3_AfterColumn + $altova:nColumnWidthTw_9_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_5 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col4_AfterColumn + $altova:nColumnWidthTw_9_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_6 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col5_AfterColumn + $altova:nColumnWidthTw_9_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_7 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col6_AfterColumn + $altova:nColumnWidthTw_9_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_8 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col7_AfterColumn + $altova:nColumnWidthTw_9_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col8_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_9_9 = $altova:nDefaultColumnWidthTw_9">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl9_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col8_AfterColumn + $altova:nColumnWidthTw_9_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle39"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl-1320\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_2 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="6"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="ProvinceNameByPosition">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="7"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend9"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle9"/>
        <xsl:value-of select="$altova:RowStyle39"/>
        <xsl:value-of select="$rowend9"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle40">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_4 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col3_AfterColumn + $altova:nColumnWidthTw_9_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_5 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col4_AfterColumn + $altova:nColumnWidthTw_9_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_6 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col5_AfterColumn + $altova:nColumnWidthTw_9_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_7 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col6_AfterColumn + $altova:nColumnWidthTw_9_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_8 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col7_AfterColumn + $altova:nColumnWidthTw_9_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_9 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col8_AfterColumn + $altova:nColumnWidthTw_9_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col9_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle9"/>
                <xsl:value-of select="$altova:RowStyle40"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>A</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>B</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="8"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle40"/>
            <xsl:value-of select="$rowend9"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=2 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle41">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_4 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col3_AfterColumn + $altova:nColumnWidthTw_9_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_5 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col4_AfterColumn + $altova:nColumnWidthTw_9_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_6 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col5_AfterColumn + $altova:nColumnWidthTw_9_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_7 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col6_AfterColumn + $altova:nColumnWidthTw_9_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_8 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col7_AfterColumn + $altova:nColumnWidthTw_9_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_9_9 = $altova:nDefaultColumnWidthTw_9">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl9_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col8_AfterColumn + $altova:nColumnWidthTw_9_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col9_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle9"/>
                <xsl:value-of select="$altova:RowStyle41"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="8"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="weighted" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_9_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend9"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle9"/>
            <xsl:value-of select="$altova:RowStyle41"/>
            <xsl:value-of select="$rowend9"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="ProvinceNameByPosition">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:choose>
                        <xsl:when test="$alle = 1 and @id = &apos;alle&apos;">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Totaal</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>aantal</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>stemmen</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:when test="position() = $position and @id != &apos;alle&apos;">
                            <xsl:call-template name="ProvinceNameEK">
                                <xsl:with-param name="id" select="@id"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCandidateListsPS2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_11" select="."/>
        <xsl:variable name="altova:nTableWidthIn_10" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_10" select="$altova:nTableWidthIn_10 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_10" select="round($altova:nTableWidthTw_10 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_10" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_10" select="round(6363.00)"/>
        <xsl:variable name="altova:TableWidthFactor_10">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_10 &gt; $altova:nTableWidthTw_10">
                    <xsl:value-of select="($altova:nTableWidthTw_10 - $altova:SumDefaultColumnsForWideTableTw_10) div $altova:nSumColumnWidthsTw_10"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_10" select="round(4)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_10">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_10 = 0">
                    <xsl:value-of select="round(4)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_10"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_10">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_10 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_10 div $altova:nColumnsWithDefaultWidthNotZero_10"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_10 - $altova:nSumColumnWidthsTw_10) div $altova:nColumnsWithDefaultWidthNotZero_10)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_10_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_1" select="round(0.94 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_2" select="round(1.94 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_3" select="round(0.42 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_4" select="round(0.42 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_5" select="round(0.42 * 1440 * $altova:TableWidthFactor_10)"/>
        <xsl:variable name="altova:nColumnWidthTw_10_6" select="$altova:nDefaultColumnWidthTw_10"/>
        <xsl:variable name="altova:nColumnWidthTw_10_7" select="$altova:nDefaultColumnWidthTw_10"/>
        <xsl:variable name="altova:nColumnWidthTw_10_8" select="$altova:nDefaultColumnWidthTw_10"/>
        <xsl:variable name="altova:nColumnWidthTw_10_9" select="$altova:nDefaultColumnWidthTw_10"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle10">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_10)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_10"/>
            <xsl:text>\ts35\ts36\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend10">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend10">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle42">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_2 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col1_AfterColumn + $altova:nColumnWidthTw_10_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_3 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col2_AfterColumn + $altova:nColumnWidthTw_10_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_4 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col3_AfterColumn + $altova:nColumnWidthTw_10_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_5 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col4_AfterColumn + $altova:nColumnWidthTw_10_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_6 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col5_AfterColumn + $altova:nColumnWidthTw_10_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_7 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col6_AfterColumn + $altova:nColumnWidthTw_10_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_8 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col7_AfterColumn + $altova:nColumnWidthTw_10_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_9 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col8_AfterColumn + $altova:nColumnWidthTw_10_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle42"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijstnr.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aanduiding</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Ingeleverd</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Kieskring</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle10"/>
        <xsl:value-of select="$altova:RowStyle42"/>
        <xsl:value-of select="$rowend10"/>
        <xsl:variable name="altova:RowStyle43">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_2 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col1_AfterColumn + $altova:nColumnWidthTw_10_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_3 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col2_AfterColumn + $altova:nColumnWidthTw_10_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_4 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col3_AfterColumn + $altova:nColumnWidthTw_10_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:text>\cltxbtlr</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_5 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col4_AfterColumn + $altova:nColumnWidthTw_10_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col5_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_6 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col5_AfterColumn + $altova:nColumnWidthTw_10_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col6_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_7 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col6_AfterColumn + $altova:nColumnWidthTw_10_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_8 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col7_AfterColumn + $altova:nColumnWidthTw_10_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col8_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_9 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col8_AfterColumn + $altova:nColumnWidthTw_10_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle43"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl-1940\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep (gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstengroep</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>(niet</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>gelijkluidende</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijsten)</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>zichzelf</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>staande</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf140\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>t</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="1"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="2"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="3"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="CandidateListSubmittedHeader">
            <xsl:with-param name="districtId" select="4"/>
            <xsl:with-param name="smaller" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle10"/>
        <xsl:value-of select="$altova:RowStyle43"/>
        <xsl:value-of select="$rowend10"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
            <xsl:sort select="rg:CandidateListName/@Id" data-type="number" order="ascending"/>
            <xsl:variable name="altova:RowStyle44">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_2 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col1_AfterColumn + $altova:nColumnWidthTw_10_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_3 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col2_AfterColumn + $altova:nColumnWidthTw_10_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_4 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col3_AfterColumn + $altova:nColumnWidthTw_10_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_5 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col4_AfterColumn + $altova:nColumnWidthTw_10_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_6 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col5_AfterColumn + $altova:nColumnWidthTw_10_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_7 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col6_AfterColumn + $altova:nColumnWidthTw_10_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_8 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col7_AfterColumn + $altova:nColumnWidthTw_10_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_9 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col8_AfterColumn + $altova:nColumnWidthTw_10_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col9_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle10"/>
                <xsl:value-of select="$altova:RowStyle44"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="rg:CandidateListName/eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                    <xsl:choose>
                        <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="rg:CandidateListName">
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="eml:RegisteredName">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_1 div 1440) + ($altova:nColumnWidthTw_10_2 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="rg:CandidateListName">
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="eml:RegisteredName">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_1 div 1440) + ($altova:nColumnWidthTw_10_2 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24\f0\fs24</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cf140\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>invisible</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;stel gelijkluidende lijsten&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;lijstengroep&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;op zichzelf staande lijst&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="1"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="2"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="3"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="4"/>
                <xsl:with-param name="smaller" select="0"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle44"/>
            <xsl:value-of select="$rowend10"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle45">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_2 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col1_AfterColumn + $altova:nColumnWidthTw_10_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_3 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col2_AfterColumn + $altova:nColumnWidthTw_10_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_4 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col3_AfterColumn + $altova:nColumnWidthTw_10_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_5 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col4_AfterColumn + $altova:nColumnWidthTw_10_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_6 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col5_AfterColumn + $altova:nColumnWidthTw_10_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_7 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col6_AfterColumn + $altova:nColumnWidthTw_10_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_8 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col7_AfterColumn + $altova:nColumnWidthTw_10_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_10_9 = $altova:nDefaultColumnWidthTw_10">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl10_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col8_AfterColumn + $altova:nColumnWidthTw_10_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col9_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle45"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend10"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle10"/>
        <xsl:value-of select="$altova:RowStyle45"/>
        <xsl:value-of select="$rowend10"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateListsEK">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_12" select="."/>
        <xsl:variable name="altova:nTableWidthIn_11" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_11" select="$altova:nTableWidthIn_11 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_11" select="round($altova:nTableWidthTw_11 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_11" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_11" select="round(9388.50)"/>
        <xsl:variable name="altova:TableWidthFactor_11">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_11 &gt; $altova:nTableWidthTw_11">
                    <xsl:value-of select="$altova:nTableWidthTw_11 div $altova:nSumColumnWidthsTw_11"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_11" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_11_0" select="round(0.39 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_1" select="round(2.08 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_2" select="round(0.35 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_3" select="round(0.35 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_4" select="round(0.35 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_5" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_6" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_7" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_8" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_9" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_10" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_11" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_12" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_13" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_14" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_15" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:variable name="altova:nColumnWidthTw_11_16" select="round(0.25 * 1440 * $altova:TableWidthFactor_11)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle11">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_11)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_11"/>
            <xsl:text>\ts37\ts38\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend11">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend11">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:for-each select="rg:ElectoralDistrictsOverview">
            <xsl:variable name="altova:RowStyle46">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_4 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col3_AfterColumn + $altova:nColumnWidthTw_11_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clmgf\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_5 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col4_AfterColumn + $altova:nColumnWidthTw_11_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_6 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col5_AfterColumn + $altova:nColumnWidthTw_11_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_7 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col6_AfterColumn + $altova:nColumnWidthTw_11_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_8 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col7_AfterColumn + $altova:nColumnWidthTw_11_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col8_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_9 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col8_AfterColumn + $altova:nColumnWidthTw_11_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col9_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_10 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col9_AfterColumn + $altova:nColumnWidthTw_11_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col10_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_11 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col10_AfterColumn + $altova:nColumnWidthTw_11_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col11_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_12 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col11_AfterColumn + $altova:nColumnWidthTw_11_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col12_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_13 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col12_AfterColumn + $altova:nColumnWidthTw_11_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col13_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_14 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col13_AfterColumn + $altova:nColumnWidthTw_11_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col14_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_15 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col14_AfterColumn + $altova:nColumnWidthTw_11_15"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col15_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_16 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col15_AfterColumn + $altova:nColumnWidthTw_11_16"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col16_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle11"/>
                <xsl:value-of select="$altova:RowStyle46"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstnr.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aanduiding</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>ingeleverd</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>provincie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle46"/>
            <xsl:value-of select="$rowend11"/>
            <xsl:variable name="altova:RowStyle47">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_4 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col3_AfterColumn + $altova:nColumnWidthTw_11_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col4_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_5 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col4_AfterColumn + $altova:nColumnWidthTw_11_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col5_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_6 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col5_AfterColumn + $altova:nColumnWidthTw_11_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col6_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_7 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col6_AfterColumn + $altova:nColumnWidthTw_11_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col7_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_8 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col7_AfterColumn + $altova:nColumnWidthTw_11_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col8_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_9 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col8_AfterColumn + $altova:nColumnWidthTw_11_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col9_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_10 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col9_AfterColumn + $altova:nColumnWidthTw_11_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col10_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_11 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col10_AfterColumn + $altova:nColumnWidthTw_11_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col11_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_12 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col11_AfterColumn + $altova:nColumnWidthTw_11_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col12_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_13 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col12_AfterColumn + $altova:nColumnWidthTw_11_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col13_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_14 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col13_AfterColumn + $altova:nColumnWidthTw_11_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col14_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_15 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col14_AfterColumn + $altova:nColumnWidthTw_11_15"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col15_AfterColumn)"/>
                <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:text>\cltxbtlr</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_16 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col15_AfterColumn + $altova:nColumnWidthTw_11_16"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col16_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle11"/>
                <xsl:value-of select="$altova:RowStyle47"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl-1940\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>  </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstengroep</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>(gelijkluidende lijsten)</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstengroep</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>(niet</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>gelijkluidende</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijsten)</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>op</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>zichzelf</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>staande</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\cf140\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>t</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijst</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_15 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ProvinceNameEK">
                <xsl:with-param name="id" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_16 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle47"/>
            <xsl:value-of select="$rowend11"/>
        </xsl:for-each>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts">
            <xsl:sort select="rg:CandidateListName/@Id" data-type="number" order="ascending"/>
            <xsl:variable name="altova:RowStyle48">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_4 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col3_AfterColumn + $altova:nColumnWidthTw_11_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_5 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col4_AfterColumn + $altova:nColumnWidthTw_11_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_6 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col5_AfterColumn + $altova:nColumnWidthTw_11_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_7 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col6_AfterColumn + $altova:nColumnWidthTw_11_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_8 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col7_AfterColumn + $altova:nColumnWidthTw_11_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_9 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col8_AfterColumn + $altova:nColumnWidthTw_11_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_10 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col9_AfterColumn + $altova:nColumnWidthTw_11_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_11 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col10_AfterColumn + $altova:nColumnWidthTw_11_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_12 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col11_AfterColumn + $altova:nColumnWidthTw_11_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_13 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col12_AfterColumn + $altova:nColumnWidthTw_11_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_14 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col13_AfterColumn + $altova:nColumnWidthTw_11_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col14_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_15 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col15_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col14_AfterColumn + $altova:nColumnWidthTw_11_15"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col15_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf47\brdrw15\clbrdrb\brdrs\brdrcf47\brdrw15\clbrdrl\brdrs\brdrcf47\brdrw15\clbrdrr\brdrs\brdrcf47\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_11_16 = $altova:nDefaultColumnWidthTw_11">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl11_Col16_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col15_AfterColumn + $altova:nColumnWidthTw_11_16"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col16_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle11"/>
                <xsl:value-of select="$altova:RowStyle48"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:CandidateListName">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="rg:CandidateListName/eml:AffiliationIdentifier/eml:RegisteredName != &apos;&apos;">
                    <xsl:choose>
                        <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="rg:CandidateListName">
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="eml:RegisteredName">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_1 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs18\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="rg:CandidateListName">
                                <xsl:for-each select="eml:AffiliationIdentifier">
                                    <xsl:for-each select="eml:RegisteredName">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_1 div 1440) - 0.01042 - 0.01042"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\f0\fs24\f0\fs24</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\cf140\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>invisible</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;stel gelijkluidende lijsten&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;lijstengroep&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="./rg:Type[text() = &quot;op zichzelf staande lijst&quot;]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_15 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateListSubmitted">
                <xsl:with-param name="districtId" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_16 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend11"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle11"/>
            <xsl:value-of select="$altova:RowStyle48"/>
            <xsl:value-of select="$rowend11"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewElectoralDistricts">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:RG520">
            <xsl:for-each select="rg:ElectoralDistrictsOverview">
                <xsl:variable name="altova:CurrContextGrid_13" select="."/>
                <xsl:variable name="altova:nTableWidthIn_12" select="$altova:nMaxWidthIn * 0.90000"/>
                <xsl:variable name="altova:nTableWidthTw_12" select="$altova:nTableWidthIn_12 * 1440"/>
                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_12" select="round($altova:nTableWidthTw_12 * 0.25)"/>
                <xsl:variable name="altova:nTableIndentTw_12" select="0"/>
                <xsl:variable name="altova:nSumColumnWidthsTw_12" select="round(1100.50)"/>
                <xsl:variable name="altova:TableWidthFactor_12">
                    <xsl:choose>
                        <xsl:when test="$altova:nSumColumnWidthsTw_12 &gt; $altova:nTableWidthTw_12">
                            <xsl:value-of select="($altova:nTableWidthTw_12 - $altova:SumDefaultColumnsForWideTableTw_12) div $altova:nSumColumnWidthsTw_12"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="1"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnsWithDefaultWidth_12" select="round(1)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_12">
                    <xsl:choose>
                        <xsl:when test="$altova:nColumnsWithDefaultWidth_12 = 0">
                            <xsl:value-of select="round(1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_12"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nDefaultColumnWidthTw_12">
                    <xsl:choose>
                        <xsl:when test="$altova:TableWidthFactor_12 &lt; 1">
                            <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_12 div $altova:nColumnsWithDefaultWidthNotZero_12"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="round(($altova:nTableWidthTw_12 - $altova:nSumColumnWidthsTw_12) div $altova:nColumnsWithDefaultWidthNotZero_12)"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnWidthTw_12_0" select="round(0.76 * 1440 * $altova:TableWidthFactor_12)"/>
                <xsl:variable name="altova:nColumnWidthTw_12_1" select="$altova:nDefaultColumnWidthTw_12"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:variable name="tablestyle12">
                    <xsl:text>\trowd</xsl:text>
                    <xsl:text>\trautofit1</xsl:text>
                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                    <xsl:value-of select="round($altova:nTableWidthTw_12)"/>
                    <xsl:text>\trleft</xsl:text>
                    <xsl:value-of select="$altova:nTableIndentTw_12"/>
                    <xsl:text>\ts39\ts40\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
                </xsl:variable>
                <xsl:variable name="rowend12">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\row\pard</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="cellend12">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\cell</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestcell</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:RowStyle49">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl12" select="$altova:nTableIndentTw_12"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_12_0 = $altova:nDefaultColumnWidthTw_12">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl12_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl12 + $altova:nColumnWidthTw_12_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_12_1 = $altova:nDefaultColumnWidthTw_12">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl12_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col0_AfterColumn + $altova:nColumnWidthTw_12_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col1_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle12"/>
                    <xsl:value-of select="$altova:RowStyle49"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs20 </xsl:text>
                <xsl:for-each select="rg:ElectoralDistrictName">
                    <xsl:choose>
                        <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs20\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="position()"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>.</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="position()"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>.</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\par </xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend12"/>
                <xsl:text>\ql\sl0\f1\fs20 </xsl:text>
                <xsl:for-each select="rg:ElectoralDistrictName">
                    <xsl:choose>
                        <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                            <xsl:text>\pard</xsl:text>
                            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                            <xsl:text>\itap</xsl:text>
                            <xsl:value-of select="$templatetablelevel + 1"/>
                            <xsl:text>\ql\sl0\f1\fs20\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_12_1 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\f0\fs24</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_12_1 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\par </xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend12"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle12"/>
                <xsl:value-of select="$altova:RowStyle49"/>
                <xsl:value-of select="$rowend12"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewCheckedLists">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:CheckingCombinedLists">
            <xsl:variable name="altova:CurrContextGrid_14" select="."/>
            <xsl:variable name="altova:nTableWidthIn_13" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_13" select="$altova:nTableWidthIn_13 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_13" select="round($altova:nTableWidthTw_13 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_13" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_13" select="round(9602.50)"/>
            <xsl:variable name="altova:TableWidthFactor_13">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_13 &gt; $altova:nTableWidthTw_13">
                        <xsl:value-of select="$altova:nTableWidthTw_13 div $altova:nSumColumnWidthsTw_13"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_13" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_13_0" select="round(1.11 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_1" select="round(1.11 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_2" select="round(1.11 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_3" select="round(1.67 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:variable name="altova:nColumnWidthTw_13_4" select="round(1.67 * 1440 * $altova:TableWidthFactor_13)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle13">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_13"/>
                <xsl:text>\ts41\ts42\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend13">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend13">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle50">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_2 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col1_AfterColumn + $altova:nColumnWidthTw_13_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_3 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col2_AfterColumn + $altova:nColumnWidthTw_13_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_13_4 = $altova:nDefaultColumnWidthTw_13">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl13_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col3_AfterColumn + $altova:nColumnWidthTw_13_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle13"/>
                <xsl:value-of select="$altova:RowStyle50"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\ri480\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>letter lijstencombinatie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\ri480\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstnummers</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\ri240\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>stemcijfers van de lijsten</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijsten die voor de combinatie in aanmerking zijn genomen</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen in aanmerking genomen lijstencombinatie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend13"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle13"/>
            <xsl:value-of select="$altova:RowStyle50"/>
            <xsl:value-of select="$rowend13"/>
            <xsl:for-each select="rg:CheckingCombinedListsLine">
                <xsl:variable name="altova:RowStyle51">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_2 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col1_AfterColumn + $altova:nColumnWidthTw_13_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_3 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col2_AfterColumn + $altova:nColumnWidthTw_13_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_13_4 = $altova:nDefaultColumnWidthTw_13">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl13_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col3_AfterColumn + $altova:nColumnWidthTw_13_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col4_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle13"/>
                    <xsl:value-of select="$altova:RowStyle51"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\qr\sl0\ri480\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:CombinedListId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_0 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\qr\sl0\ri480\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:NumberList">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_1 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\qr\sl0\ri240\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:NumberOfVotesList">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_2 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\qr\sl0\ri960\f1\fs18 </xsl:text>
                <xsl:if test="rg:Regarded = &quot;true&quot;">
                    <xsl:for-each select="rg:NumberList">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_3 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:text>\qr\sl0\ri720\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:NumberOfVotesCombinedList">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_4 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend13"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle13"/>
                <xsl:value-of select="$altova:RowStyle51"/>
                <xsl:value-of select="$rowend13"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewFirstAssigment">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isEK" select="0"/>
        <xsl:for-each select="rg:FirstAssignment">
            <xsl:variable name="altova:CurrContextGrid_15" select="."/>
            <xsl:variable name="altova:nTableWidthIn_14" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_14" select="$altova:nTableWidthIn_14 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_14" select="round($altova:nTableWidthTw_14 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_14" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_14" select="round(2802.00)"/>
            <xsl:variable name="altova:TableWidthFactor_14">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_14 &gt; $altova:nTableWidthTw_14">
                        <xsl:value-of select="($altova:nTableWidthTw_14 - $altova:SumDefaultColumnsForWideTableTw_14) div $altova:nSumColumnWidthsTw_14"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnsWithDefaultWidth_14" select="round(3)"/>
            <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_14">
                <xsl:choose>
                    <xsl:when test="$altova:nColumnsWithDefaultWidth_14 = 0">
                        <xsl:value-of select="round(3)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$altova:nColumnsWithDefaultWidth_14"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_14">
                <xsl:choose>
                    <xsl:when test="$altova:TableWidthFactor_14 &lt; 1">
                        <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_14 div $altova:nColumnsWithDefaultWidthNotZero_14"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="round(($altova:nTableWidthTw_14 - $altova:nSumColumnWidthsTw_14) div $altova:nColumnsWithDefaultWidthNotZero_14)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnWidthTw_14_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_14)"/>
            <xsl:variable name="altova:nColumnWidthTw_14_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_14)"/>
            <xsl:variable name="altova:nColumnWidthTw_14_2" select="$altova:nDefaultColumnWidthTw_14"/>
            <xsl:variable name="altova:nColumnWidthTw_14_3" select="round(0.28 * 1440 * $altova:TableWidthFactor_14)"/>
            <xsl:variable name="altova:nColumnWidthTw_14_4" select="$altova:nDefaultColumnWidthTw_14"/>
            <xsl:variable name="altova:nColumnWidthTw_14_5" select="round(0.28 * 1440 * $altova:TableWidthFactor_14)"/>
            <xsl:variable name="altova:nColumnWidthTw_14_6" select="$altova:nDefaultColumnWidthTw_14"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle14">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_14"/>
                <xsl:text>\ts43\ts44\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend14">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend14">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle52">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14" select="$altova:nTableIndentTw_14"/>
                <xsl:text>\clvertalt\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_0 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl14 + $altova:nColumnWidthTw_14_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_1 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col0_AfterColumn + $altova:nColumnWidthTw_14_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_2 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col1_AfterColumn + $altova:nColumnWidthTw_14_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_3 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col2_AfterColumn + $altova:nColumnWidthTw_14_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_4 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col3_AfterColumn + $altova:nColumnWidthTw_14_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_5 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col4_AfterColumn + $altova:nColumnWidthTw_14_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_14_6 = $altova:nDefaultColumnWidthTw_14">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl14_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col5_AfterColumn + $altova:nColumnWidthTw_14_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col6_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle14"/>
                <xsl:value-of select="$altova:RowStyle52"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstnummer</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:if test="$isEK = 0">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>:</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>kiesdeler</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>=</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal volle zetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend14"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle14"/>
            <xsl:value-of select="$altova:RowStyle52"/>
            <xsl:value-of select="$rowend14"/>
            <xsl:for-each select="rg:FirstAssignmentLine">
                <xsl:variable name="altova:RowStyle53">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14" select="$altova:nTableIndentTw_14"/>
                    <xsl:text>\clvertalc\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_0 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl14 + $altova:nColumnWidthTw_14_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_1 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col0_AfterColumn + $altova:nColumnWidthTw_14_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_2 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col1_AfterColumn + $altova:nColumnWidthTw_14_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_3 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col2_AfterColumn + $altova:nColumnWidthTw_14_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_4 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col3_AfterColumn + $altova:nColumnWidthTw_14_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col4_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_5 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col4_AfterColumn + $altova:nColumnWidthTw_14_5"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col5_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_14_6 = $altova:nDefaultColumnWidthTw_14">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl14_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col5_AfterColumn + $altova:nColumnWidthTw_14_6"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col6_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle14"/>
                    <xsl:value-of select="$altova:RowStyle53"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:ListOrCombinedList">
                    <xsl:for-each select="@combinationId">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="@listNumber">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:if test="count(rg:ListOrCombinedList/rg:ListInCombination) &gt;0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:ListOrCombinedList">
                        <xsl:for-each select="rg:ListInCombination">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_14_1 div 1440) - 0.06944 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:if test="position() != last()">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>, </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="//kr:ElectionSubcategory[text()= &apos;PS2&apos; or text()= &apos;TK&apos;]">
                        <xsl:for-each select="rg:ListOrCombinedList">
                            <xsl:if test="@districtNumber">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(Kieskring </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@districtNumber">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="//kr:ElectionSubcategory[text()= &apos;EK&apos;]">
                        <xsl:for-each select="rg:ListOrCombinedList">
                            <xsl:if test="@provinceName">
                                <xsl:for-each select="@provinceName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>(</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Votes">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_14_2 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="..">
                    <xsl:for-each select="..">
                        <xsl:for-each select="rg:ElectoralQuota">
                            <xsl:call-template name="ElectionFraction">
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_14_4 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>=</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Seats">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_14_6 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend14"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle14"/>
                <xsl:value-of select="$altova:RowStyle53"/>
                <xsl:value-of select="$rowend14"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:call-template name="LineBreakTable">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:variable name="altova:CurrContextGrid_16" select="."/>
            <xsl:variable name="altova:nTableWidthIn_15" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_15" select="$altova:nTableWidthIn_15 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_15" select="round($altova:nTableWidthTw_15 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_15" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_15" select="round(6301.50)"/>
            <xsl:variable name="altova:TableWidthFactor_15">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_15 &gt; $altova:nTableWidthTw_15">
                        <xsl:value-of select="$altova:nTableWidthTw_15 div $altova:nSumColumnWidthsTw_15"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_15" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_15_0" select="round(2.78 * 1440 * $altova:TableWidthFactor_15)"/>
            <xsl:variable name="altova:nColumnWidthTw_15_1" select="round(1.39 * 1440 * $altova:TableWidthFactor_15)"/>
            <xsl:variable name="altova:nColumnWidthTw_15_2" select="round(0.21 * 1440 * $altova:TableWidthFactor_15)"/>
            <xsl:text>\par </xsl:text>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle15">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_15"/>
                <xsl:text>\ts45\ts46\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend15">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend15">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle54">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_2 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col1_AfterColumn + $altova:nColumnWidthTw_15_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col2_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle15"/>
                <xsl:value-of select="$altova:RowStyle54"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Totaal aantal zetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="rg:ResidualSeats + rg:TotalSeatsAssigned"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle54"/>
            <xsl:value-of select="$rowend15"/>
            <xsl:variable name="altova:RowStyle55">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_2 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col1_AfterColumn + $altova:nColumnWidthTw_15_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col2_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle15"/>
                <xsl:value-of select="$altova:RowStyle55"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Totaal aantal toegewezen volle zetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:TotalSeatsAssigned">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_15_1 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>–</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle55"/>
            <xsl:value-of select="$rowend15"/>
            <xsl:variable name="altova:RowStyle56">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_15_2 = $altova:nDefaultColumnWidthTw_15">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl15_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col1_AfterColumn + $altova:nColumnWidthTw_15_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col2_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle15"/>
                <xsl:value-of select="$altova:RowStyle56"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Restzetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ResidualSeats">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_15_1 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend15"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle56"/>
            <xsl:value-of select="$rowend15"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewDHondtAssignment">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="articleLoting" select="&apos;&apos;"/>
        <xsl:for-each select="rg:DHondtAssignment">
            <xsl:variable name="numberOfSteps" select="./@maxNumberOfAssignments"/>
            <xsl:choose>
                <xsl:when test="$numberOfSteps  &lt;= 2">
                    <xsl:call-template name="OverviewDHondtTable2">
                        <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="$numberOfSteps  = 3">
                    <xsl:call-template name="OverviewDHondtTable3">
                        <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:when test="$numberOfSteps  = 4">
                    <xsl:call-template name="OverviewDHondtTable4">
                        <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:call-template name="OverviewDHondtTable6">
                        <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                        <xsl:with-param name="offset" select="0"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:if test="$numberOfSteps &gt; 6">
                        <xsl:call-template name="LineBreak">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:if test="count( rg:DHondtAssignmentLine )  &gt;= 15">
                            <xsl:text>\page </xsl:text>
                        </xsl:if>
                        <xsl:call-template name="OverviewDHondtTable6">
                            <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                            <xsl:with-param name="offset" select="6"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:if test="$numberOfSteps &gt; 12">
                        <xsl:call-template name="LineBreak">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:if test="count( rg:DHondtAssignmentLine )  &gt;= 15">
                            <xsl:text>\page </xsl:text>
                        </xsl:if>
                        <xsl:call-template name="OverviewDHondtTable6">
                            <xsl:with-param name="maxNumberOfAssignments" select="$numberOfSteps"/>
                            <xsl:with-param name="offset" select="12"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="rg:Allotting">
                <xsl:text>\par </xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Overeenkomstig artikel </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="$articleLoting != &quot;&quot;">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$articleLoting"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="@article = &quot;P13&quot;">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>P 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="@article = &quot;U13&quot;">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>U 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>P 7</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, eerste lid van de Kieswet heeft een loting plaatsgevonden tussen </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:for-each select="rg:Looser">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> en </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>. Als gevolg hiervan is een restzetel toegewezen aan </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewListResult">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_17" select="."/>
        <xsl:variable name="altova:nTableWidthIn_16" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_16" select="$altova:nTableWidthIn_16 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_16" select="round($altova:nTableWidthTw_16 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_16" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_16" select="round(3401.00)"/>
        <xsl:variable name="altova:TableWidthFactor_16">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_16 &gt; $altova:nTableWidthTw_16">
                    <xsl:value-of select="($altova:nTableWidthTw_16 - $altova:SumDefaultColumnsForWideTableTw_16) div $altova:nSumColumnWidthsTw_16"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_16" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_16">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_16 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_16"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_16">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_16 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_16 div $altova:nColumnsWithDefaultWidthNotZero_16"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_16 - $altova:nSumColumnWidthsTw_16) div $altova:nColumnsWithDefaultWidthNotZero_16)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_16_0" select="$altova:nDefaultColumnWidthTw_16"/>
        <xsl:variable name="altova:nColumnWidthTw_16_1" select="round(1.25 * 1440 * $altova:TableWidthFactor_16)"/>
        <xsl:variable name="altova:nColumnWidthTw_16_2" select="round(1.11 * 1440 * $altova:TableWidthFactor_16)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle16">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth1</xsl:text>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_16"/>
            <xsl:text>\ts47\ts48\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend16">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend16">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle57">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl16" select="$altova:nTableIndentTw_16"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_16_0 = $altova:nDefaultColumnWidthTw_16">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl16_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl16 + $altova:nColumnWidthTw_16_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_16_1 = $altova:nDefaultColumnWidthTw_16">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl16_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl16_Col0_AfterColumn + $altova:nColumnWidthTw_16_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_16_2 = $altova:nDefaultColumnWidthTw_16">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl16_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl16_Col1_AfterColumn + $altova:nColumnWidthTw_16_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle16"/>
            <xsl:value-of select="$altova:RowStyle57"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aanduiding politieke groepering</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend16"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstnummer</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend16"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal zetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend16"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle16"/>
        <xsl:value-of select="$altova:RowStyle57"/>
        <xsl:value-of select="$rowend16"/>
        <xsl:for-each select="rg:OverviewOfCandidatesAndResults">
            <xsl:for-each select="rg:ListGroupAndResults">
                <xsl:sort select="rg:Seats" data-type="number" order="descending"/>
                <xsl:sort select="rg:Votes" data-type="number" order="descending"/>
                <xsl:sort select="eml:AffiliationIdentifier/@Id" data-type="number" order="ascending"/>
                <xsl:variable name="altova:RowStyle58">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl16" select="$altova:nTableIndentTw_16"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_16_0 = $altova:nDefaultColumnWidthTw_16">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl16_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl16 + $altova:nColumnWidthTw_16_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_16_1 = $altova:nDefaultColumnWidthTw_16">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl16_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl16_Col0_AfterColumn + $altova:nColumnWidthTw_16_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_16_2 = $altova:nDefaultColumnWidthTw_16">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl16_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl16_Col1_AfterColumn + $altova:nColumnWidthTw_16_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl16_Col2_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle16"/>
                    <xsl:value-of select="$altova:RowStyle58"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="PartyNamePdfWrapped">
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_16_0 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend16"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend16"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Seats">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_16_2 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend16"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle16"/>
                <xsl:value-of select="$altova:RowStyle58"/>
                <xsl:value-of select="$rowend16"/>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewListResultAndSeats">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_18" select="."/>
        <xsl:variable name="altova:nTableWidthIn_17" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_17" select="$altova:nTableWidthIn_17 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_17" select="round($altova:nTableWidthTw_17 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_17" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_17" select="round(6001.50)"/>
        <xsl:variable name="altova:TableWidthFactor_17">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_17 &gt; $altova:nTableWidthTw_17">
                    <xsl:value-of select="($altova:nTableWidthTw_17 - $altova:SumDefaultColumnsForWideTableTw_17) div $altova:nSumColumnWidthsTw_17"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_17" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_17">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_17 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_17"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_17">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_17 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_17 div $altova:nColumnsWithDefaultWidthNotZero_17"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_17 - $altova:nSumColumnWidthsTw_17) div $altova:nColumnsWithDefaultWidthNotZero_17)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_17_0" select="$altova:nDefaultColumnWidthTw_17"/>
        <xsl:variable name="altova:nColumnWidthTw_17_1" select="round(1.39 * 1440 * $altova:TableWidthFactor_17)"/>
        <xsl:variable name="altova:nColumnWidthTw_17_2" select="round(1.39 * 1440 * $altova:TableWidthFactor_17)"/>
        <xsl:variable name="altova:nColumnWidthTw_17_3" select="round(1.39 * 1440 * $altova:TableWidthFactor_17)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle17">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth1</xsl:text>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_17"/>
            <xsl:text>\ts49\ts50\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend17">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend17">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle59">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl17" select="$altova:nTableIndentTw_17"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_17_0 = $altova:nDefaultColumnWidthTw_17">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl17_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl17 + $altova:nColumnWidthTw_17_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_17_1 = $altova:nDefaultColumnWidthTw_17">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl17_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col0_AfterColumn + $altova:nColumnWidthTw_17_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_17_2 = $altova:nDefaultColumnWidthTw_17">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl17_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col1_AfterColumn + $altova:nColumnWidthTw_17_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_17_3 = $altova:nDefaultColumnWidthTw_17">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl17_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col2_AfterColumn + $altova:nColumnWidthTw_17_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col3_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle17"/>
            <xsl:value-of select="$altova:RowStyle59"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Aanduiding van de groepering</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend17"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend17"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Totaal aantal stemmen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend17"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Toegewezen aantal zetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend17"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle17"/>
        <xsl:value-of select="$altova:RowStyle59"/>
        <xsl:value-of select="$rowend17"/>
        <xsl:for-each select="rg:OverviewOfCandidatesAndResults">
            <xsl:for-each select="rg:ListGroupAndResults">
                <xsl:sort select="eml:AffiliationIdentifier/@Id" data-type="number" order="ascending"/>
                <xsl:variable name="altova:RowStyle60">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl17" select="$altova:nTableIndentTw_17"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_17_0 = $altova:nDefaultColumnWidthTw_17">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl17_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl17 + $altova:nColumnWidthTw_17_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_17_1 = $altova:nDefaultColumnWidthTw_17">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl17_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col0_AfterColumn + $altova:nColumnWidthTw_17_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_17_2 = $altova:nDefaultColumnWidthTw_17">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl17_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col1_AfterColumn + $altova:nColumnWidthTw_17_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_17_3 = $altova:nDefaultColumnWidthTw_17">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl17_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl17_Col2_AfterColumn + $altova:nColumnWidthTw_17_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl17_Col3_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle17"/>
                    <xsl:value-of select="$altova:RowStyle60"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="PartyNamePdfWrapped">
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_17_0 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend17"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend17"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Votes">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_17_2 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend17"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Seats">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_17_3 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend17"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle17"/>
                <xsl:value-of select="$altova:RowStyle60"/>
                <xsl:value-of select="$rowend17"/>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultElected">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="PublishGender" select="rg:ListAndResults[ position() = 1 ]/kr:ListData/@PublishGender"/>
        <xsl:param name="PublicationLanguage" select="rg:ListAndResults[ position() = 1 ]/kr:ListData/@PublicationLanguage"/>
        <xsl:param name="isEK" select="count(//eml:ElectionCategory[text() = &apos;EK&apos;])"/>
        <xsl:call-template name="LineBreakPdf">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="LineBreakPdf">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:for-each select="rg:DeadCandidate">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Bij de toewijzing van de zetels aan de kandidaten wordt ingevolge artikel P 19a van de Kieswet de kandidaat </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="CandidateInTable2">
                <xsl:with-param name="PublishGender" select="$PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> buiten beschouwing gelaten, aangezien deze is overleden.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="LineBreak">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:if test="position() = last()">
                <xsl:text>\par </xsl:text>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>{\f1\fs18\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>I. Met voorkeurstemmen gekozen kandidaten</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="rg:PriorityCandidate">
            <xsl:choose>
                <xsl:when test="$isEK = 0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>De volgende kandidaten zijn met voorkeurstemmen gekozen. Deze kandidaten hebben </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:if test="//kr:ElectionSubcategory[text() = &quot;TK&quot; or text() = &quot;PS2&quot;  or text() = &quot;EP&quot; or text() = &quot;EK&quot;]">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>ten minste </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                        <xsl:when test="//kr:ElectionSubcategory[ text() = &quot;GR1&quot; or text()  = &quot;BC&quot; ]">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>50% van</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:when test="//kr:ElectionSubcategory[ text()  = &quot;EP&quot; ]">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>10% van</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:when test="//kr:ElectionSubcategory[ text()  = &quot;EK&quot; or text()  = &quot;GC&quot; ]">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>of gelijk aan</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>25% van</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> de kiesdeler gehaald.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Op basis van artikel U 15 jo. artikel P 15 en artikel P 16 van de Kieswet zijn de volgende kandidaten met voorkeurstemmen gekozen. Deze kandidaten hebben de kiesdeler behaald en krijgen een zetel toegewezen.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="LineBreakRTF">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:choose>
                <xsl:when test="$isEK = 1 or rg:Type = &apos;lijstengroep&apos;">
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_19" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_18" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_18" select="$altova:nTableWidthIn_18 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_18" select="round($altova:nTableWidthTw_18 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_18" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_18" select="round(9022.00)"/>
                    <xsl:variable name="altova:TableWidthFactor_18">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_18 &gt; $altova:nTableWidthTw_18">
                                <xsl:value-of select="$altova:nTableWidthTw_18 div $altova:nSumColumnWidthsTw_18"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_18" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_18_0" select="round(2.46 * 1440 * $altova:TableWidthFactor_18)"/>
                    <xsl:variable name="altova:nColumnWidthTw_18_1" select="round(1.47 * 1440 * $altova:TableWidthFactor_18)"/>
                    <xsl:variable name="altova:nColumnWidthTw_18_2" select="round(1.36 * 1440 * $altova:TableWidthFactor_18)"/>
                    <xsl:variable name="altova:nColumnWidthTw_18_3" select="round(0.97 * 1440 * $altova:TableWidthFactor_18)"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle18">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_18)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_18"/>
                        <xsl:text>\ts51\ts52\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend18">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend18">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle61">
                        <xsl:text>\trrh0\trhdr</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl18" select="$altova:nTableIndentTw_18"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_18_0 = $altova:nDefaultColumnWidthTw_18">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl18_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl18 + $altova:nColumnWidthTw_18_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_18_1 = $altova:nDefaultColumnWidthTw_18">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl18_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col0_AfterColumn + $altova:nColumnWidthTw_18_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_18_2 = $altova:nDefaultColumnWidthTw_18">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl18_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col1_AfterColumn + $altova:nColumnWidthTw_18_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_18_3 = $altova:nDefaultColumnWidthTw_18">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl18_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col2_AfterColumn + $altova:nColumnWidthTw_18_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle18"/>
                        <xsl:value-of select="$altova:RowStyle61"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>naam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend18"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>woonplaats</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend18"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal stemmen op</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>gezamenlijke lijsten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend18"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>lijst waarop zetel</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>wordt toegewezen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend18"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle18"/>
                    <xsl:value-of select="$altova:RowStyle61"/>
                    <xsl:value-of select="$rowend18"/>
                    <xsl:for-each select="rg:PriorityCandidate">
                        <xsl:sort select="rg:Votes" data-type="number" order="descending"/>
                        <xsl:variable name="altova:RowStyle62">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl18" select="$altova:nTableIndentTw_18"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_18_0 = $altova:nDefaultColumnWidthTw_18">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl18_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl18 + $altova:nColumnWidthTw_18_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_18_1 = $altova:nDefaultColumnWidthTw_18">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl18_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col0_AfterColumn + $altova:nColumnWidthTw_18_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_18_2 = $altova:nDefaultColumnWidthTw_18">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl18_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col1_AfterColumn + $altova:nColumnWidthTw_18_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col2_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_18_3 = $altova:nDefaultColumnWidthTw_18">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl18_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl18_Col2_AfterColumn + $altova:nColumnWidthTw_18_3"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl18_Col3_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle18"/>
                            <xsl:value-of select="$altova:RowStyle62"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:call-template name="CandidateInTable2">
                            <xsl:with-param name="PublishGender" select="$PublishGender"/>
                            <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_18_0 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend18"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:call-template name="CandidateCityInTable2">
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_18_1 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend18"/>
                        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="rg:Votes">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_18_2 div 1440) - 0.01042 - 0.06944"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend18"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:choose>
                            <xsl:when test="@setNumber">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Stel </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@setNumber">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:when test="@districtNumber">
                                <xsl:choose>
                                    <xsl:when test="//eml:ElectionCategory[ text() != &quot;EK&quot; ]">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>Kieskring </xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                        <xsl:for-each select="@districtNumber">
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="string(.)"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:for-each>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:for-each select="@provinceName">
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="string(.)"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:for-each>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend18"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle18"/>
                        <xsl:value-of select="$altova:RowStyle62"/>
                        <xsl:value-of select="$rowend18"/>
                    </xsl:for-each>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_20" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_19" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_19" select="$altova:nTableWidthIn_19 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_19" select="round($altova:nTableWidthTw_19 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_19" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_19" select="round(2200.50 + 0.50 * $altova:nTableWidthTw_19)"/>
                    <xsl:variable name="altova:TableWidthFactor_19">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_19 &gt; $altova:nTableWidthTw_19">
                                <xsl:value-of select="($altova:nTableWidthTw_19 - $altova:SumDefaultColumnsForWideTableTw_19) div $altova:nSumColumnWidthsTw_19"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_19" select="round(1)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_19">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_19 = 0">
                                <xsl:value-of select="round(1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_19"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_19">
                        <xsl:choose>
                            <xsl:when test="$altova:TableWidthFactor_19 &lt; 1">
                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_19 div $altova:nColumnsWithDefaultWidthNotZero_19"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="round(($altova:nTableWidthTw_19 - $altova:nSumColumnWidthsTw_19) div $altova:nColumnsWithDefaultWidthNotZero_19)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_19_0" select="round($altova:nTableWidthTw_19 * 0.50 * $altova:TableWidthFactor_19)"/>
                    <xsl:variable name="altova:nColumnWidthTw_19_1" select="$altova:nDefaultColumnWidthTw_19"/>
                    <xsl:variable name="altova:nColumnWidthTw_19_2" select="round(1.53 * 1440 * $altova:TableWidthFactor_19)"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle19">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_19)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_19"/>
                        <xsl:text>\ts53\ts54\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend19">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend19">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle63">
                        <xsl:text>\trrh0\trhdr</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl19" select="$altova:nTableIndentTw_19"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_19_0 = $altova:nDefaultColumnWidthTw_19">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl19_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl19 + $altova:nColumnWidthTw_19_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_19_1 = $altova:nDefaultColumnWidthTw_19">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl19_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl19_Col0_AfterColumn + $altova:nColumnWidthTw_19_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_19_2 = $altova:nDefaultColumnWidthTw_19">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl19_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl19_Col1_AfterColumn + $altova:nColumnWidthTw_19_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle19"/>
                        <xsl:value-of select="$altova:RowStyle63"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>naam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend19"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>woonplaats</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend19"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend19"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle19"/>
                    <xsl:value-of select="$altova:RowStyle63"/>
                    <xsl:value-of select="$rowend19"/>
                    <xsl:for-each select="rg:PriorityCandidate">
                        <xsl:sort select="rg:Votes" data-type="number" order="descending"/>
                        <xsl:variable name="altova:RowStyle64">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl19" select="$altova:nTableIndentTw_19"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_19_0 = $altova:nDefaultColumnWidthTw_19">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl19_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl19 + $altova:nColumnWidthTw_19_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_19_1 = $altova:nDefaultColumnWidthTw_19">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl19_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl19_Col0_AfterColumn + $altova:nColumnWidthTw_19_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_19_2 = $altova:nDefaultColumnWidthTw_19">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl19_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl19_Col1_AfterColumn + $altova:nColumnWidthTw_19_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl19_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle19"/>
                            <xsl:value-of select="$altova:RowStyle64"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:call-template name="CandidateInTable2">
                            <xsl:with-param name="PublishGender" select="$PublishGender"/>
                            <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_19_0 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend19"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:call-template name="CandidateCityInTable2">
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_19_1 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend19"/>
                        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="rg:Votes">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_19_2 div 1440) - 0.01042 - 0.06944"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend19"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle19"/>
                        <xsl:value-of select="$altova:RowStyle64"/>
                        <xsl:value-of select="$rowend19"/>
                    </xsl:for-each>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="LineBreakTable">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="count( rg:ListAndResults/rg:CandidateAndResult/rg:Elected[ @byLot = &quot;true&quot; ] ) &gt; 0">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Overeenkomstig artikel P 15, eerste lid van de Kieswet heeft een loting plaatsgevonden tuss</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:ListAndResults">
                <xsl:for-each select="rg:CandidateAndResult">
                    <xsl:sort select="rg:TotalVotes" data-type="number" order="descending"/>
                    <xsl:if test="rg:Elected/@byLot = &quot;true&quot;">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:call-template name="CandidateInTable2">
                            <xsl:with-param name="PublishGender" select="$PublishGender"/>
                            <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>. Als gevolg hiervan is/zijn gekozen </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:variable name="altova:CurrContextGrid_21" select="."/>
            <xsl:variable name="altova:nTableWidthIn_20" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_20" select="$altova:nTableWidthIn_20 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_20" select="round($altova:nTableWidthTw_20 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_20" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_20" select="round(0.00 + 0.60 * $altova:nTableWidthTw_20)"/>
            <xsl:variable name="altova:TableWidthFactor_20">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_20 &gt; $altova:nTableWidthTw_20">
                        <xsl:value-of select="($altova:nTableWidthTw_20 - $altova:SumDefaultColumnsForWideTableTw_20) div $altova:nSumColumnWidthsTw_20"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnsWithDefaultWidth_20" select="round(1)"/>
            <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_20">
                <xsl:choose>
                    <xsl:when test="$altova:nColumnsWithDefaultWidth_20 = 0">
                        <xsl:value-of select="round(1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$altova:nColumnsWithDefaultWidth_20"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_20">
                <xsl:choose>
                    <xsl:when test="$altova:TableWidthFactor_20 &lt; 1">
                        <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_20 div $altova:nColumnsWithDefaultWidthNotZero_20"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="round(($altova:nTableWidthTw_20 - $altova:nSumColumnWidthsTw_20) div $altova:nColumnsWithDefaultWidthNotZero_20)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnWidthTw_20_0" select="round($altova:nTableWidthTw_20 * 0.60 * $altova:TableWidthFactor_20)"/>
            <xsl:variable name="altova:nColumnWidthTw_20_1" select="$altova:nDefaultColumnWidthTw_20"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle20">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_20)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_20"/>
                <xsl:text>\ts55\ts56\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend20">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend20">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle65">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl20" select="$altova:nTableIndentTw_20"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_20_0 = $altova:nDefaultColumnWidthTw_20">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl20_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl20 + $altova:nColumnWidthTw_20_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl20_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_20_1 = $altova:nDefaultColumnWidthTw_20">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl20_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl20_Col0_AfterColumn + $altova:nColumnWidthTw_20_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl20_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle20"/>
                <xsl:value-of select="$altova:RowStyle65"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Naam</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend20"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Woonplaats</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend20"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle20"/>
            <xsl:value-of select="$altova:RowStyle65"/>
            <xsl:value-of select="$rowend20"/>
            <xsl:for-each select="rg:ListAndResults">
                <xsl:for-each select="rg:CandidateAndResult[rg:Elected = &quot;true&quot; and rg:Elected/@byLot = &quot;true&quot;]">
                    <xsl:sort select="rg:TotalVotes" data-type="number" order="descending"/>
                    <xsl:variable name="altova:RowStyle66">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl20" select="$altova:nTableIndentTw_20"/>
                        <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_20_0 = $altova:nDefaultColumnWidthTw_20">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl20_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl20 + $altova:nColumnWidthTw_20_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl20_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_20_1 = $altova:nDefaultColumnWidthTw_20">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl20_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl20_Col0_AfterColumn + $altova:nColumnWidthTw_20_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl20_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle20"/>
                        <xsl:value-of select="$altova:RowStyle66"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:call-template name="CandidateInTable2">
                        <xsl:with-param name="PublishGender" select="$PublishGender"/>
                        <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_20_0 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend20"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:call-template name="CandidateCityInTable2">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_20_1 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend20"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle20"/>
                    <xsl:value-of select="$altova:RowStyle66"/>
                    <xsl:value-of select="$rowend20"/>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:if>
        <xsl:call-template name="LineBreakTable">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:text>{\f1\fs18\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>II. Overige gekozen kandidaten</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isEK = 0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>De overige aan de lijst toegewezen zetels gaan naar de volgende kandidaten.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Op basis van artikel U 15 jo. artikel P 17 en artikel P 18 van de Kieswet gaan de overige aan de lijst toegewezen zetels naar de volgende kandidaten:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:if test="rg:CandidatesElectedByPositionOnList/rg:CandidateElectedByPositionOnList">
            <xsl:call-template name="LineBreakPdf">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="rg:CandidatesElectedByPositionOnList">
                <xsl:if test="../rg:Type = &quot;lijstengroep&quot;">
                    <xsl:choose>
                        <xsl:when test="position() &gt; 1">
                            <xsl:text>\par </xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:call-template name="LineBreakRTF">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="@setNumber">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Stel gelijkluidende lijsten: </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="@setNumber">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="@districtNumber">
                            <xsl:choose>
                                <xsl:when test="//eml:ElectionCategory[ text() != &quot;EK&quot; ]">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Kieskring: </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:for-each select="@districtNumber">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="string(.)"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Provincie: </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:for-each select="@provinceName">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="string(.)"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:text>\par </xsl:text>
                <xsl:variable name="altova:CurrContextGrid_22" select="."/>
                <xsl:variable name="altova:nTableWidthIn_21" select="$altova:nMaxWidthIn * 1.00000"/>
                <xsl:variable name="altova:nTableWidthTw_21" select="$altova:nTableWidthIn_21 * 1440"/>
                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_21" select="round($altova:nTableWidthTw_21 * 0.25)"/>
                <xsl:variable name="altova:nTableIndentTw_21" select="0"/>
                <xsl:variable name="altova:nSumColumnWidthsTw_21" select="round(2200.50 + 0.50 * $altova:nTableWidthTw_21)"/>
                <xsl:variable name="altova:TableWidthFactor_21">
                    <xsl:choose>
                        <xsl:when test="$altova:nSumColumnWidthsTw_21 &gt; $altova:nTableWidthTw_21">
                            <xsl:value-of select="($altova:nTableWidthTw_21 - $altova:SumDefaultColumnsForWideTableTw_21) div $altova:nSumColumnWidthsTw_21"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="1"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnsWithDefaultWidth_21" select="round(1)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_21">
                    <xsl:choose>
                        <xsl:when test="$altova:nColumnsWithDefaultWidth_21 = 0">
                            <xsl:value-of select="round(1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_21"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nDefaultColumnWidthTw_21">
                    <xsl:choose>
                        <xsl:when test="$altova:TableWidthFactor_21 &lt; 1">
                            <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_21 div $altova:nColumnsWithDefaultWidthNotZero_21"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="round(($altova:nTableWidthTw_21 - $altova:nSumColumnWidthsTw_21) div $altova:nColumnsWithDefaultWidthNotZero_21)"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnWidthTw_21_0" select="round($altova:nTableWidthTw_21 * 0.50 * $altova:TableWidthFactor_21)"/>
                <xsl:variable name="altova:nColumnWidthTw_21_1" select="$altova:nDefaultColumnWidthTw_21"/>
                <xsl:variable name="altova:nColumnWidthTw_21_2" select="round(1.53 * 1440 * $altova:TableWidthFactor_21)"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:variable name="tablestyle21">
                    <xsl:text>\trowd</xsl:text>
                    <xsl:text>\trautofit1</xsl:text>
                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                    <xsl:value-of select="round($altova:nTableWidthTw_21)"/>
                    <xsl:text>\trleft</xsl:text>
                    <xsl:value-of select="$altova:nTableIndentTw_21"/>
                    <xsl:text>\ts57\ts58\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                </xsl:variable>
                <xsl:variable name="rowend21">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\row\pard</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="cellend21">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\cell</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestcell</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:RowStyle67">
                    <xsl:text>\trrh0\trhdr</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl21" select="$altova:nTableIndentTw_21"/>
                    <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_21_0 = $altova:nDefaultColumnWidthTw_21">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl21_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl21 + $altova:nColumnWidthTw_21_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_21_1 = $altova:nDefaultColumnWidthTw_21">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl21_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl21_Col0_AfterColumn + $altova:nColumnWidthTw_21_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_21_2 = $altova:nDefaultColumnWidthTw_21">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl21_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl21_Col1_AfterColumn + $altova:nColumnWidthTw_21_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col2_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle21"/>
                    <xsl:value-of select="$altova:RowStyle67"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>naam</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend21"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>woonplaats</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend21"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>aantal stemmen</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend21"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle21"/>
                <xsl:value-of select="$altova:RowStyle67"/>
                <xsl:value-of select="$rowend21"/>
                <xsl:for-each select="rg:CandidateElectedByPositionOnList">
                    <xsl:variable name="altova:RowStyle68">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl21" select="$altova:nTableIndentTw_21"/>
                        <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_21_0 = $altova:nDefaultColumnWidthTw_21">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl21_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl21 + $altova:nColumnWidthTw_21_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_21_1 = $altova:nDefaultColumnWidthTw_21">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl21_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl21_Col0_AfterColumn + $altova:nColumnWidthTw_21_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_21_2 = $altova:nDefaultColumnWidthTw_21">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl21_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl21_Col1_AfterColumn + $altova:nColumnWidthTw_21_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl21_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle21"/>
                        <xsl:value-of select="$altova:RowStyle68"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:call-template name="CandidateInTable2">
                        <xsl:with-param name="PublishGender" select="$PublishGender"/>
                        <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_21_0 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend21"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:call-template name="CandidateCityInTable2">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_21_1 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend21"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:Votes">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_21_2 div 1440) - 0.01042 - 0.06944"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend21"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle21"/>
                    <xsl:value-of select="$altova:RowStyle68"/>
                    <xsl:value-of select="$rowend21"/>
                </xsl:for-each>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="OverviewCandidateResultNewListOrder">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>This fragment must start on the page with the elected candidates. First there is the text if the order was changed or not. Now a page break BEFORE each stel or kieskring, but NOT at the END.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:call-template name="LineBreakPdf">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="LineBreakPdf">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs18\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>III. Rangschikking kandidaten</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>De kandidaten zijn gerangschikt in de volgorde zoals hiervoor is aangegeven.</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="rg:ListAndResults/rg:PositionsOnListChanged[text() = &quot;true&quot;]">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Uitzondering hierop zijn de volgende lijsten:</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:for-each select="rg:ListAndResults">
                <xsl:text>\page </xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:call-template name="PartyHeader2Lines">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>\par </xsl:text>
                <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
                    <xsl:text>\par </xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Kandidaten in volgorde van rangschikking:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:variable name="altova:CurrContextGrid_23" select="."/>
                <xsl:variable name="altova:nTableWidthIn_22" select="$altova:nMaxWidthIn * 1.00000"/>
                <xsl:variable name="altova:nTableWidthTw_22" select="$altova:nTableWidthIn_22 * 1440"/>
                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_22" select="round($altova:nTableWidthTw_22 * 0.25)"/>
                <xsl:variable name="altova:nTableIndentTw_22" select="0"/>
                <xsl:variable name="altova:nSumColumnWidthsTw_22" select="round(0.00)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidth_22" select="round(1)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_22">
                    <xsl:choose>
                        <xsl:when test="$altova:nColumnsWithDefaultWidth_22 = 0">
                            <xsl:value-of select="round(1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_22"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nDefaultColumnWidthTw_22">
                    <xsl:value-of select="$altova:nTableWidthTw_22 div $altova:nColumnsWithDefaultWidthNotZero_22"/>
                </xsl:variable>
                <xsl:variable name="altova:nColumnWidthTw_22_0" select="$altova:nDefaultColumnWidthTw_22"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:variable name="tablestyle22">
                    <xsl:text>\trowd</xsl:text>
                    <xsl:text>\trautofit1</xsl:text>
                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                    <xsl:value-of select="round($altova:nTableWidthTw_22)"/>
                    <xsl:text>\trleft</xsl:text>
                    <xsl:value-of select="$altova:nTableIndentTw_22"/>
                    <xsl:text>\ts59\ts60\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                </xsl:variable>
                <xsl:variable name="rowend22">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\row\pard</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="cellend22">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\cell</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestcell</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:for-each select="rg:CandidateAndResult[rg:Deceased = &quot;false&quot;]">
                    <xsl:sort select="rg:NewPositionOnList" data-type="number" order="ascending"/>
                    <xsl:variable name="altova:RowStyle69">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl22" select="$altova:nTableIndentTw_22"/>
                        <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_22_0 = $altova:nDefaultColumnWidthTw_22">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl22_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl22 + $altova:nColumnWidthTw_22_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl22_Col0_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle22"/>
                        <xsl:value-of select="$altova:RowStyle69"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:call-template name="CandidateInTable2">
                        <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                        <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_22_0 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend22"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle22"/>
                    <xsl:value-of select="$altova:RowStyle69"/>
                    <xsl:value-of select="$rowend22"/>
                </xsl:for-each>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="OverviewElectedCandidate">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:OverviewOfElectedCandidates">
            <xsl:variable name="altova:CurrContextGrid_24" select="."/>
            <xsl:variable name="altova:nTableWidthIn_23" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_23" select="$altova:nTableWidthIn_23 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_23" select="round($altova:nTableWidthTw_23 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_23" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_23" select="round(0.00 + 0.60 * $altova:nTableWidthTw_23)"/>
            <xsl:variable name="altova:TableWidthFactor_23">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_23 &gt; $altova:nTableWidthTw_23">
                        <xsl:value-of select="($altova:nTableWidthTw_23 - $altova:SumDefaultColumnsForWideTableTw_23) div $altova:nSumColumnWidthsTw_23"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnsWithDefaultWidth_23" select="round(1)"/>
            <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_23">
                <xsl:choose>
                    <xsl:when test="$altova:nColumnsWithDefaultWidth_23 = 0">
                        <xsl:value-of select="round(1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$altova:nColumnsWithDefaultWidth_23"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_23">
                <xsl:choose>
                    <xsl:when test="$altova:TableWidthFactor_23 &lt; 1">
                        <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_23 div $altova:nColumnsWithDefaultWidthNotZero_23"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="round(($altova:nTableWidthTw_23 - $altova:nSumColumnWidthsTw_23) div $altova:nColumnsWithDefaultWidthNotZero_23)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnWidthTw_23_0" select="round($altova:nTableWidthTw_23 * 0.60 * $altova:TableWidthFactor_23)"/>
            <xsl:variable name="altova:nColumnWidthTw_23_1" select="$altova:nDefaultColumnWidthTw_23"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle23">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_23)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_23"/>
                <xsl:text>\ts61\ts62\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend23">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend23">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle70">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl23" select="$altova:nTableIndentTw_23"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_23_0 = $altova:nDefaultColumnWidthTw_23">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl23_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl23 + $altova:nColumnWidthTw_23_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl23_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_23_1 = $altova:nDefaultColumnWidthTw_23">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl23_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl23_Col0_AfterColumn + $altova:nColumnWidthTw_23_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl23_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle23"/>
                <xsl:value-of select="$altova:RowStyle70"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>naam kandidaat</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend23"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>woonplaats</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend23"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle23"/>
            <xsl:value-of select="$altova:RowStyle70"/>
            <xsl:value-of select="$rowend23"/>
            <xsl:for-each select="rg:ElectedCandidate">
                <xsl:variable name="PublishGender" select="kr:ListData/@PublishGender"/>
                <xsl:variable name="PublicationLanguage" select="kr:ListData/@PublicationLanguage"/>
                <xsl:for-each select="eml:Candidate">
                    <xsl:variable name="altova:RowStyle71">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl23" select="$altova:nTableIndentTw_23"/>
                        <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_23_0 = $altova:nDefaultColumnWidthTw_23">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl23_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl23 + $altova:nColumnWidthTw_23_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl23_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl40\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_23_1 = $altova:nDefaultColumnWidthTw_23">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl23_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl23_Col0_AfterColumn + $altova:nColumnWidthTw_23_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl23_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle23"/>
                        <xsl:value-of select="$altova:RowStyle71"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:CandidateFullName">
                        <xsl:call-template name="LastNameH1">
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_0 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:call-template name="FirstNameH1">
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_0 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:call-template name="GenderGeneral">
                        <xsl:with-param name="Gender" select="eml:Gender"/>
                        <xsl:with-param name="PublishGender" select="$PublishGender"/>
                        <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_0 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend23"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:QualifyingAddress">
                        <xsl:call-template name="City">
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_1 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:call-template>
                        <xsl:for-each select="xal:Country">
                            <xsl:call-template name="City">
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_1 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="xal:CountryNameCode">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_23_1 div 1440) - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend23"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle23"/>
                    <xsl:value-of select="$altova:RowStyle71"/>
                    <xsl:value-of select="$rowend23"/>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ListOrCombinedList">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:if test="$smaller = 0">
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>lijstencombinatie </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP22_ListOrCombinedList_lijstencombinatie"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP22_ListOrCombinedList_lijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:if test="count( rg:ListInCombination ) &gt; 0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:ListInCombination">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test="position() != last()">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>, </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$smaller = 1">
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>lijstencombinatie </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP22_ListOrCombinedList_lijstencombinatie"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP22_ListOrCombinedList_lijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:if test="count( rg:ListInCombination ) &gt; 0">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:ListInCombination">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test="position() != last()">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>, </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="OverviewDHondtAssignmentSpecial">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:AbsoluteMajority">
            <xsl:call-template name="LineBreak">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Door toepassing van artikel P 9 van de Kieswet is een extra zetel toegewezen aan </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:Winner">
                <xsl:call-template name="ListOrCombinedList">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>. </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:choose>
                <xsl:when test="count( rg:Allotting ) = 0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Daartegenover vervalt een zetel die was toegewezen aan </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="rg:Looser">
                        <xsl:call-template name="ListOrCombinedList">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="rg:Allotting">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Daartegenover heeft een loting plaatsgevonden tussen </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="rg:Winner">
                            <xsl:call-template name="ListOrCombinedList">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:for-each select="rg:Looser">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> en </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:call-template name="ListOrCombinedList">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>. Als gevolg hiervan vervalt een zetel die was toegewezen aan </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="rg:Winner">
                            <xsl:call-template name="ListOrCombinedList">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
        <xsl:for-each select="rg:ExhaustedList">
            <xsl:call-template name="LineBreak">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Door toepassing van artikel </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:choose>
                <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>P 10</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>U 10</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> van de Kieswet </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:choose>
                <xsl:when test="@lostSeats = 1">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>is</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>zijn</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> als gevolg van lijstuitputting bij </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="ListOrCombinedList">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:choose>
                <xsl:when test="@lostSeats = 1">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>een extra zetel toegewezen aan een ander lijst</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="@lostSeats">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> extra zetels toegewezen aan andere lijsten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateInTable">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="PublishGender"/>
        <xsl:param name="PublicationLanguage"/>
        <xsl:if test="false()">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>In font-size=smaller</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:Candidate">
            <xsl:for-each select="eml:CandidateFullName">
                <xsl:call-template name="LastNameH1">
                    <xsl:with-param name="fontSize" select="&apos;smaller&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="FirstNameH1">
                    <xsl:with-param name="fontSize" select="&apos;smaller&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:call-template name="GenderGeneral">
                <xsl:with-param name="Gender" select="eml:Gender"/>
                <xsl:with-param name="PublishGender" select="$PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                <xsl:with-param name="fontSize" select="&apos;smaller&apos;"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateInTable2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="PublishGender"/>
        <xsl:param name="PublicationLanguage"/>
        <xsl:for-each select="eml:Candidate">
            <xsl:for-each select="eml:CandidateFullName">
                <xsl:call-template name="LastNameH1">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="FirstNameH1">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:call-template name="GenderGeneral">
                <xsl:with-param name="Gender" select="eml:Gender"/>
                <xsl:with-param name="PublishGender" select="$PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="$PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateCityInTable2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:Candidate">
            <xsl:for-each select="eml:QualifyingAddress">
                <xsl:call-template name="City">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:Country">
                    <xsl:call-template name="City">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="xal:CountryNameCode">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyHeader2Lines">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="../rg:Type = &quot;lijstengroep&quot;">
                <xsl:variable name="altova:CurrContextGrid_25" select="."/>
                <xsl:variable name="altova:nTableWidthIn_24" select="$altova:nMaxWidthIn * 1.00000"/>
                <xsl:variable name="altova:nTableWidthTw_24" select="$altova:nTableWidthIn_24 * 1440"/>
                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_24" select="round($altova:nTableWidthTw_24 * 0.25)"/>
                <xsl:variable name="altova:nTableIndentTw_24" select="0"/>
                <xsl:variable name="altova:nSumColumnWidthsTw_24" select="round(7201.00)"/>
                <xsl:variable name="altova:TableWidthFactor_24">
                    <xsl:choose>
                        <xsl:when test="$altova:nSumColumnWidthsTw_24 &gt; $altova:nTableWidthTw_24">
                            <xsl:value-of select="($altova:nTableWidthTw_24 - $altova:SumDefaultColumnsForWideTableTw_24) div $altova:nSumColumnWidthsTw_24"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="1"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnsWithDefaultWidth_24" select="round(1)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_24">
                    <xsl:choose>
                        <xsl:when test="$altova:nColumnsWithDefaultWidth_24 = 0">
                            <xsl:value-of select="round(1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_24"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nDefaultColumnWidthTw_24">
                    <xsl:choose>
                        <xsl:when test="$altova:TableWidthFactor_24 &lt; 1">
                            <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_24 div $altova:nColumnsWithDefaultWidthNotZero_24"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="round(($altova:nTableWidthTw_24 - $altova:nSumColumnWidthsTw_24) div $altova:nColumnsWithDefaultWidthNotZero_24)"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnWidthTw_24_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_24)"/>
                <xsl:variable name="altova:nColumnWidthTw_24_1" select="$altova:nDefaultColumnWidthTw_24"/>
                <xsl:variable name="altova:nColumnWidthTw_24_2" select="round(2.78 * 1440 * $altova:TableWidthFactor_24)"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:variable name="tablestyle24">
                    <xsl:text>\trowd</xsl:text>
                    <xsl:text>\trautofit1</xsl:text>
                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                    <xsl:value-of select="round($altova:nTableWidthTw_24)"/>
                    <xsl:text>\trleft</xsl:text>
                    <xsl:value-of select="$altova:nTableIndentTw_24"/>
                    <xsl:text>\ts63\ts64\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                </xsl:variable>
                <xsl:variable name="rowend24">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\row\pard</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="cellend24">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\cell</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestcell</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:RowStyle72">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24" select="$altova:nTableIndentTw_24"/>
                    <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_0 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl24 + $altova:nColumnWidthTw_24_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_1 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col0_AfterColumn + $altova:nColumnWidthTw_24_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_2 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col1_AfterColumn + $altova:nColumnWidthTw_24_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col2_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle24"/>
                    <xsl:value-of select="$altova:RowStyle72"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Aanduiding politieke groepering</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="PartyNamePdfWrapped">
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_24_1 div 1440) + ($altova:nColumnWidthTw_24_2 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle24"/>
                <xsl:value-of select="$altova:RowStyle72"/>
                <xsl:value-of select="$rowend24"/>
                <xsl:variable name="altova:RowStyle73">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24" select="$altova:nTableIndentTw_24"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_0 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl24 + $altova:nColumnWidthTw_24_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_1 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col0_AfterColumn + $altova:nColumnWidthTw_24_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_2 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col1_AfterColumn + $altova:nColumnWidthTw_24_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col2_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle24"/>
                    <xsl:value-of select="$altova:RowStyle73"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Lijstengroep:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP22_PartyHeader2Lines_Lijstengroep"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle24"/>
                <xsl:value-of select="$altova:RowStyle73"/>
                <xsl:value-of select="$rowend24"/>
                <xsl:variable name="altova:RowStyle74">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24" select="$altova:nTableIndentTw_24"/>
                    <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_0 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl24 + $altova:nColumnWidthTw_24_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_1 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col0_AfterColumn + $altova:nColumnWidthTw_24_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_24_2 = $altova:nDefaultColumnWidthTw_24">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl24_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl24_Col1_AfterColumn + $altova:nColumnWidthTw_24_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl24_Col2_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle24"/>
                    <xsl:value-of select="$altova:RowStyle74"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Type">
                    <xsl:choose>
                        <xsl:when test="text() = &quot;op zichzelf staande lijst&quot;">
                            <xsl:choose>
                                <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Kieskring:</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$RP22_PartyHeader2Lines_Kieskring"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:choose>
                                        <xsl:when test="$lang=0">
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:text>Provincie:</xsl:text>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:text>{\f1\fs18 </xsl:text>
                                            <xsl:call-template name="write-text">
                                                <xsl:with-param name="text">
                                                    <xsl:value-of select="$RP22_PartyHeader2Lines_Provincie"/>
                                                </xsl:with-param>
                                            </xsl:call-template>
                                            <xsl:text>}</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="text() = &quot;stel gelijkluidende lijsten&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Stel:</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_PartyHeader2Lines_Stel"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="rg:Type/text() = &quot;op zichzelf staande lijst&quot;">
                        <xsl:choose>
                            <xsl:when test="//eml:ElectionCategory[ text() != &quot;EK&quot; ]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@districtNumber"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@provinceName"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="kr:ListData">
                            <xsl:for-each select="@BelongsToSet">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend24"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle24"/>
                <xsl:value-of select="$altova:RowStyle74"/>
                <xsl:value-of select="$rowend24"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="altova:CurrContextGrid_26" select="."/>
                <xsl:variable name="altova:nTableWidthIn_25" select="$altova:nMaxWidthIn * 1.00000"/>
                <xsl:variable name="altova:nTableWidthTw_25" select="$altova:nTableWidthIn_25 * 1440"/>
                <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_25" select="round($altova:nTableWidthTw_25 * 0.25)"/>
                <xsl:variable name="altova:nTableIndentTw_25" select="0"/>
                <xsl:variable name="altova:nSumColumnWidthsTw_25" select="round(3200.50)"/>
                <xsl:variable name="altova:TableWidthFactor_25">
                    <xsl:choose>
                        <xsl:when test="$altova:nSumColumnWidthsTw_25 &gt; $altova:nTableWidthTw_25">
                            <xsl:value-of select="($altova:nTableWidthTw_25 - $altova:SumDefaultColumnsForWideTableTw_25) div $altova:nSumColumnWidthsTw_25"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="1"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnsWithDefaultWidth_25" select="round(1)"/>
                <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_25">
                    <xsl:choose>
                        <xsl:when test="$altova:nColumnsWithDefaultWidth_25 = 0">
                            <xsl:value-of select="round(1)"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="$altova:nColumnsWithDefaultWidth_25"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nDefaultColumnWidthTw_25">
                    <xsl:choose>
                        <xsl:when test="$altova:TableWidthFactor_25 &lt; 1">
                            <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_25 div $altova:nColumnsWithDefaultWidthNotZero_25"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:value-of select="round(($altova:nTableWidthTw_25 - $altova:nSumColumnWidthsTw_25) div $altova:nColumnsWithDefaultWidthNotZero_25)"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:nColumnWidthTw_25_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_25)"/>
                <xsl:variable name="altova:nColumnWidthTw_25_1" select="$altova:nDefaultColumnWidthTw_25"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:variable name="tablestyle25">
                    <xsl:text>\trowd</xsl:text>
                    <xsl:text>\trautofit1</xsl:text>
                    <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                    <xsl:value-of select="round($altova:nTableWidthTw_25)"/>
                    <xsl:text>\trleft</xsl:text>
                    <xsl:value-of select="$altova:nTableIndentTw_25"/>
                    <xsl:text>\ts65\ts66\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                </xsl:variable>
                <xsl:variable name="rowend25">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\row\pard</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="cellend25">
                    <xsl:choose>
                        <xsl:when test="$templatetablelevel + 1 = 1">
                            <xsl:text>\cell</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>\nestcell</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="altova:RowStyle75">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25" select="$altova:nTableIndentTw_25"/>
                    <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_25_0 = $altova:nDefaultColumnWidthTw_25">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl25 + $altova:nColumnWidthTw_25_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl25_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_25_1 = $altova:nDefaultColumnWidthTw_25">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl25_Col0_AfterColumn + $altova:nColumnWidthTw_25_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl25_Col1_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle25"/>
                    <xsl:value-of select="$altova:RowStyle75"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding van de groepering:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP22_PartyHeader2Lines_Aanduiding"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend25"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="eml:RegisteredName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_25_1 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend25"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle25"/>
                <xsl:value-of select="$altova:RowStyle75"/>
                <xsl:value-of select="$rowend25"/>
                <xsl:variable name="altova:RowStyle76">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25" select="$altova:nTableIndentTw_25"/>
                    <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_25_0 = $altova:nDefaultColumnWidthTw_25">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl25 + $altova:nColumnWidthTw_25_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl25_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_25_1 = $altova:nDefaultColumnWidthTw_25">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl25_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl25_Col0_AfterColumn + $altova:nColumnWidthTw_25_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl25_Col1_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle25"/>
                    <xsl:value-of select="$altova:RowStyle76"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;TK&quot; and text() != &quot;PS2&quot; ]">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Lijst:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP22_PartyHeader2Lines_Lijst"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="../rg:Type = &quot;op zichzelf staande lijst&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Op zichzelf staande lijst:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP22_PartyHeader2Lines_zichzelf"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="../rg:Type = &quot;stel gelijkluidende lijsten&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Stel gelijkluidende lijsten:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP22_PartyHeader2Lines_StelGelijkluidendeLijsten"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend25"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend25"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle25"/>
                <xsl:value-of select="$altova:RowStyle76"/>
                <xsl:value-of select="$rowend25"/>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text> </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="PartyHeader3Lines">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_27" select="."/>
        <xsl:variable name="altova:nTableWidthIn_26" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_26" select="$altova:nTableWidthIn_26 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_26" select="round($altova:nTableWidthTw_26 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_26" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_26" select="round(3200.50)"/>
        <xsl:variable name="altova:TableWidthFactor_26">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_26 &gt; $altova:nTableWidthTw_26">
                    <xsl:value-of select="($altova:nTableWidthTw_26 - $altova:SumDefaultColumnsForWideTableTw_26) div $altova:nSumColumnWidthsTw_26"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_26" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_26">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_26 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_26"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_26">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_26 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_26 div $altova:nColumnsWithDefaultWidthNotZero_26"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_26 - $altova:nSumColumnWidthsTw_26) div $altova:nColumnsWithDefaultWidthNotZero_26)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_26_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_26)"/>
        <xsl:variable name="altova:nColumnWidthTw_26_1" select="$altova:nDefaultColumnWidthTw_26"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle26">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_26)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_26"/>
            <xsl:text>\ts67\ts68\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend26">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend26">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle77">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26" select="$altova:nTableIndentTw_26"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_0 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl26 + $altova:nColumnWidthTw_26_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_1 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl26_Col0_AfterColumn + $altova:nColumnWidthTw_26_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle26"/>
            <xsl:value-of select="$altova:RowStyle77"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Aanduiding politieke groepering</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="PartyNamePdfWrapped">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_26_1 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle26"/>
        <xsl:value-of select="$altova:RowStyle77"/>
        <xsl:value-of select="$rowend26"/>
        <xsl:variable name="altova:RowStyle78">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26" select="$altova:nTableIndentTw_26"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_0 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl26 + $altova:nColumnWidthTw_26_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_1 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl26_Col0_AfterColumn + $altova:nColumnWidthTw_26_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle26"/>
            <xsl:value-of select="$altova:RowStyle78"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="eml:AffiliationIdentifier">
            <xsl:for-each select="@Id">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle26"/>
        <xsl:value-of select="$altova:RowStyle78"/>
        <xsl:value-of select="$rowend26"/>
        <xsl:variable name="altova:RowStyle79">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26" select="$altova:nTableIndentTw_26"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_0 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl26 + $altova:nColumnWidthTw_26_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_26_1 = $altova:nDefaultColumnWidthTw_26">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl26_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl26_Col0_AfterColumn + $altova:nColumnWidthTw_26_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl26_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle26"/>
            <xsl:value-of select="$altova:RowStyle79"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Toegewezen aantal zetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="rg:Seats">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:apply-templates>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_26_1 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:apply-templates>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend26"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle26"/>
        <xsl:value-of select="$altova:RowStyle79"/>
        <xsl:value-of select="$rowend26"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="PartyHeader4Lines">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="withList" select="true()"/>
        <xsl:param name="withVotes" select="true()"/>
        <xsl:param name="toegewezen" select="false()"/>
        <xsl:for-each select="self::*">
            <xsl:variable name="isListengroup" select="../rg:Type = &quot;lijstengroep&quot;"/>
            <xsl:variable name="altova:CurrContextGrid_28" select="."/>
            <xsl:variable name="altova:nTableWidthIn_27" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_27" select="$altova:nTableWidthIn_27 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_27" select="round($altova:nTableWidthTw_27 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_27" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_27" select="round(3200.50)"/>
            <xsl:variable name="altova:TableWidthFactor_27">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_27 &gt; $altova:nTableWidthTw_27">
                        <xsl:value-of select="($altova:nTableWidthTw_27 - $altova:SumDefaultColumnsForWideTableTw_27) div $altova:nSumColumnWidthsTw_27"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnsWithDefaultWidth_27" select="round(1)"/>
            <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_27">
                <xsl:choose>
                    <xsl:when test="$altova:nColumnsWithDefaultWidth_27 = 0">
                        <xsl:value-of select="round(1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$altova:nColumnsWithDefaultWidth_27"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_27">
                <xsl:choose>
                    <xsl:when test="$altova:TableWidthFactor_27 &lt; 1">
                        <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_27 div $altova:nColumnsWithDefaultWidthNotZero_27"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="round(($altova:nTableWidthTw_27 - $altova:nSumColumnWidthsTw_27) div $altova:nColumnsWithDefaultWidthNotZero_27)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnWidthTw_27_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_27)"/>
            <xsl:variable name="altova:nColumnWidthTw_27_1" select="$altova:nDefaultColumnWidthTw_27"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle27">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_27)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_27"/>
                <xsl:text>\ts69\ts70\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend27">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend27">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle80">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle27"/>
                <xsl:value-of select="$altova:RowStyle80"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Aanduiding politieke groepering:</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend27"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="PartyNamePdfWrapped">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_27_1 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend27"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle27"/>
            <xsl:value-of select="$altova:RowStyle80"/>
            <xsl:value-of select="$rowend27"/>
            <xsl:choose>
                <xsl:when test="$withList and $isListengroup">
                    <xsl:variable name="altova:RowStyle81">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle27"/>
                        <xsl:value-of select="$altova:RowStyle81"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Lijstengroep:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP22_PartyHeader4Lines_Lijstengroep"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="@Id">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle27"/>
                    <xsl:value-of select="$altova:RowStyle81"/>
                    <xsl:value-of select="$rowend27"/>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="$withList and $isListengroup">
                    <xsl:variable name="altova:RowStyle82">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle27"/>
                        <xsl:value-of select="$altova:RowStyle82"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:Type">
                        <xsl:choose>
                            <xsl:when test="text() = &quot;op zichzelf staande lijst&quot;">
                                <xsl:choose>
                                    <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>Kieskring:</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>Provincie:</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="text() = &quot;stel gelijkluidende lijsten&quot;">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Stel:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="rg:Type/text() = &quot;op zichzelf staande lijst&quot;">
                            <xsl:choose>
                                <xsl:when test="//eml:ElectionCategory[ text() != &quot;EK&quot; ]">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="@districtNumber"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="@provinceName"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:for-each select="kr:ListData">
                                <xsl:for-each select="@BelongsToSet">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle27"/>
                    <xsl:value-of select="$altova:RowStyle82"/>
                    <xsl:value-of select="$rowend27"/>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="$withList and not($isListengroup)">
                    <xsl:variable name="altova:RowStyle83">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle27"/>
                        <xsl:value-of select="$altova:RowStyle83"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;TK&quot; and text() != &quot;PS2&quot; ]">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Lijst:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:when test="../rg:Type = &quot;op zichzelf staande lijst&quot;">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Op zichzelf staande lijst:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:when test="../rg:Type = &quot;stel gelijkluidende lijsten&quot;">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Stel gelijkluidende lijsten:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="@Id">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle27"/>
                    <xsl:value-of select="$altova:RowStyle83"/>
                    <xsl:value-of select="$rowend27"/>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="$withVotes">
                    <xsl:variable name="altova:RowStyle84">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle27"/>
                        <xsl:value-of select="$altova:RowStyle84"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Totaal aantal stemmen:</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:Votes">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_27_1 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend27"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle27"/>
                    <xsl:value-of select="$altova:RowStyle84"/>
                    <xsl:value-of select="$rowend27"/>
                </xsl:when>
                <xsl:otherwise/>
            </xsl:choose>
            <xsl:variable name="altova:RowStyle85">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27" select="$altova:nTableIndentTw_27"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_27_0 = $altova:nDefaultColumnWidthTw_27">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl27 + $altova:nColumnWidthTw_27_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_27_1 = $altova:nDefaultColumnWidthTw_27">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl27_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl27_Col0_AfterColumn + $altova:nColumnWidthTw_27_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl27_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle27"/>
                <xsl:value-of select="$altova:RowStyle85"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$toegewezen">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Toegewezen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Totaal</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> aantal zetels:</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend27"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:Seats">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_27_1 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend27"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle27"/>
            <xsl:value-of select="$altova:RowStyle85"/>
            <xsl:value-of select="$rowend27"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyHeader5Lines">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_29" select="."/>
        <xsl:variable name="altova:nTableWidthIn_28" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_28" select="$altova:nTableWidthIn_28 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_28" select="round($altova:nTableWidthTw_28 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_28" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_28" select="round(3200.50)"/>
        <xsl:variable name="altova:TableWidthFactor_28">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_28 &gt; $altova:nTableWidthTw_28">
                    <xsl:value-of select="($altova:nTableWidthTw_28 - $altova:SumDefaultColumnsForWideTableTw_28) div $altova:nSumColumnWidthsTw_28"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_28" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_28">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_28 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_28"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_28">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_28 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_28 div $altova:nColumnsWithDefaultWidthNotZero_28"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_28 - $altova:nSumColumnWidthsTw_28) div $altova:nColumnsWithDefaultWidthNotZero_28)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_28_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_28)"/>
        <xsl:variable name="altova:nColumnWidthTw_28_1" select="$altova:nDefaultColumnWidthTw_28"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle28">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_28)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_28"/>
            <xsl:text>\ts71\ts72\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend28">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend28">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle86">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28" select="$altova:nTableIndentTw_28"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_0 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl28 + $altova:nColumnWidthTw_28_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_1 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl28_Col0_AfterColumn + $altova:nColumnWidthTw_28_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle28"/>
            <xsl:value-of select="$altova:RowStyle86"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Aanduiding politieke groepering:</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="PartyNamePdfWrapped">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_28_1 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle28"/>
        <xsl:value-of select="$altova:RowStyle86"/>
        <xsl:value-of select="$rowend28"/>
        <xsl:variable name="altova:RowStyle87">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28" select="$altova:nTableIndentTw_28"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_0 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl28 + $altova:nColumnWidthTw_28_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_1 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl28_Col0_AfterColumn + $altova:nColumnWidthTw_28_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle28"/>
            <xsl:value-of select="$altova:RowStyle87"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Lijstengroepnummer:</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="eml:AffiliationIdentifier">
            <xsl:for-each select="@Id">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle28"/>
        <xsl:value-of select="$altova:RowStyle87"/>
        <xsl:value-of select="$rowend28"/>
        <xsl:variable name="altova:RowStyle88">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28" select="$altova:nTableIndentTw_28"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_0 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl28 + $altova:nColumnWidthTw_28_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_28_1 = $altova:nDefaultColumnWidthTw_28">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl28_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl28_Col0_AfterColumn + $altova:nColumnWidthTw_28_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl28_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle28"/>
            <xsl:value-of select="$altova:RowStyle88"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Toegewezen aantal zetels lijstengroep:</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="rg:ElectoralQuota">
            <xsl:for-each select="rg:Fraction">
                <xsl:for-each select="@denominator">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend28"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle28"/>
        <xsl:value-of select="$altova:RowStyle88"/>
        <xsl:value-of select="$rowend28"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="ListOrCombinedList2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:ListOrCombinedList">
            <xsl:for-each select="@combinationId">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:for-each select="@listNumber">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="count(rg:ListOrCombinedList/rg:ListInCombination) &gt;0">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> (</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="rg:ListInCombination">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:if test="position() != last()">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>)</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="OverviewNiemeyerAssignment">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:NiemeyerAssignment">
            <xsl:variable name="altova:CurrContextGrid_30" select="."/>
            <xsl:variable name="altova:nTableWidthIn_29" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_29" select="$altova:nTableWidthIn_29 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_29" select="round($altova:nTableWidthTw_29 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_29" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_29" select="round(9002.50)"/>
            <xsl:variable name="altova:TableWidthFactor_29">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_29 &gt; $altova:nTableWidthTw_29">
                        <xsl:value-of select="$altova:nTableWidthTw_29 div $altova:nSumColumnWidthsTw_29"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_29" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_29_0" select="round(1.81 * 1440 * $altova:TableWidthFactor_29)"/>
            <xsl:variable name="altova:nColumnWidthTw_29_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_29)"/>
            <xsl:variable name="altova:nColumnWidthTw_29_2" select="round(1.25 * 1440 * $altova:TableWidthFactor_29)"/>
            <xsl:variable name="altova:nColumnWidthTw_29_3" select="round(1.11 * 1440 * $altova:TableWidthFactor_29)"/>
            <xsl:variable name="altova:nColumnWidthTw_29_4" select="round(1.11 * 1440 * $altova:TableWidthFactor_29)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle29">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_29)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_29"/>
                <xsl:text>\ts73\ts74\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend29">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend29">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle89">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29" select="$altova:nTableIndentTw_29"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_29_0 = $altova:nDefaultColumnWidthTw_29">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl29 + $altova:nColumnWidthTw_29_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_29_1 = $altova:nDefaultColumnWidthTw_29">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col0_AfterColumn + $altova:nColumnWidthTw_29_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_29_2 = $altova:nDefaultColumnWidthTw_29">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col1_AfterColumn + $altova:nColumnWidthTw_29_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_29_3 = $altova:nDefaultColumnWidthTw_29">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col2_AfterColumn + $altova:nColumnWidthTw_29_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_29_4 = $altova:nDefaultColumnWidthTw_29">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl29_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col3_AfterColumn + $altova:nColumnWidthTw_29_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle29"/>
                <xsl:value-of select="$altova:RowStyle89"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend29"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal zetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend29"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>overschot</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend29"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend29"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal restzetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend29"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle29"/>
            <xsl:value-of select="$altova:RowStyle89"/>
            <xsl:value-of select="$rowend29"/>
            <xsl:for-each select="rg:NiemeyerAssignmentLine">
                <xsl:variable name="altova:RowStyle90">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29" select="$altova:nTableIndentTw_29"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_29_0 = $altova:nDefaultColumnWidthTw_29">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl29 + $altova:nColumnWidthTw_29_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr200\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_29_1 = $altova:nDefaultColumnWidthTw_29">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col0_AfterColumn + $altova:nColumnWidthTw_29_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_29_2 = $altova:nDefaultColumnWidthTw_29">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col1_AfterColumn + $altova:nColumnWidthTw_29_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_29_3 = $altova:nDefaultColumnWidthTw_29">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col2_AfterColumn + $altova:nColumnWidthTw_29_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_29_4 = $altova:nDefaultColumnWidthTw_29">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl29_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl29_Col3_AfterColumn + $altova:nColumnWidthTw_29_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl29_Col4_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle29"/>
                    <xsl:value-of select="$altova:RowStyle90"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="ListOrCombinedList2">
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_29_0 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend29"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:PriorSeats">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_29_1 div 1440) - 0.01042 - 0.13889"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend29"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Remainder">
                    <xsl:call-template name="ElectionFractionPart1">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_29_2 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend29"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Remainder">
                    <xsl:call-template name="ElectionFractionPart2">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_29_3 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend29"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:if test="rg:NewSeats != 0">
                    <xsl:for-each select="rg:NewSeats">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_29_4 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend29"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle29"/>
                <xsl:value-of select="$altova:RowStyle90"/>
                <xsl:value-of select="$rowend29"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:for-each select="rg:Allotting">
                <xsl:call-template name="LineBreak">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Overeenkomstig artikel </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="@article = &quot;P13&quot;">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>P 13</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>P 8</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, eerste lid van de Kieswet heeft een loting plaatsgevonden tussen </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:for-each select="rg:Looser">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> en </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>. Als gevolg hiervan is een restzetel toegewezen aan </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedList">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewAssignmentWithinListGroups">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:AssignmentWithinListGroups">
            <xsl:text>\par </xsl:text>
            <xsl:call-template name="PartyHeader5Lines">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>\par </xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:call-template name="Kiesdeler">
                <xsl:with-param name="inCombinedList" select="false()"/>
                <xsl:with-param name="inListGroup" select="true()"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>\par </xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:variable name="altova:CurrContextGrid_31" select="."/>
            <xsl:variable name="altova:nTableWidthIn_30" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_30" select="$altova:nTableWidthIn_30 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_30" select="round($altova:nTableWidthTw_30 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_30" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_30" select="round(9003.50)"/>
            <xsl:variable name="altova:TableWidthFactor_30">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_30 &gt; $altova:nTableWidthTw_30">
                        <xsl:value-of select="$altova:nTableWidthTw_30 div $altova:nSumColumnWidthsTw_30"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_30" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_30_0" select="round(1.25 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_1" select="round(0.83 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_2" select="round(0.97 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_3" select="round(0.76 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_4" select="round(0.76 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_5" select="round(0.83 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:variable name="altova:nColumnWidthTw_30_6" select="round(0.83 * 1440 * $altova:TableWidthFactor_30)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle30">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_30)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_30"/>
                <xsl:text>\ts75\ts76\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend30">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend30">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle91">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30" select="$altova:nTableIndentTw_30"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_0 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl30 + $altova:nColumnWidthTw_30_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_1 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col0_AfterColumn + $altova:nColumnWidthTw_30_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt200\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_2 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col1_AfterColumn + $altova:nColumnWidthTw_30_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_3 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col2_AfterColumn + $altova:nColumnWidthTw_30_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_4 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col3_AfterColumn + $altova:nColumnWidthTw_30_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_5 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col4_AfterColumn + $altova:nColumnWidthTw_30_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_30_6 = $altova:nDefaultColumnWidthTw_30">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl30_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col5_AfterColumn + $altova:nColumnWidthTw_30_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col6_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle30"/>
                <xsl:value-of select="$altova:RowStyle91"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>lijst of stel gelijkluidende lijsten </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal volle zetels per lijst</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>overschot</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>toegewezen aantal restzetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal aantal zetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend30"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle30"/>
            <xsl:value-of select="$altova:RowStyle91"/>
            <xsl:value-of select="$rowend30"/>
            <xsl:for-each select="rg:AssignmentWithinListGroupsLine">
                <xsl:sort select="@sortNumber" data-type="number" order="ascending"/>
                <xsl:variable name="altova:RowStyle92">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30" select="$altova:nTableIndentTw_30"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_0 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl30 + $altova:nColumnWidthTw_30_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_1 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col0_AfterColumn + $altova:nColumnWidthTw_30_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_2 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col1_AfterColumn + $altova:nColumnWidthTw_30_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_3 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col2_AfterColumn + $altova:nColumnWidthTw_30_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_4 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col3_AfterColumn + $altova:nColumnWidthTw_30_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col4_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_5 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col4_AfterColumn + $altova:nColumnWidthTw_30_5"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col5_AfterColumn)"/>
                    <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_30_6 = $altova:nDefaultColumnWidthTw_30">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl30_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl30_Col5_AfterColumn + $altova:nColumnWidthTw_30_6"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl30_Col6_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle30"/>
                    <xsl:value-of select="$altova:RowStyle92"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="@districtNumber != &apos;&apos;">
                        <xsl:choose>
                            <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Kieskring </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@districtNumber">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:for-each select="@provinceName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="@setNumber != &apos;&apos;">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Totaal stel </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="@setNumber">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Votes">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_30_1 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:if test="rg:PriorSeats != &apos;&apos; and rg:PriorSeats != &apos;0&apos;">
                    <xsl:for-each select="rg:PriorSeats">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_30_2 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Remainder">
                    <xsl:call-template name="ElectionFractionPart1">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_30_3 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:Remainder">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="ElectionFractionPart2">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_30_4 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:if test="rg:NewSeats != &apos;&apos; and rg:NewSeats != &apos;0&apos;">
                    <xsl:for-each select="rg:NewSeats">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_30_5 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
                <xsl:if test="(rg:PriorSeats != &apos;&apos; and rg:PriorSeats != &apos;0&apos;) or (rg:NewSeats != &apos;&apos; and rg:NewSeats != &apos;0&apos;)">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="rg:PriorSeats +  rg:NewSeats"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend30"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle30"/>
                <xsl:value-of select="$altova:RowStyle92"/>
                <xsl:value-of select="$rowend30"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:call-template name="LineBreakTable">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="rg:Allotting">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Overeenkomstig artikel </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>P 12</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>U 12</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, vijfde lid van de Kieswet heeft een loting plaatsgevonden tussen </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedListUni">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:for-each select="rg:Looser">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> en </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="ListOrCombinedListUni">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>. Als gevolg hiervan is een restzetel toegewezen aan </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="rg:Winner">
                    <xsl:call-template name="ListOrCombinedListUni">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="LineBreak">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="rg:ExhaustedList">
                <xsl:choose>
                    <xsl:when test="@lostSeats = 1">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Overeenkomstig artikel </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:choose>
                            <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>P 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>U 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, eerste lid van de Kieswet, vindt er een overgang plaats van een zetel van </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:call-template name="ListOrCombinedListUni">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> naar een ander lijst.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:when test="@lostSeats &gt; 1">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Overeenkomstig artikel </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:choose>
                            <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>P 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>U 13</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, eerste lid van de Kieswet, vindt er een overgang plaats van </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="@lostSeats">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> zetels van </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:call-template name="ListOrCombinedListUni">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> naar andere lijsten.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                </xsl:choose>
                <xsl:call-template name="LineBreak">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:for-each select="rg:DHondtAssignment">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Hierna zijn overeenkomstig artikel </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="//kr:ElectionSubcategory[ text() != &quot;EK&quot; ]">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>P 13</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>U 13</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>, tweede lid van de Kieswet volgende restzetels toegewezen volgens het stelsel van de grootste gemiddelden:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="LineBreakTable">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:call-template name="OverviewDHondtAssignment">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="rg:DHondtAssignment">
                <xsl:call-template name="LineBreakTable">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
            <xsl:text>\page </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ListOrCombinedListUni">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:ListOrCombinedList">
            <xsl:choose>
                <xsl:when test="@combinationId">
                    <xsl:for-each select="@combinationId">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>lijstencombinatie </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count( rg:ListInCombination ) &gt; 0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> (</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="rg:ListInCombination">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:if test="position() != last()">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>, </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:for-each>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                </xsl:when>
                <xsl:when test="@districtNumber">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>kieskring </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="@districtNumber">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
                <xsl:when test="@setNumber">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>stel </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="@setNumber">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
                <xsl:when test="@listNumber">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>lijst </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="@listNumber">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PostTitle">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Kiesdeler">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="inCombinedList" select="false()"/>
        <xsl:param name="inListGroup" select="false()"/>
        <xsl:for-each select="rg:ElectoralQuota">
            <xsl:variable name="altova:CurrContextGrid_32" select="."/>
            <xsl:variable name="altova:nTableWidthIn_31" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_31" select="$altova:nTableWidthIn_31 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_31" select="round($altova:nTableWidthTw_31 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_31" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_31" select="round(6202.00)"/>
            <xsl:variable name="altova:TableWidthFactor_31">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_31 &gt; $altova:nTableWidthTw_31">
                        <xsl:value-of select="($altova:nTableWidthTw_31 - $altova:SumDefaultColumnsForWideTableTw_31) div $altova:nSumColumnWidthsTw_31"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnsWithDefaultWidth_31" select="round(1)"/>
            <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_31">
                <xsl:choose>
                    <xsl:when test="$altova:nColumnsWithDefaultWidth_31 = 0">
                        <xsl:value-of select="round(1)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$altova:nColumnsWithDefaultWidth_31"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_31">
                <xsl:choose>
                    <xsl:when test="$altova:TableWidthFactor_31 &lt; 1">
                        <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_31 div $altova:nColumnsWithDefaultWidthNotZero_31"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="round(($altova:nTableWidthTw_31 - $altova:nSumColumnWidthsTw_31) div $altova:nColumnsWithDefaultWidthNotZero_31)"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nColumnWidthTw_31_0" select="round(2.50 * 1440 * $altova:TableWidthFactor_31)"/>
            <xsl:variable name="altova:nColumnWidthTw_31_1" select="round(0.21 * 1440 * $altova:TableWidthFactor_31)"/>
            <xsl:variable name="altova:nColumnWidthTw_31_2" select="$altova:nDefaultColumnWidthTw_31"/>
            <xsl:variable name="altova:nColumnWidthTw_31_3" select="round(0.21 * 1440 * $altova:TableWidthFactor_31)"/>
            <xsl:variable name="altova:nColumnWidthTw_31_4" select="round(1.39 * 1440 * $altova:TableWidthFactor_31)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle31">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_31"/>
                <xsl:text>\ts77\ts78\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend31">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend31">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle93">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31" select="$altova:nTableIndentTw_31"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_0 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl31 + $altova:nColumnWidthTw_31_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_1 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col0_AfterColumn + $altova:nColumnWidthTw_31_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_2 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col1_AfterColumn + $altova:nColumnWidthTw_31_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_3 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col2_AfterColumn + $altova:nColumnWidthTw_31_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_4 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col3_AfterColumn + $altova:nColumnWidthTw_31_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle31"/>
                <xsl:value-of select="$altova:RowStyle93"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$inListGroup">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:when test="$inCombinedList">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal stemmen lijstencombinatie</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>totaal aantal geldige stemmen op kandidaten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$inCombinedList">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal zetels lijstencombinatie</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:if test="$inListGroup and //kr:ElectionSubcategory = &apos;EK&apos;">
                        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>toegewezen </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>aantal zetels</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$inCombinedList">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>combinatiekiesdeler</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:when test="$inListGroup">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>groepskiesdeler </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>kiesdeler</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle31"/>
            <xsl:value-of select="$altova:RowStyle93"/>
            <xsl:value-of select="$rowend31"/>
            <xsl:variable name="altova:RowStyle94">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31" select="$altova:nTableIndentTw_31"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_0 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl31 + $altova:nColumnWidthTw_31_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_1 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col0_AfterColumn + $altova:nColumnWidthTw_31_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_2 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col1_AfterColumn + $altova:nColumnWidthTw_31_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_3 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col2_AfterColumn + $altova:nColumnWidthTw_31_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_31_4 = $altova:nDefaultColumnWidthTw_31">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl31_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl31_Col3_AfterColumn + $altova:nColumnWidthTw_31_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl31_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle31"/>
                <xsl:value-of select="$altova:RowStyle94"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:Fraction">
                <xsl:for-each select="@numerator">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>:</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:Fraction">
                <xsl:for-each select="@denominator">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>=</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ElectionFraction">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_31_4 div 1440) - 0.02083 - 0.02083"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend31"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle31"/>
            <xsl:value-of select="$altova:RowStyle94"/>
            <xsl:value-of select="$rowend31"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="OverviewDHondtTableOneSeat">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:variable name="altova:CurrContextGrid_33" select="."/>
        <xsl:variable name="altova:nTableWidthIn_32" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_32" select="$altova:nTableWidthIn_32 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_32" select="round($altova:nTableWidthTw_32 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_32" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_32" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_32">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_32 &gt; $altova:nTableWidthTw_32">
                    <xsl:value-of select="($altova:nTableWidthTw_32 - $altova:SumDefaultColumnsForWideTableTw_32) div $altova:nSumColumnWidthsTw_32"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_32" select="round(3)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_32">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_32 = 0">
                    <xsl:value-of select="round(3)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_32"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_32">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_32 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_32 div $altova:nColumnsWithDefaultWidthNotZero_32"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_32 - $altova:nSumColumnWidthsTw_32) div $altova:nColumnsWithDefaultWidthNotZero_32)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_32_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_32)"/>
        <xsl:variable name="altova:nColumnWidthTw_32_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_32)"/>
        <xsl:variable name="altova:nColumnWidthTw_32_2" select="$altova:nDefaultColumnWidthTw_32"/>
        <xsl:variable name="altova:nColumnWidthTw_32_3" select="$altova:nDefaultColumnWidthTw_32"/>
        <xsl:variable name="altova:nColumnWidthTw_32_4" select="$altova:nDefaultColumnWidthTw_32"/>
        <xsl:variable name="altova:nColumnWidthTw_32_5" select="round(0.86 * 1440 * $altova:TableWidthFactor_32)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle32">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_32)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_32"/>
            <xsl:text>\ts79\ts80\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend32">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend32">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle95">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32" select="$altova:nTableIndentTw_32"/>
            <xsl:text>\clvertalt\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_0 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl32 + $altova:nColumnWidthTw_32_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_1 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col0_AfterColumn + $altova:nColumnWidthTw_32_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_2 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col1_AfterColumn + $altova:nColumnWidthTw_32_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_3 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col2_AfterColumn + $altova:nColumnWidthTw_32_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_4 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col3_AfterColumn + $altova:nColumnWidthTw_32_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_32_5 = $altova:nDefaultColumnWidthTw_32">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl32_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col4_AfterColumn + $altova:nColumnWidthTw_32_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col5_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle32"/>
            <xsl:value-of select="$altova:RowStyle95"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>reeds toegewezen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal zetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>gemiddeld aantal stemmen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>bij toewijzing restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal restzetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend32"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle32"/>
        <xsl:value-of select="$altova:RowStyle95"/>
        <xsl:value-of select="$rowend32"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle96">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32" select="$altova:nTableIndentTw_32"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_0 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl32 + $altova:nColumnWidthTw_32_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_1 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col0_AfterColumn + $altova:nColumnWidthTw_32_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_2 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col1_AfterColumn + $altova:nColumnWidthTw_32_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_3 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col2_AfterColumn + $altova:nColumnWidthTw_32_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_4 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col3_AfterColumn + $altova:nColumnWidthTw_32_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_32_5 = $altova:nDefaultColumnWidthTw_32">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl32_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl32_Col4_AfterColumn + $altova:nColumnWidthTw_32_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl32_Col5_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle32"/>
                <xsl:value-of select="$altova:RowStyle96"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_32_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:PriorSeats">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_32_2 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:DHondtFraction">
                <xsl:if test="@step = 1">
                    <xsl:call-template name="ElectionFractionPart1">
                        <xsl:with-param name="smaller" select="1"/>
                        <xsl:with-param name="bold" select="false()"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_32_3 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:DHondtFraction">
                <xsl:if test="@step = 1">
                    <xsl:call-template name="ElectionFractionPart2">
                        <xsl:with-param name="smaller" select="1"/>
                        <xsl:with-param name="bold" select="false()"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_32_4 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:if>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:if test="rg:NewSeats != 0">
                <xsl:for-each select="rg:NewSeats">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_32_5 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend32"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle32"/>
            <xsl:value-of select="$altova:RowStyle96"/>
            <xsl:value-of select="$rowend32"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewDHondtTable2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:variable name="altova:CurrContextGrid_34" select="."/>
        <xsl:variable name="altova:nTableWidthIn_33" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_33" select="$altova:nTableWidthIn_33 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_33" select="round($altova:nTableWidthTw_33 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_33" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_33" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_33">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_33 &gt; $altova:nTableWidthTw_33">
                    <xsl:value-of select="($altova:nTableWidthTw_33 - $altova:SumDefaultColumnsForWideTableTw_33) div $altova:nSumColumnWidthsTw_33"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_33" select="round(4)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_33">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_33 = 0">
                    <xsl:value-of select="round(4)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_33"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_33">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_33 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_33 div $altova:nColumnsWithDefaultWidthNotZero_33"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_33 - $altova:nSumColumnWidthsTw_33) div $altova:nColumnsWithDefaultWidthNotZero_33)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_33_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_33)"/>
        <xsl:variable name="altova:nColumnWidthTw_33_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_33)"/>
        <xsl:variable name="altova:nColumnWidthTw_33_2" select="$altova:nDefaultColumnWidthTw_33"/>
        <xsl:variable name="altova:nColumnWidthTw_33_3" select="$altova:nDefaultColumnWidthTw_33"/>
        <xsl:variable name="altova:nColumnWidthTw_33_4" select="$altova:nDefaultColumnWidthTw_33"/>
        <xsl:variable name="altova:nColumnWidthTw_33_5" select="$altova:nDefaultColumnWidthTw_33"/>
        <xsl:variable name="altova:nColumnWidthTw_33_6" select="round(0.86 * 1440 * $altova:TableWidthFactor_33)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle33">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_33)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_33"/>
            <xsl:text>\ts81\ts82\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend33">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend33">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle97">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33" select="$altova:nTableIndentTw_33"/>
            <xsl:text>\clvertalt\clmgf\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_0 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl33 + $altova:nColumnWidthTw_33_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_1 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col0_AfterColumn + $altova:nColumnWidthTw_33_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_2 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col1_AfterColumn + $altova:nColumnWidthTw_33_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_3 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col2_AfterColumn + $altova:nColumnWidthTw_33_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_4 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col3_AfterColumn + $altova:nColumnWidthTw_33_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_5 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col4_AfterColumn + $altova:nColumnWidthTw_33_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_6 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col5_AfterColumn + $altova:nColumnWidthTw_33_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle33"/>
            <xsl:value-of select="$altova:RowStyle97"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[ text() = &quot;EK&quot; ]">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="@article = &quot;P13&quot;">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal restzetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle33"/>
        <xsl:value-of select="$altova:RowStyle97"/>
        <xsl:value-of select="$rowend33"/>
        <xsl:variable name="altova:RowStyle98">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33" select="$altova:nTableIndentTw_33"/>
            <xsl:text>\clvertalc\clmgf\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_0 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl33 + $altova:nColumnWidthTw_33_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_1 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col0_AfterColumn + $altova:nColumnWidthTw_33_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_2 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col1_AfterColumn + $altova:nColumnWidthTw_33_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_3 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col2_AfterColumn + $altova:nColumnWidthTw_33_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_4 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col3_AfterColumn + $altova:nColumnWidthTw_33_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_5 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col4_AfterColumn + $altova:nColumnWidthTw_33_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_6 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col5_AfterColumn + $altova:nColumnWidthTw_33_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle33"/>
            <xsl:value-of select="$altova:RowStyle98"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_2 div 1440) + ($altova:nColumnWidthTw_33_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_4 div 1440) + ($altova:nColumnWidthTw_33_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle33"/>
        <xsl:value-of select="$altova:RowStyle98"/>
        <xsl:value-of select="$rowend33"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle99">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33" select="$altova:nTableIndentTw_33"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_0 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl33 + $altova:nColumnWidthTw_33_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_1 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col0_AfterColumn + $altova:nColumnWidthTw_33_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_2 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col1_AfterColumn + $altova:nColumnWidthTw_33_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_3 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col2_AfterColumn + $altova:nColumnWidthTw_33_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_4 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col3_AfterColumn + $altova:nColumnWidthTw_33_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_5 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col4_AfterColumn + $altova:nColumnWidthTw_33_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_33_6 = $altova:nDefaultColumnWidthTw_33">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl33_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col5_AfterColumn + $altova:nColumnWidthTw_33_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col6_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle33"/>
                <xsl:value-of select="$altova:RowStyle99"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:if test="rg:NewSeats != 0">
                <xsl:for-each select="rg:NewSeats">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_6 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend33"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle33"/>
            <xsl:value-of select="$altova:RowStyle99"/>
            <xsl:value-of select="$rowend33"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle100">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33" select="$altova:nTableIndentTw_33"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_0 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl33 + $altova:nColumnWidthTw_33_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_1 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col0_AfterColumn + $altova:nColumnWidthTw_33_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_2 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col1_AfterColumn + $altova:nColumnWidthTw_33_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_3 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col2_AfterColumn + $altova:nColumnWidthTw_33_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_4 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col3_AfterColumn + $altova:nColumnWidthTw_33_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_5 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col4_AfterColumn + $altova:nColumnWidthTw_33_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_33_6 = $altova:nDefaultColumnWidthTw_33">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl33_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl33_Col5_AfterColumn + $altova:nColumnWidthTw_33_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl33_Col6_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle33"/>
            <xsl:value-of select="$altova:RowStyle100"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel toegekend aan</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst of lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_2 div 1440) + ($altova:nColumnWidthTw_33_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_33_4 div 1440) + ($altova:nColumnWidthTw_33_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend33"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle33"/>
        <xsl:value-of select="$altova:RowStyle100"/>
        <xsl:value-of select="$rowend33"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewDHondtTable3">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:variable name="altova:CurrContextGrid_35" select="."/>
        <xsl:variable name="altova:nTableWidthIn_34" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_34" select="$altova:nTableWidthIn_34 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_34" select="round($altova:nTableWidthTw_34 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_34" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_34" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_34">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_34 &gt; $altova:nTableWidthTw_34">
                    <xsl:value-of select="($altova:nTableWidthTw_34 - $altova:SumDefaultColumnsForWideTableTw_34) div $altova:nSumColumnWidthsTw_34"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_34" select="round(6)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_34">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_34 = 0">
                    <xsl:value-of select="round(6)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_34"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_34">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_34 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_34 div $altova:nColumnsWithDefaultWidthNotZero_34"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_34 - $altova:nSumColumnWidthsTw_34) div $altova:nColumnsWithDefaultWidthNotZero_34)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_34_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_34)"/>
        <xsl:variable name="altova:nColumnWidthTw_34_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_34)"/>
        <xsl:variable name="altova:nColumnWidthTw_34_2" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_3" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_4" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_5" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_6" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_7" select="$altova:nDefaultColumnWidthTw_34"/>
        <xsl:variable name="altova:nColumnWidthTw_34_8" select="round(0.86 * 1440 * $altova:TableWidthFactor_34)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle34">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_34)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_34"/>
            <xsl:text>\ts83\ts84\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend34">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend34">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle101">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34" select="$altova:nTableIndentTw_34"/>
            <xsl:text>\clvertalt\clmgf\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_0 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl34 + $altova:nColumnWidthTw_34_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_1 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col0_AfterColumn + $altova:nColumnWidthTw_34_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_2 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col1_AfterColumn + $altova:nColumnWidthTw_34_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_3 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col2_AfterColumn + $altova:nColumnWidthTw_34_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_4 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col3_AfterColumn + $altova:nColumnWidthTw_34_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_5 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col4_AfterColumn + $altova:nColumnWidthTw_34_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_6 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col5_AfterColumn + $altova:nColumnWidthTw_34_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_7 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col6_AfterColumn + $altova:nColumnWidthTw_34_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_8 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col7_AfterColumn + $altova:nColumnWidthTw_34_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle34"/>
            <xsl:value-of select="$altova:RowStyle101"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[ text() = &quot;EK&quot; ]">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="@article = &quot;P13&quot;">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal restzetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle34"/>
        <xsl:value-of select="$altova:RowStyle101"/>
        <xsl:value-of select="$rowend34"/>
        <xsl:variable name="altova:RowStyle102">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34" select="$altova:nTableIndentTw_34"/>
            <xsl:text>\clvertalc\clmgf\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_0 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl34 + $altova:nColumnWidthTw_34_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_1 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col0_AfterColumn + $altova:nColumnWidthTw_34_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_2 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col1_AfterColumn + $altova:nColumnWidthTw_34_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_3 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col2_AfterColumn + $altova:nColumnWidthTw_34_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_4 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col3_AfterColumn + $altova:nColumnWidthTw_34_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_5 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col4_AfterColumn + $altova:nColumnWidthTw_34_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_6 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col5_AfterColumn + $altova:nColumnWidthTw_34_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_7 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col6_AfterColumn + $altova:nColumnWidthTw_34_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_8 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col7_AfterColumn + $altova:nColumnWidthTw_34_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle34"/>
            <xsl:value-of select="$altova:RowStyle102"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_2 div 1440) + ($altova:nColumnWidthTw_34_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_4 div 1440) + ($altova:nColumnWidthTw_34_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="3"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_6 div 1440) + ($altova:nColumnWidthTw_34_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle34"/>
        <xsl:value-of select="$altova:RowStyle102"/>
        <xsl:value-of select="$rowend34"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle103">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34" select="$altova:nTableIndentTw_34"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_0 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl34 + $altova:nColumnWidthTw_34_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_1 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col0_AfterColumn + $altova:nColumnWidthTw_34_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_2 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col1_AfterColumn + $altova:nColumnWidthTw_34_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_3 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col2_AfterColumn + $altova:nColumnWidthTw_34_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_4 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col3_AfterColumn + $altova:nColumnWidthTw_34_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_5 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col4_AfterColumn + $altova:nColumnWidthTw_34_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_6 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col5_AfterColumn + $altova:nColumnWidthTw_34_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_7 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col6_AfterColumn + $altova:nColumnWidthTw_34_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_34_8 = $altova:nDefaultColumnWidthTw_34">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl34_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col7_AfterColumn + $altova:nColumnWidthTw_34_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle34"/>
                <xsl:value-of select="$altova:RowStyle103"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\ql\sl0\li100\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:if test="rg:NewSeats != 0">
                <xsl:for-each select="rg:NewSeats">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_8 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend34"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle34"/>
            <xsl:value-of select="$altova:RowStyle103"/>
            <xsl:value-of select="$rowend34"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle104">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34" select="$altova:nTableIndentTw_34"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_0 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl34 + $altova:nColumnWidthTw_34_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_1 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col0_AfterColumn + $altova:nColumnWidthTw_34_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_2 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col1_AfterColumn + $altova:nColumnWidthTw_34_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_3 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col2_AfterColumn + $altova:nColumnWidthTw_34_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_4 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col3_AfterColumn + $altova:nColumnWidthTw_34_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_5 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col4_AfterColumn + $altova:nColumnWidthTw_34_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_6 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col5_AfterColumn + $altova:nColumnWidthTw_34_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_7 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col6_AfterColumn + $altova:nColumnWidthTw_34_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_34_8 = $altova:nDefaultColumnWidthTw_34">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl34_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl34_Col7_AfterColumn + $altova:nColumnWidthTw_34_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl34_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle34"/>
            <xsl:value-of select="$altova:RowStyle104"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel toegekend aan</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst of lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_2 div 1440) + ($altova:nColumnWidthTw_34_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_4 div 1440) + ($altova:nColumnWidthTw_34_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_34_6 div 1440) + ($altova:nColumnWidthTw_34_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend34"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle34"/>
        <xsl:value-of select="$altova:RowStyle104"/>
        <xsl:value-of select="$rowend34"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewDHondtTable4">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:variable name="altova:CurrContextGrid_36" select="."/>
        <xsl:variable name="altova:nTableWidthIn_35" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_35" select="$altova:nTableWidthIn_35 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_35" select="round($altova:nTableWidthTw_35 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_35" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_35" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_35">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_35 &gt; $altova:nTableWidthTw_35">
                    <xsl:value-of select="($altova:nTableWidthTw_35 - $altova:SumDefaultColumnsForWideTableTw_35) div $altova:nSumColumnWidthsTw_35"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_35" select="round(8)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_35">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_35 = 0">
                    <xsl:value-of select="round(8)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_35"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_35">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_35 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_35 div $altova:nColumnsWithDefaultWidthNotZero_35"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_35 - $altova:nSumColumnWidthsTw_35) div $altova:nColumnsWithDefaultWidthNotZero_35)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_35_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_35)"/>
        <xsl:variable name="altova:nColumnWidthTw_35_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_35)"/>
        <xsl:variable name="altova:nColumnWidthTw_35_2" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_3" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_4" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_5" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_6" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_7" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_8" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_9" select="$altova:nDefaultColumnWidthTw_35"/>
        <xsl:variable name="altova:nColumnWidthTw_35_10" select="round(0.86 * 1440 * $altova:TableWidthFactor_35)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle35">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_35)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_35"/>
            <xsl:text>\ts85\ts86\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend35">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend35">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle105">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35" select="$altova:nTableIndentTw_35"/>
            <xsl:text>\clvertalt\clmgf\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_0 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl35 + $altova:nColumnWidthTw_35_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_1 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col0_AfterColumn + $altova:nColumnWidthTw_35_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_2 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col1_AfterColumn + $altova:nColumnWidthTw_35_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_3 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col2_AfterColumn + $altova:nColumnWidthTw_35_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_4 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col3_AfterColumn + $altova:nColumnWidthTw_35_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_5 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col4_AfterColumn + $altova:nColumnWidthTw_35_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_6 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col5_AfterColumn + $altova:nColumnWidthTw_35_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_7 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col6_AfterColumn + $altova:nColumnWidthTw_35_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_8 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col7_AfterColumn + $altova:nColumnWidthTw_35_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_9 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col8_AfterColumn + $altova:nColumnWidthTw_35_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col9_AfterColumn)"/>
            <xsl:text>\clvertalt\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_10 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col9_AfterColumn + $altova:nColumnWidthTw_35_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col10_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle35"/>
            <xsl:value-of select="$altova:RowStyle105"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[ text() = &quot;EK&quot; ]">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="@article = &quot;P13&quot;">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal restzetels</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle35"/>
        <xsl:value-of select="$altova:RowStyle105"/>
        <xsl:value-of select="$rowend35"/>
        <xsl:variable name="altova:RowStyle106">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35" select="$altova:nTableIndentTw_35"/>
            <xsl:text>\clvertalc\clmgf\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_0 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl35 + $altova:nColumnWidthTw_35_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_1 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col0_AfterColumn + $altova:nColumnWidthTw_35_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_2 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col1_AfterColumn + $altova:nColumnWidthTw_35_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_3 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col2_AfterColumn + $altova:nColumnWidthTw_35_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_4 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col3_AfterColumn + $altova:nColumnWidthTw_35_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_5 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col4_AfterColumn + $altova:nColumnWidthTw_35_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_6 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col5_AfterColumn + $altova:nColumnWidthTw_35_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_7 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col6_AfterColumn + $altova:nColumnWidthTw_35_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_8 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col7_AfterColumn + $altova:nColumnWidthTw_35_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_9 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col8_AfterColumn + $altova:nColumnWidthTw_35_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_10 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col9_AfterColumn + $altova:nColumnWidthTw_35_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col10_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle35"/>
            <xsl:value-of select="$altova:RowStyle106"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_2 div 1440) + ($altova:nColumnWidthTw_35_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_4 div 1440) + ($altova:nColumnWidthTw_35_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="3"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_6 div 1440) + ($altova:nColumnWidthTw_35_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="4"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_8 div 1440) + ($altova:nColumnWidthTw_35_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle35"/>
        <xsl:value-of select="$altova:RowStyle106"/>
        <xsl:value-of select="$rowend35"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle107">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35" select="$altova:nTableIndentTw_35"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_0 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl35 + $altova:nColumnWidthTw_35_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_1 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col0_AfterColumn + $altova:nColumnWidthTw_35_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_2 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col1_AfterColumn + $altova:nColumnWidthTw_35_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_3 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col2_AfterColumn + $altova:nColumnWidthTw_35_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_4 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col3_AfterColumn + $altova:nColumnWidthTw_35_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_5 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col4_AfterColumn + $altova:nColumnWidthTw_35_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_6 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col5_AfterColumn + $altova:nColumnWidthTw_35_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_7 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col6_AfterColumn + $altova:nColumnWidthTw_35_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_8 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col7_AfterColumn + $altova:nColumnWidthTw_35_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col8_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_9 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col8_AfterColumn + $altova:nColumnWidthTw_35_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col9_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_35_10 = $altova:nDefaultColumnWidthTw_35">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl35_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col9_AfterColumn + $altova:nColumnWidthTw_35_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col10_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle35"/>
                <xsl:value-of select="$altova:RowStyle107"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:if test="rg:NewSeats != 0">
                <xsl:for-each select="rg:NewSeats">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_10 div 1440) - 0.01042 - 0.01042"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend35"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle35"/>
            <xsl:value-of select="$altova:RowStyle107"/>
            <xsl:value-of select="$rowend35"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle108">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35" select="$altova:nTableIndentTw_35"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_0 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl35 + $altova:nColumnWidthTw_35_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_1 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col0_AfterColumn + $altova:nColumnWidthTw_35_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_2 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col1_AfterColumn + $altova:nColumnWidthTw_35_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_3 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col2_AfterColumn + $altova:nColumnWidthTw_35_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_4 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col3_AfterColumn + $altova:nColumnWidthTw_35_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_5 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col4_AfterColumn + $altova:nColumnWidthTw_35_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_6 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col5_AfterColumn + $altova:nColumnWidthTw_35_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_7 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col6_AfterColumn + $altova:nColumnWidthTw_35_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_8 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col7_AfterColumn + $altova:nColumnWidthTw_35_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_9 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col8_AfterColumn + $altova:nColumnWidthTw_35_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_35_10 = $altova:nDefaultColumnWidthTw_35">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl35_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl35_Col9_AfterColumn + $altova:nColumnWidthTw_35_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl35_Col10_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle35"/>
            <xsl:value-of select="$altova:RowStyle108"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel toegekend aan</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst of lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_2 div 1440) + ($altova:nColumnWidthTw_35_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_4 div 1440) + ($altova:nColumnWidthTw_35_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_6 div 1440) + ($altova:nColumnWidthTw_35_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_35_8 div 1440) + ($altova:nColumnWidthTw_35_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend35"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle35"/>
        <xsl:value-of select="$altova:RowStyle108"/>
        <xsl:value-of select="$rowend35"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewDHondtTable6">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:param name="offset"/>
        <xsl:variable name="altova:CurrContextGrid_37" select="."/>
        <xsl:variable name="altova:nTableWidthIn_36" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_36" select="$altova:nTableWidthIn_36 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_36" select="round($altova:nTableWidthTw_36 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_36" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_36" select="round(3241.50)"/>
        <xsl:variable name="altova:TableWidthFactor_36">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_36 &gt; $altova:nTableWidthTw_36">
                    <xsl:value-of select="($altova:nTableWidthTw_36 - $altova:SumDefaultColumnsForWideTableTw_36) div $altova:nSumColumnWidthsTw_36"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_36" select="round(12)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_36">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_36 = 0">
                    <xsl:value-of select="round(12)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_36"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_36">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_36 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_36 div $altova:nColumnsWithDefaultWidthNotZero_36"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_36 - $altova:nSumColumnWidthsTw_36) div $altova:nColumnsWithDefaultWidthNotZero_36)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_36_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_36)"/>
        <xsl:variable name="altova:nColumnWidthTw_36_1" select="round(0.97 * 1440 * $altova:TableWidthFactor_36)"/>
        <xsl:variable name="altova:nColumnWidthTw_36_2" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_3" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_4" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_5" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_6" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_7" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_8" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_9" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_10" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_11" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_12" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_13" select="$altova:nDefaultColumnWidthTw_36"/>
        <xsl:variable name="altova:nColumnWidthTw_36_14" select="round(0.86 * 1440 * $altova:TableWidthFactor_36)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle36">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_36)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_36"/>
            <xsl:text>\ts87\ts88\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend36">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend36">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle109">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36" select="$altova:nTableIndentTw_36"/>
            <xsl:text>\clvertalt\clmgf\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_0 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl36 + $altova:nColumnWidthTw_36_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_1 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col0_AfterColumn + $altova:nColumnWidthTw_36_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_2 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col1_AfterColumn + $altova:nColumnWidthTw_36_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_3 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col2_AfterColumn + $altova:nColumnWidthTw_36_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_4 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col3_AfterColumn + $altova:nColumnWidthTw_36_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_5 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col4_AfterColumn + $altova:nColumnWidthTw_36_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_6 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col5_AfterColumn + $altova:nColumnWidthTw_36_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_7 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col6_AfterColumn + $altova:nColumnWidthTw_36_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_8 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col7_AfterColumn + $altova:nColumnWidthTw_36_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_9 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col8_AfterColumn + $altova:nColumnWidthTw_36_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_10 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col9_AfterColumn + $altova:nColumnWidthTw_36_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_11 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col10_AfterColumn + $altova:nColumnWidthTw_36_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_12 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col11_AfterColumn + $altova:nColumnWidthTw_36_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_13 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col12_AfterColumn + $altova:nColumnWidthTw_36_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col13_AfterColumn)"/>
            <xsl:text>\clvertalt\clvmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_14 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col13_AfterColumn + $altova:nColumnWidthTw_36_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle36"/>
            <xsl:value-of select="$altova:RowStyle109"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[ text() = &quot;EK&quot; ]">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="@article = &quot;P13&quot;">
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>lijstnummer of letter lijstencombinatie</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$maxNumberOfAssignments &lt;= 6 + $offset">
            <xsl:text>{\f1\fs16\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal restzetels</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle36"/>
        <xsl:value-of select="$altova:RowStyle109"/>
        <xsl:value-of select="$rowend36"/>
        <xsl:variable name="altova:RowStyle110">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36" select="$altova:nTableIndentTw_36"/>
            <xsl:text>\clvertalc\clmgf\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_0 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl36 + $altova:nColumnWidthTw_36_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_1 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col0_AfterColumn + $altova:nColumnWidthTw_36_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_2 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col1_AfterColumn + $altova:nColumnWidthTw_36_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_3 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col2_AfterColumn + $altova:nColumnWidthTw_36_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_4 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col3_AfterColumn + $altova:nColumnWidthTw_36_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_5 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col4_AfterColumn + $altova:nColumnWidthTw_36_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_6 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col5_AfterColumn + $altova:nColumnWidthTw_36_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_7 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col6_AfterColumn + $altova:nColumnWidthTw_36_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_8 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col7_AfterColumn + $altova:nColumnWidthTw_36_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_9 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col8_AfterColumn + $altova:nColumnWidthTw_36_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_10 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col9_AfterColumn + $altova:nColumnWidthTw_36_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_11 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col10_AfterColumn + $altova:nColumnWidthTw_36_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_12 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col11_AfterColumn + $altova:nColumnWidthTw_36_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_13 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col12_AfterColumn + $altova:nColumnWidthTw_36_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clvmrg\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_14 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col13_AfterColumn + $altova:nColumnWidthTw_36_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle36"/>
            <xsl:value-of select="$altova:RowStyle110"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="1 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_2 div 1440) + ($altova:nColumnWidthTw_36_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="2 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_4 div 1440) + ($altova:nColumnWidthTw_36_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="3 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_6 div 1440) + ($altova:nColumnWidthTw_36_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="4 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_8 div 1440) + ($altova:nColumnWidthTw_36_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="5 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_10 div 1440) + ($altova:nColumnWidthTw_36_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtHeader">
            <xsl:with-param name="step" select="6 + $offset"/>
            <xsl:with-param name="maxNumberOfAssignments" select="$maxNumberOfAssignments"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_12 div 1440) + ($altova:nColumnWidthTw_36_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle36"/>
        <xsl:value-of select="$altova:RowStyle110"/>
        <xsl:value-of select="$rowend36"/>
        <xsl:for-each select="rg:DHondtAssignmentLine">
            <xsl:variable name="altova:RowStyle111">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36" select="$altova:nTableIndentTw_36"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_0 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl36 + $altova:nColumnWidthTw_36_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_1 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col0_AfterColumn + $altova:nColumnWidthTw_36_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col1_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_2 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col1_AfterColumn + $altova:nColumnWidthTw_36_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col2_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_3 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col2_AfterColumn + $altova:nColumnWidthTw_36_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col3_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_4 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col3_AfterColumn + $altova:nColumnWidthTw_36_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col4_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_5 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col4_AfterColumn + $altova:nColumnWidthTw_36_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col5_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_6 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col5_AfterColumn + $altova:nColumnWidthTw_36_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col6_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_7 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col6_AfterColumn + $altova:nColumnWidthTw_36_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col7_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_8 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col7_AfterColumn + $altova:nColumnWidthTw_36_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col8_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_9 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col8_AfterColumn + $altova:nColumnWidthTw_36_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col9_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_10 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col9_AfterColumn + $altova:nColumnWidthTw_36_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col10_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_11 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col10_AfterColumn + $altova:nColumnWidthTw_36_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col11_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_12 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col11_AfterColumn + $altova:nColumnWidthTw_36_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col12_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_13 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col12_AfterColumn + $altova:nColumnWidthTw_36_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col13_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_36_14 = $altova:nDefaultColumnWidthTw_36">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl36_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col13_AfterColumn + $altova:nColumnWidthTw_36_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle36"/>
                <xsl:value-of select="$altova:RowStyle111"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="ListOrCombinedListPart2">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="1 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="1 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="2 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="2 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="3 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="3 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="4 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="4 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="5 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="5 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart1">
                <xsl:with-param name="step" select="6 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\ql\sl0\li60\f1\fs18 </xsl:text>
            <xsl:call-template name="DHondtFractionPart2">
                <xsl:with-param name="step" select="6 + $offset"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
            <xsl:if test="$maxNumberOfAssignments &lt;= 6 + $offset">
                <xsl:if test="rg:NewSeats != 0">
                    <xsl:for-each select="rg:NewSeats">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_14 div 1440) - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend36"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle36"/>
            <xsl:value-of select="$altova:RowStyle111"/>
            <xsl:value-of select="$rowend36"/>
        </xsl:for-each>
        <xsl:variable name="altova:RowStyle112">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36" select="$altova:nTableIndentTw_36"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_0 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl36 + $altova:nColumnWidthTw_36_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_1 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col0_AfterColumn + $altova:nColumnWidthTw_36_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_2 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col1_AfterColumn + $altova:nColumnWidthTw_36_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_3 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col2_AfterColumn + $altova:nColumnWidthTw_36_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_4 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col3_AfterColumn + $altova:nColumnWidthTw_36_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_5 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col4_AfterColumn + $altova:nColumnWidthTw_36_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_6 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col5_AfterColumn + $altova:nColumnWidthTw_36_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_7 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col6_AfterColumn + $altova:nColumnWidthTw_36_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_8 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col7_AfterColumn + $altova:nColumnWidthTw_36_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_9 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col8_AfterColumn + $altova:nColumnWidthTw_36_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_10 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col9_AfterColumn + $altova:nColumnWidthTw_36_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_11 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col10_AfterColumn + $altova:nColumnWidthTw_36_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_12 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col11_AfterColumn + $altova:nColumnWidthTw_36_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_13 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col12_AfterColumn + $altova:nColumnWidthTw_36_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col13_AfterColumn)"/>
            <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_36_14 = $altova:nDefaultColumnWidthTw_36">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl36_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl36_Col13_AfterColumn + $altova:nColumnWidthTw_36_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl36_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle36"/>
            <xsl:value-of select="$altova:RowStyle112"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>restzetel toegekend aan</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>lijst of lijstencombinatie</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="1 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_2 div 1440) + ($altova:nColumnWidthTw_36_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="2 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_4 div 1440) + ($altova:nColumnWidthTw_36_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="3 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_6 div 1440) + ($altova:nColumnWidthTw_36_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="4 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_8 div 1440) + ($altova:nColumnWidthTw_36_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="5 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_10 div 1440) + ($altova:nColumnWidthTw_36_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\qc\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DHondtWinners">
            <xsl:with-param name="step" select="6 + $offset"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_36_12 div 1440) + ($altova:nColumnWidthTw_36_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend36"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle36"/>
        <xsl:value-of select="$altova:RowStyle112"/>
        <xsl:value-of select="$rowend36"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult1-1-4">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_38" select="."/>
        <xsl:variable name="altova:nTableWidthIn_37" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_37" select="$altova:nTableWidthIn_37 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_37" select="round($altova:nTableWidthTw_37 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_37" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_37" select="round(4701.00)"/>
        <xsl:variable name="altova:TableWidthFactor_37">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_37 &gt; $altova:nTableWidthTw_37">
                    <xsl:value-of select="($altova:nTableWidthTw_37 - $altova:SumDefaultColumnsForWideTableTw_37) div $altova:nSumColumnWidthsTw_37"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_37" select="round(4)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_37">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_37 = 0">
                    <xsl:value-of select="round(4)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_37"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_37">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_37 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_37 div $altova:nColumnsWithDefaultWidthNotZero_37"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_37 - $altova:nSumColumnWidthsTw_37) div $altova:nColumnsWithDefaultWidthNotZero_37)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_37_0" select="round(0.35 * 1440 * $altova:TableWidthFactor_37)"/>
        <xsl:variable name="altova:nColumnWidthTw_37_1" select="round(2.92 * 1440 * $altova:TableWidthFactor_37)"/>
        <xsl:variable name="altova:nColumnWidthTw_37_2" select="$altova:nDefaultColumnWidthTw_37"/>
        <xsl:variable name="altova:nColumnWidthTw_37_3" select="$altova:nDefaultColumnWidthTw_37"/>
        <xsl:variable name="altova:nColumnWidthTw_37_4" select="$altova:nDefaultColumnWidthTw_37"/>
        <xsl:variable name="altova:nColumnWidthTw_37_5" select="$altova:nDefaultColumnWidthTw_37"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle37">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_37)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_37"/>
            <xsl:text>\ts89\ts90\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend37">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend37">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle113">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37" select="$altova:nTableIndentTw_37"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_0 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl37 + $altova:nColumnWidthTw_37_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_1 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col0_AfterColumn + $altova:nColumnWidthTw_37_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_2 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col1_AfterColumn + $altova:nColumnWidthTw_37_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_3 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col2_AfterColumn + $altova:nColumnWidthTw_37_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_4 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col3_AfterColumn + $altova:nColumnWidthTw_37_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_5 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col4_AfterColumn + $altova:nColumnWidthTw_37_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col5_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle37"/>
            <xsl:value-of select="$altova:RowStyle113"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnummer     naam kandidaat</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen per kieskring</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>totaal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle37"/>
        <xsl:value-of select="$altova:RowStyle113"/>
        <xsl:value-of select="$rowend37"/>
        <xsl:variable name="altova:RowStyle114">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37" select="$altova:nTableIndentTw_37"/>
            <xsl:text>\clvertalt\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_0 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl37 + $altova:nColumnWidthTw_37_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_1 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col0_AfterColumn + $altova:nColumnWidthTw_37_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_2 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col1_AfterColumn + $altova:nColumnWidthTw_37_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_3 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col2_AfterColumn + $altova:nColumnWidthTw_37_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col3_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_4 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col3_AfterColumn + $altova:nColumnWidthTw_37_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col4_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_37_5 = $altova:nDefaultColumnWidthTw_37">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl37_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col4_AfterColumn + $altova:nColumnWidthTw_37_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col5_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle37"/>
            <xsl:value-of select="$altova:RowStyle114"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_2 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>aantal</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>stemmen</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend37"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle37"/>
        <xsl:value-of select="$altova:RowStyle114"/>
        <xsl:value-of select="$rowend37"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle115">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37" select="$altova:nTableIndentTw_37"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_0 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl37 + $altova:nColumnWidthTw_37_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_1 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col0_AfterColumn + $altova:nColumnWidthTw_37_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_2 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col1_AfterColumn + $altova:nColumnWidthTw_37_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_3 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col2_AfterColumn + $altova:nColumnWidthTw_37_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_4 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col3_AfterColumn + $altova:nColumnWidthTw_37_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_5 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col4_AfterColumn + $altova:nColumnWidthTw_37_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col5_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle37"/>
                <xsl:value-of select="$altova:RowStyle115"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateInTable">
                <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle37"/>
            <xsl:value-of select="$altova:RowStyle115"/>
            <xsl:value-of select="$rowend37"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=1 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle116">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37" select="$altova:nTableIndentTw_37"/>
                <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_0 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl37 + $altova:nColumnWidthTw_37_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_1 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col0_AfterColumn + $altova:nColumnWidthTw_37_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_2 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col1_AfterColumn + $altova:nColumnWidthTw_37_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_3 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col2_AfterColumn + $altova:nColumnWidthTw_37_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_4 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col3_AfterColumn + $altova:nColumnWidthTw_37_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_37_5 = $altova:nDefaultColumnWidthTw_37">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl37_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl37_Col4_AfterColumn + $altova:nColumnWidthTw_37_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl37_Col5_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle37"/>
                <xsl:value-of select="$altova:RowStyle116"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_37_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend37"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle37"/>
            <xsl:value-of select="$altova:RowStyle116"/>
            <xsl:value-of select="$rowend37"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult1-1-7">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:param name="hasSecondPage" select="false()"/>
        <xsl:variable name="altova:CurrContextGrid_39" select="."/>
        <xsl:variable name="altova:nTableWidthIn_38" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_38" select="$altova:nTableWidthIn_38 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_38" select="round($altova:nTableWidthTw_38 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_38" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_38" select="round(4201.00)"/>
        <xsl:variable name="altova:TableWidthFactor_38">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_38 &gt; $altova:nTableWidthTw_38">
                    <xsl:value-of select="($altova:nTableWidthTw_38 - $altova:SumDefaultColumnsForWideTableTw_38) div $altova:nSumColumnWidthsTw_38"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_38" select="round(7)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_38">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_38 = 0">
                    <xsl:value-of select="round(7)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_38"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_38">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_38 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_38 div $altova:nColumnsWithDefaultWidthNotZero_38"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_38 - $altova:nSumColumnWidthsTw_38) div $altova:nColumnsWithDefaultWidthNotZero_38)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_38_0" select="round(0.35 * 1440 * $altova:TableWidthFactor_38)"/>
        <xsl:variable name="altova:nColumnWidthTw_38_1" select="round(2.57 * 1440 * $altova:TableWidthFactor_38)"/>
        <xsl:variable name="altova:nColumnWidthTw_38_2" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_3" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_4" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_5" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_6" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_7" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:variable name="altova:nColumnWidthTw_38_8" select="$altova:nDefaultColumnWidthTw_38"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle38">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_38)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_38"/>
            <xsl:text>\ts91\ts92\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend38">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend38">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle117">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38" select="$altova:nTableIndentTw_38"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_0 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl38 + $altova:nColumnWidthTw_38_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_1 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col0_AfterColumn + $altova:nColumnWidthTw_38_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_2 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col1_AfterColumn + $altova:nColumnWidthTw_38_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_3 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col2_AfterColumn + $altova:nColumnWidthTw_38_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_4 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col3_AfterColumn + $altova:nColumnWidthTw_38_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_5 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col4_AfterColumn + $altova:nColumnWidthTw_38_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_6 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col5_AfterColumn + $altova:nColumnWidthTw_38_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_7 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col6_AfterColumn + $altova:nColumnWidthTw_38_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col7_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_8 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col7_AfterColumn + $altova:nColumnWidthTw_38_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle38"/>
            <xsl:value-of select="$altova:RowStyle117"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$hasSecondPage">
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>volgnummer     naam kandidaat</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>op de lijst</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>volgnummer     naam kandidaat</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen per kieskring</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumberTop">
            <xsl:with-param name="position" select="7"/>
            <xsl:with-param name="alle" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle38"/>
        <xsl:value-of select="$altova:RowStyle117"/>
        <xsl:value-of select="$rowend38"/>
        <xsl:variable name="altova:RowStyle118">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38" select="$altova:nTableIndentTw_38"/>
            <xsl:text>\clvertalt\clmgf\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_0 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl38 + $altova:nColumnWidthTw_38_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_1 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col0_AfterColumn + $altova:nColumnWidthTw_38_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_2 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col1_AfterColumn + $altova:nColumnWidthTw_38_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_3 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col2_AfterColumn + $altova:nColumnWidthTw_38_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col3_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_4 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col3_AfterColumn + $altova:nColumnWidthTw_38_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_5 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col4_AfterColumn + $altova:nColumnWidthTw_38_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_6 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col5_AfterColumn + $altova:nColumnWidthTw_38_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col6_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_7 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col6_AfterColumn + $altova:nColumnWidthTw_38_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_38_8 = $altova:nDefaultColumnWidthTw_38">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl38_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col7_AfterColumn + $altova:nColumnWidthTw_38_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col8_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle38"/>
            <xsl:value-of select="$altova:RowStyle118"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="not($hasSecondPage)">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>op de lijst</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_2 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="position" select="6"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumberBottom">
            <xsl:with-param name="position" select="7"/>
            <xsl:with-param name="alle" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend38"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle38"/>
        <xsl:value-of select="$altova:RowStyle118"/>
        <xsl:value-of select="$rowend38"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle119">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38" select="$altova:nTableIndentTw_38"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_0 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl38 + $altova:nColumnWidthTw_38_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt100\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_1 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col0_AfterColumn + $altova:nColumnWidthTw_38_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_2 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col1_AfterColumn + $altova:nColumnWidthTw_38_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_3 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col2_AfterColumn + $altova:nColumnWidthTw_38_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_4 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col3_AfterColumn + $altova:nColumnWidthTw_38_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_5 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col4_AfterColumn + $altova:nColumnWidthTw_38_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_6 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col5_AfterColumn + $altova:nColumnWidthTw_38_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_7 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col6_AfterColumn + $altova:nColumnWidthTw_38_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_8 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col7_AfterColumn + $altova:nColumnWidthTw_38_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle38"/>
                <xsl:value-of select="$altova:RowStyle119"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateInTable">
                <xsl:with-param name="PublishGender" select="../kr:ListData/@PublishGender"/>
                <xsl:with-param name="PublicationLanguage" select="../kr:ListData/@PublicationLanguage"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_1 div 1440) - 0.06944 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle38"/>
            <xsl:value-of select="$altova:RowStyle119"/>
            <xsl:value-of select="$rowend38"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=1 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle120">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38" select="$altova:nTableIndentTw_38"/>
                <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_0 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl38 + $altova:nColumnWidthTw_38_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_1 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col0_AfterColumn + $altova:nColumnWidthTw_38_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_2 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col1_AfterColumn + $altova:nColumnWidthTw_38_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_3 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col2_AfterColumn + $altova:nColumnWidthTw_38_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_4 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col3_AfterColumn + $altova:nColumnWidthTw_38_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_5 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col4_AfterColumn + $altova:nColumnWidthTw_38_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_6 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col5_AfterColumn + $altova:nColumnWidthTw_38_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_7 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col6_AfterColumn + $altova:nColumnWidthTw_38_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_38_8 = $altova:nDefaultColumnWidthTw_38">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl38_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl38_Col7_AfterColumn + $altova:nColumnWidthTw_38_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl38_Col8_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle38"/>
                <xsl:value-of select="$altova:RowStyle120"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_38_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend38"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle38"/>
            <xsl:value-of select="$altova:RowStyle120"/>
            <xsl:value-of select="$rowend38"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="OverviewCandidateResult1-8-20">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fromLine" select="1"/>
        <xsl:param name="tillLine" select="80"/>
        <xsl:param name="remainingCandidates"/>
        <xsl:variable name="altova:CurrContextGrid_40" select="."/>
        <xsl:variable name="altova:nTableWidthIn_39" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_39" select="$altova:nTableWidthIn_39 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_39" select="round($altova:nTableWidthTw_39 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_39" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_39" select="round(1381.00)"/>
        <xsl:variable name="altova:TableWidthFactor_39">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_39 &gt; $altova:nTableWidthTw_39">
                    <xsl:value-of select="($altova:nTableWidthTw_39 - $altova:SumDefaultColumnsForWideTableTw_39) div $altova:nSumColumnWidthsTw_39"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_39" select="round(13)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_39">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_39 = 0">
                    <xsl:value-of select="round(13)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_39"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_39">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_39 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_39 div $altova:nColumnsWithDefaultWidthNotZero_39"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_39 - $altova:nSumColumnWidthsTw_39) div $altova:nColumnsWithDefaultWidthNotZero_39)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_39_0" select="round(0.36 * 1440 * $altova:TableWidthFactor_39)"/>
        <xsl:variable name="altova:nColumnWidthTw_39_1" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_2" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_3" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_4" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_5" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_6" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_7" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_8" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_9" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_10" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_11" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_12" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_13" select="$altova:nDefaultColumnWidthTw_39"/>
        <xsl:variable name="altova:nColumnWidthTw_39_14" select="round(0.60 * 1440 * $altova:TableWidthFactor_39)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle39">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_39)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_39"/>
            <xsl:text>\ts93\ts94\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend39">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend39">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle121">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39" select="$altova:nTableIndentTw_39"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_0 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl39 + $altova:nColumnWidthTw_39_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_1 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col0_AfterColumn + $altova:nColumnWidthTw_39_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col1_AfterColumn)"/>
            <xsl:text>\clvertalc\clmgf\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_2 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col1_AfterColumn + $altova:nColumnWidthTw_39_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col2_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_3 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col2_AfterColumn + $altova:nColumnWidthTw_39_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col3_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_4 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col3_AfterColumn + $altova:nColumnWidthTw_39_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col4_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_5 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col4_AfterColumn + $altova:nColumnWidthTw_39_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col5_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_6 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col5_AfterColumn + $altova:nColumnWidthTw_39_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col6_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_7 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col6_AfterColumn + $altova:nColumnWidthTw_39_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col7_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_8 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col7_AfterColumn + $altova:nColumnWidthTw_39_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col8_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_9 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col8_AfterColumn + $altova:nColumnWidthTw_39_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col9_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_10 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col9_AfterColumn + $altova:nColumnWidthTw_39_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col10_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_11 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col10_AfterColumn + $altova:nColumnWidthTw_39_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col11_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_12 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col11_AfterColumn + $altova:nColumnWidthTw_39_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col12_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_13 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col12_AfterColumn + $altova:nColumnWidthTw_39_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col13_AfterColumn)"/>
            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_14 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col13_AfterColumn + $altova:nColumnWidthTw_39_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle39"/>
            <xsl:value-of select="$altova:RowStyle121"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>volgnummer</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs20 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>op de lijst</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="count ( rg:Type[ text() = &quot;op zichzelf staande lijst&quot; ] ) = 0 and count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart[position() = 2]/rg:VotesInElectoralDistrict) &gt; 1">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>aantal stemmen per kieskring</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumberTop">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="14"/>
            <xsl:with-param name="alle" select="1"/>
            <xsl:with-param name="aantal" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_14 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle39"/>
        <xsl:value-of select="$altova:RowStyle121"/>
        <xsl:value-of select="$rowend39"/>
        <xsl:variable name="altova:RowStyle122">
            <xsl:text>\trrh0\trhdr</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39" select="$altova:nTableIndentTw_39"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_0 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl39 + $altova:nColumnWidthTw_39_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_1 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col0_AfterColumn + $altova:nColumnWidthTw_39_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_2 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col1_AfterColumn + $altova:nColumnWidthTw_39_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col2_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_3 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col2_AfterColumn + $altova:nColumnWidthTw_39_3"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col3_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_4 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col3_AfterColumn + $altova:nColumnWidthTw_39_4"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col4_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_5 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col4_AfterColumn + $altova:nColumnWidthTw_39_5"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col5_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_6 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col5_AfterColumn + $altova:nColumnWidthTw_39_6"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col6_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_7 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col6_AfterColumn + $altova:nColumnWidthTw_39_7"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col7_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_8 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col7_AfterColumn + $altova:nColumnWidthTw_39_8"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col8_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_9 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col8_AfterColumn + $altova:nColumnWidthTw_39_9"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col9_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_10 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col9_AfterColumn + $altova:nColumnWidthTw_39_10"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col10_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_11 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col10_AfterColumn + $altova:nColumnWidthTw_39_11"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col11_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_12 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col11_AfterColumn + $altova:nColumnWidthTw_39_12"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col12_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_13 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col12_AfterColumn + $altova:nColumnWidthTw_39_13"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col13_AfterColumn)"/>
            <xsl:text>\clvertalt\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_39_14 = $altova:nDefaultColumnWidthTw_39">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl39_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col13_AfterColumn + $altova:nColumnWidthTw_39_14"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col14_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle39"/>
            <xsl:value-of select="$altova:RowStyle122"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_1 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="2"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_2 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="3"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_3 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="4"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_4 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="5"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_5 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="6"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_6 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="7"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_7 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="8"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_8 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="9"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_9 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="10"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_10 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="11"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_11 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="12"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_12 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumber">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="13"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_13 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="DistrictNumberBottom">
            <xsl:with-param name="part" select="2"/>
            <xsl:with-param name="position" select="14"/>
            <xsl:with-param name="alle" select="1"/>
            <xsl:with-param name="aantal" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_14 div 1440) - 0.01042 - 0.01042"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend39"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle39"/>
        <xsl:value-of select="$altova:RowStyle122"/>
        <xsl:value-of select="$rowend39"/>
        <xsl:for-each select="rg:CandidateAndResult[position()&gt;=$fromLine and position()&lt;=$tillLine]">
            <xsl:variable name="altova:RowStyle123">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39" select="$altova:nTableIndentTw_39"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_0 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl39 + $altova:nColumnWidthTw_39_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_1 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col0_AfterColumn + $altova:nColumnWidthTw_39_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_2 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col1_AfterColumn + $altova:nColumnWidthTw_39_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_3 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col2_AfterColumn + $altova:nColumnWidthTw_39_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_4 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col3_AfterColumn + $altova:nColumnWidthTw_39_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_5 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col4_AfterColumn + $altova:nColumnWidthTw_39_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_6 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col5_AfterColumn + $altova:nColumnWidthTw_39_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_7 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col6_AfterColumn + $altova:nColumnWidthTw_39_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_8 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col7_AfterColumn + $altova:nColumnWidthTw_39_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_9 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col8_AfterColumn + $altova:nColumnWidthTw_39_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_10 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col9_AfterColumn + $altova:nColumnWidthTw_39_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_11 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col10_AfterColumn + $altova:nColumnWidthTw_39_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_12 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col11_AfterColumn + $altova:nColumnWidthTw_39_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_13 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col12_AfterColumn + $altova:nColumnWidthTw_39_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_14 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col13_AfterColumn + $altova:nColumnWidthTw_39_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle39"/>
                <xsl:value-of select="$altova:RowStyle123"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="CandidateId">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_0 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_1 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="13"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="Vote">
                <xsl:with-param name="part" select="2"/>
                <xsl:with-param name="position" select="14"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle39"/>
            <xsl:value-of select="$altova:RowStyle123"/>
            <xsl:value-of select="$rowend39"/>
        </xsl:for-each>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position()=2 and $remainingCandidates &lt; 1]">
            <xsl:variable name="altova:RowStyle124">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39" select="$altova:nTableIndentTw_39"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_0 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl39 + $altova:nColumnWidthTw_39_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_1 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col0_AfterColumn + $altova:nColumnWidthTw_39_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_2 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col1_AfterColumn + $altova:nColumnWidthTw_39_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_3 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col2_AfterColumn + $altova:nColumnWidthTw_39_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_4 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col3_AfterColumn + $altova:nColumnWidthTw_39_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col4_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_5 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col5_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col4_AfterColumn + $altova:nColumnWidthTw_39_5"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col5_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_6 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col6_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col5_AfterColumn + $altova:nColumnWidthTw_39_6"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col6_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_7 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col7_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col6_AfterColumn + $altova:nColumnWidthTw_39_7"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col7_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_8 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col8_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col7_AfterColumn + $altova:nColumnWidthTw_39_8"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col8_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_9 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col9_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col8_AfterColumn + $altova:nColumnWidthTw_39_9"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col9_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_10 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col10_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col9_AfterColumn + $altova:nColumnWidthTw_39_10"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col10_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_11 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col11_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col10_AfterColumn + $altova:nColumnWidthTw_39_11"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col11_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_12 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col12_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col11_AfterColumn + $altova:nColumnWidthTw_39_12"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col12_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_13 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col13_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col12_AfterColumn + $altova:nColumnWidthTw_39_13"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col13_AfterColumn)"/>
                <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf1\brdrw15\clbrdrb\brdrs\brdrcf1\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_39_14 = $altova:nDefaultColumnWidthTw_39">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl39_Col14_AfterColumn" select="$altova:CurrGridPos_Tbl39_Col13_AfterColumn + $altova:nColumnWidthTw_39_14"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl39_Col14_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle39"/>
                <xsl:value-of select="$altova:RowStyle124"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs16 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>totaal</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_1 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="2"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_2 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="3"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_3 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="4"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_4 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="5"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_5 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="6"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_6 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="7"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_7 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="8"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_8 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="9"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_9 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="10"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_10 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="11"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_11 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="12"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_12 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="13"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_13 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
            <xsl:call-template name="TotalVotes2">
                <xsl:with-param name="position" select="14"/>
                <xsl:with-param name="alle" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_39_14 div 1440) - 0.01042 - 0.01042"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend39"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle39"/>
            <xsl:value-of select="$altova:RowStyle124"/>
            <xsl:value-of select="$rowend39"/>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="AssignmentWithinListGroups">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:RG520">
            <xsl:choose>
                <xsl:when test="count(rg:AssignmentWithinListGroups) &gt; 0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Bij de verdeling van zetels binnen een lijstengroep wordt eerst de groepskiesdeler bepaald. Vervolgens wordt het aantal stemmen per lijst gedeeld door de groepskiesdeler. Dat levert het aantal volle zetels per lijst op. De lijst die na verdeling van de zetels het grootste overschot heeft, krijgt een restzetel.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="LineBreak">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="OverviewAssignmentWithinListGroups">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Niet van toepassing.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:call-template name="LineBreak">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\page </xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateId">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:Candidate">
            <xsl:for-each select="eml:CandidateIdentifier">
                <xsl:for-each select="@Id">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Vote">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="weighted" select="0"/>
        <xsl:choose>
            <xsl:when test="rg:VotesInElectoralDistrictPart[position() = $part] / rg:VotesInElectoralDistrict[($alle = 1 and (@id = &apos;alle&apos; or position() = $position)) or ($alle = 0 and @id != &apos;alle&apos; and position() = $position)]">
                <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                    <xsl:for-each select="rg:VotesInElectoralDistrict[($alle = 1 and (@id = &apos;alle&apos; or position() = $position)) or ($alle = 0 and @id != &apos;alle&apos; and position() = $position)]">
                        <xsl:choose>
                            <xsl:when test="$weighted = 0">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="$weighted = 1">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\par </xsl:text>
                                <xsl:for-each select="@weighted">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\cf140\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="DistrictNumber">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:choose>
                        <xsl:when test="$alle = 1 and @id = &apos;alle&apos;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Totaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_Totaal"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>\par </xsl:text>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>aantal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_aantal"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>\par </xsl:text>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>stemmen</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_stemmen"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="position() = $position and @id != &apos;alle&apos;">
                            <xsl:for-each select="@id">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DistrictNumberTop">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="aantal" select="0"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:if test="$alle = 1 and @id = &apos;alle&apos;">
                        <xsl:choose>
                            <xsl:when test="$aantal = 1">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>totaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\par </xsl:text>
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>aantal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>totaal</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DistrictNumberBottom">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="aantal" select="1"/>
        <xsl:for-each select="rg:CandidateAndResult[position() = 1]">
            <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
                <xsl:for-each select="rg:VotesInElectoralDistrict">
                    <xsl:choose>
                        <xsl:when test="$alle = 1 and @id = &apos;alle&apos;">
                            <xsl:if test="$aantal = 1">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>aantal</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP22_DistrictNumber_aantal"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text>\par </xsl:text>
                            </xsl:if>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>stemmen</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP22_DistrictNumber_stemmen"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="position() = $position and @id != &apos;alle&apos;">
                            <xsl:for-each select="@id">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="string(.)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="TotalVotes">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="part" select="1"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="weighted" select="0"/>
        <xsl:for-each select="rg:VotesInElectoralDistrictPart[position() = $part]">
            <xsl:for-each select="rg:VotesInElectoralDistrict[($alle = 1 and (@id = &apos;alle&apos; or position() = $position)) or ($alle = 0 and @id != &apos;alle&apos; and position() = $position)]">
                <xsl:choose>
                    <xsl:when test="$weighted = 0">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:when test="$weighted = 1">
                        <xsl:for-each select="@weighted">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="TotalVotes2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="position" select="&apos;&apos;"/>
        <xsl:param name="alle" select="0"/>
        <xsl:param name="weighted" select="0"/>
        <xsl:for-each select="rg:VotesInElectoralDistrict[($alle = 1 and (@id = &apos;alle&apos; or position() = $position)) or ($alle = 0 and @id != &apos;alle&apos; and position() = $position)]">
            <xsl:choose>
                <xsl:when test="$weighted = 0">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:when test="$weighted = 1">
                    <xsl:for-each select="@weighted">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyHeaderEvenOdd">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isEvenOdd"/>
        <xsl:param name="isSeats"/>
        <xsl:choose>
            <xsl:when test="count(rg:CandidateAndResult[position() = 1]/rg:VotesInElectoralDistrictPart) = 2 and $isEvenOdd = 1">
                <xsl:if test="$SV_OutputFormat = &apos;RTF&apos;">
                    <xsl:text>\page </xsl:text>
                </xsl:if>
                <xsl:text>\par\par</xsl:text>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
                    <xsl:text>\par </xsl:text>
                </xsl:if>
                <xsl:call-template name="PartyHeader2or4Lines">
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>\s0\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\page </xsl:text>
                <xsl:text>\par\par</xsl:text>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="PartyHeader2or4Lines">
                    <xsl:with-param name="isSeats" select="$isSeats"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>\s0\f0\fs24</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="PartyHeader2or4Lines">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isSeats"/>
        <xsl:choose>
            <xsl:when test="$isSeats = 1">
                <xsl:call-template name="PartyHeader4Lines">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="PartyHeader2Lines">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="CandidateListSubmitted">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="smaller" select="1"/>
        <xsl:for-each select="rg:SubmittedInElectoralDistrict[position() = $districtId]">
            <xsl:choose>
                <xsl:when test=". = &quot;true&quot;">
                    <xsl:choose>
                        <xsl:when test="$smaller = 1">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>*</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>*</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$smaller = 1">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>·</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>·</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CandidateListSubmittedHeader">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="smaller" select="1"/>
        <xsl:for-each select="rg:OverviewOfListsAndDistricts[position() = 1]">
            <xsl:for-each select="rg:SubmittedInElectoralDistrict[position() = $districtId]">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="@id">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="@id">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ListOrCombinedListPart2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="count(rg:ListOrCombinedList/rg:ListInCombination) &gt;0">
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>(</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="rg:ListInCombination">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:if test="position() != last()">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>{\f1\fs20 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>)</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="//kr:ElectionSubcategory[text()= &apos;PS2&apos; or text()= &apos;TK&apos;]">
                <xsl:for-each select="rg:ListOrCombinedList">
                    <xsl:if test="@districtNumber">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(Kieskring </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP22_ListOrCombinedListPart2_Kieskring"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:for-each select="@districtNumber">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="//kr:ElectionSubcategory[text()= &apos;EK&apos;]">
                <xsl:for-each select="rg:ListOrCombinedList">
                    <xsl:if test="@provinceName">
                        <xsl:for-each select="@provinceName">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="string(.)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:for-each>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="DHondtFractionPart1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtFraction">
            <xsl:if test="@step = $step">
                <xsl:call-template name="ElectionFractionPart1">
                    <xsl:with-param name="smaller" select="1"/>
                    <xsl:with-param name="bold" select="count (self::rg:DHondtFraction[@winner = &quot;true&quot;])"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DHondtFractionPart2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtFraction">
            <xsl:if test="@step = $step">
                <xsl:call-template name="ElectionFractionPart2">
                    <xsl:with-param name="smaller" select="1"/>
                    <xsl:with-param name="bold" select="count (self::rg:DHondtFraction[@winner = &quot;true&quot;])"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="DHondtHeader">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:param name="maxNumberOfAssignments"/>
        <xsl:if test="$maxNumberOfAssignments &gt;= $step">
            <xsl:text>{\f1\fs20\i\b0 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$step"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DHondtWinners">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="step"/>
        <xsl:for-each select="rg:DHondtAssignmentLine[rg:DHondtFraction[@step = $step and @winner=&quot;true&quot;]]">
            <xsl:for-each select="rg:ListOrCombinedList">
                <xsl:for-each select="@combinationId">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="@listNumber">
                    <xsl:text>{\f1\fs20 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreakRTF">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;RTF&apos;">
            <xsl:text>\par </xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="VotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:VotesInElectoralDistrict">
            <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="TotalVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfDistrictsVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="BlancVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfBlancVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="InvalidVotesInElectoralDistrict">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:OverviewOfInvalidVotes">
            <xsl:for-each select="rg:VotesInElectoralDistrict">
                <xsl:if test="@id != &quot;alle&quot; and position() = $districtId">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ElectoralDistrictNumber">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="districtId"/>
        <xsl:param name="addSpaceAfterNumbers" select="false()"/>
        <xsl:for-each select="rg:ElectoralDistrictName[position() = $districtId]">
            <xsl:for-each select="@id">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="string(.)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:if test="$addSpaceAfterNumbers">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PartyNamePdfWrapped">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="eml:RegisteredName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="eml:RegisteredName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectoralDistrictsOverview">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Kieskringen en gemeente of openbaar lichaam waar het hoofdstembureau is gevestigd:</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:variable name="altova:CurrContextGrid_41" select="."/>
        <xsl:variable name="altova:nTableWidthIn_40" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_40" select="$altova:nTableWidthIn_40 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_40" select="round($altova:nTableWidthTw_40 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_40" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_40" select="round(600.50)"/>
        <xsl:variable name="altova:TableWidthFactor_40">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_40 &gt; $altova:nTableWidthTw_40">
                    <xsl:value-of select="($altova:nTableWidthTw_40 - $altova:SumDefaultColumnsForWideTableTw_40) div $altova:nSumColumnWidthsTw_40"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_40" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_40">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_40 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_40"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_40">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_40 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_40 div $altova:nColumnsWithDefaultWidthNotZero_40"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_40 - $altova:nSumColumnWidthsTw_40) div $altova:nColumnsWithDefaultWidthNotZero_40)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_40_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_40)"/>
        <xsl:variable name="altova:nColumnWidthTw_40_1" select="$altova:nDefaultColumnWidthTw_40"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle40">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_40)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_40"/>
            <xsl:text>\ts95\ts96\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf1\brdrw15\trbrdrl\brdrnil\trbrdrb\brdrs\brdrcf1\brdrw15\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend40">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend40">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:for-each select="rg:ElectoralDistrictsOverview">
            <xsl:for-each select="rg:ElectoralDistrictName">
                <xsl:variable name="altova:RowStyle125">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl40" select="$altova:nTableIndentTw_40"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_40_0 = $altova:nDefaultColumnWidthTw_40">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl40_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl40 + $altova:nColumnWidthTw_40_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl40_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_40_1 = $altova:nDefaultColumnWidthTw_40">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl40_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl40_Col0_AfterColumn + $altova:nColumnWidthTw_40_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl40_Col1_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle40"/>
                    <xsl:value-of select="$altova:RowStyle125"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="@id"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="@id"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend40"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_40_1 div 1440) - 0.01042 - 0.01042"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend40"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle40"/>
                <xsl:value-of select="$altova:RowStyle125"/>
                <xsl:value-of select="$rowend40"/>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="ProvinceNameEK">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="id"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s6\f1\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="rg:ElectoralDistrictName[position() = $id and text() != &apos;&apos;]">
                <xsl:for-each select="rg:ElectoralDistrictName[position() = $id]">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:for-each select="$XML">
                    <xsl:for-each select="eml:EML">
                        <xsl:for-each select="eml:Result">
                            <xsl:for-each select="rg:RG520">
                                <xsl:for-each select="rg:ElectoralDistrictsOverview">
                                    <xsl:for-each select="rg:ElectoralDistrictName[position() = $id]">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="ElectionName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name including date</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>de verkiezing van de leden van </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ElectionName_verkiezingLeden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> op </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_ElectionName_op"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="kr:ElectionDate">
                <xsl:call-template name="Date">
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ElectionNameShort">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name excluding date and &apos;verkiezing van...&apos;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Salutation">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="$isBold=0">
            <xsl:if test="0=1">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:if test="0=1">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Salutation &quot;Mr. &quot; or &quot;Mrs. &quot; with subsequent blank</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:if>
            <xsl:for-each select="eml:Gender">
                <xsl:choose>
                    <xsl:when test=".=&quot;male&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>dhr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_dhr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;female&quot; or .=&quot;unknown&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mevr. </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Salutation_mevr"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Address">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Street and house number &quot;Dasstraat 17&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:AddressLine">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PostalCodeCity">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Postal code and city like &quot;6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xal:Locality">
            <xsl:for-each select="xal:PostalCode">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
            <xsl:if test="count(xal:PostalCode/xal:PostalCodeNumber[text() != &quot;&quot;]) &gt; 0 and count(xal:LocalityName[text() != &quot;&quot;]) &gt; 0">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:for-each select="xal:LocalityName">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PartyName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>niet van toepassing (blanco lijst)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyName_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:if>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LastNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:param name="prefixToUppercase" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the last name &quot;Baron van der Zaag jr.&quot; (name components a+b+c+d).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs20\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:choose>
                            <xsl:when test="$prefixToUppercase = 0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="concat(translate(substring(., 1, 1), &apos;abcdefghijklmnopqrstuvwxyz&apos;, &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;), substring(., 2))"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials and first name like &quot;H.H.G. (Henk)&quot; (name components e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Gender">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g), if @PublishGender = &quot;true&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_Gender_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenderP1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g), if @PublishGender = &quot;true&quot;. In Frysian, gender female or unknown is &quot;(f)&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs20\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="../kr:ListData/@PublishGender=&quot;true&quot;">
                    <xsl:for-each select="eml:Gender">
                        <xsl:choose>
                            <xsl:when test=".=&quot;male&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (m)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_m"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;female&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (v)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_v"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test=".=&quot;unknown&quot;">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text> (f)</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_GenderP1_unknown"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                        </xsl:choose>
                    </xsl:for-each>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenderGeneral">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="Gender"/>
        <xsl:param name="PublishGender" select="&quot;true&quot;"/>
        <xsl:param name="PublicationLanguage" select="&quot;nl&quot;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; or &quot; (f)&quot; with preceding blank (name component g) or not at all. Does not read from XML but from parameters.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>*** $Gender = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$Gender"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, $PublicationLanguage = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$PublicationLanguage"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, $PublishGender = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$PublishGender"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, fontSize = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$fontSize"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot;, isBold = &quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="$isBold"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>&quot; ***</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$Gender != &quot;&quot; and $PublishGender = &quot;true&quot;">
            <xsl:if test="$fontSize = &apos;normal&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender = &quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&apos;unknown&apos; or ($Gender=&apos;female&apos; and $PublicationLanguage = &apos;fy&apos;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$fontSize = &apos;smaller&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
            <xsl:if test="$fontSize = &apos;x-small&apos;">
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test="$Gender=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;unknown&quot; or ($Gender=&quot;female&quot; and $PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test="$Gender=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="CompleteAddress">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Complete adress like &quot;Dasstraat 17, 6361 DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:AddressLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>, </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:for-each select="xal:PostalCode">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=".!=&quot;&quot;">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="NameBCEF">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="prefixToUppercase" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the name &quot;van der Zaag, H.H.G. (Henk)&quot; (name components b+c+e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="LastNameH1">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="prefixToUppercase" select="$prefixToUppercase"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>, </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:call-template name="FirstNameH1">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Kieskring">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="./eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;]  or ../eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;] or ../eml:Election/eml:ElectionIdentifier/kr:ElectionSubcategory[text()=&quot;TK&quot; or text()=&quot;EK&quot; or text()=&quot;PS2&quot;]">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> in kieskring </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_Kieskring_inKieskring"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="eml:ContestIdentifier/@Id != &quot;alle&quot;">
                    <xsl:call-template name="ContestIdentifier">
                        <xsl:with-param name="isBold" select="1"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:for-each select="rg:RG210">
                        <xsl:call-template name="ContestIdentifier">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:for-each>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
    </xsl:template>
    <xsl:template name="City">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>City (without postal code) &quot;DV Nuth&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xal:Locality">
                    <xsl:for-each select="xal:LocalityName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FootnoteSign">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="kr:ElectionSubcategory">
                <xsl:if test=".=&quot;TK&quot; or .=&quot;EK&quot; or .=&quot;PS2&quot;">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> *)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="FootnoteKieskring">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="kr:ElectionSubcategory">
                <xsl:if test=".=&quot;TK&quot; or .=&quot;EK&quot; or .=&quot;PS2&quot;">
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Voetnoten:</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_FootnoteKieskring_voetnoten"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\par\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_42" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_41" select="$altova:nMaxWidthIn * 0.90000"/>
                    <xsl:variable name="altova:nTableWidthTw_41" select="$altova:nTableWidthIn_41 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_41" select="round($altova:nTableWidthTw_41 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_41" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_41" select="round(0.00 + 1.03 * $altova:nTableWidthTw_41)"/>
                    <xsl:variable name="altova:TableWidthFactor_41">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_41 &gt; $altova:nTableWidthTw_41">
                                <xsl:value-of select="$altova:nTableWidthTw_41 div $altova:nSumColumnWidthsTw_41"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_41" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_41_0" select="round($altova:nTableWidthTw_41 * 0.03 * $altova:TableWidthFactor_41)"/>
                    <xsl:variable name="altova:nColumnWidthTw_41_1" select="round($altova:nTableWidthTw_41 * 1.00 * $altova:TableWidthFactor_41)"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle41">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_41)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_41"/>
                        <xsl:text>\ts97\ts98\trpaddt0\trpaddl0\trpaddb0\trpaddr0\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend41">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend41">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle126">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl41" select="$altova:nTableIndentTw_41"/>
                        <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_41_0 = $altova:nDefaultColumnWidthTw_41">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl41_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl41 + $altova:nColumnWidthTw_41_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl41_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_41_1 = $altova:nDefaultColumnWidthTw_41">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl41_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl41_Col0_AfterColumn + $altova:nColumnWidthTw_41_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl41_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle41"/>
                        <xsl:value-of select="$altova:RowStyle126"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>*)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend41"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Alleen in te vullen, indien het een verkiezing betreft van de leden van de Tweede Kamer of van provinciale staten van een provincie die uit meer dan één kieskring bestaat. Achter “kieskring” het nummer van de kieskring en tussen haakjes de naam van de gemeente waar het hoofdstembureau is gevestigd vermelden.</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_FootnoteKieskring_alleenInTeVullen"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend41"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle41"/>
                    <xsl:value-of select="$altova:RowStyle126"/>
                    <xsl:value-of select="$rowend41"/>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:if>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Date">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="DateOfBirth">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="eml:DateOfBirth">
                <xsl:for-each select="eml:DateOfBirth">
                    <xsl:call-template name="Date">
                        <xsl:with-param name="isBold" select="$isBold"/>
                        <xsl:with-param name="fontSize" select="$fontSize"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="$fontSize = &apos;normal&apos;">
                    <xsl:if test="$isBold=0">
                        <xsl:for-each select="kr:DateOfBirthAnnex">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>XX </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:choose>
                                <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>januari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>februari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>maart</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>april</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>mei</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juni</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juli</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>augustus</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>september</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>oktober</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>november</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>december</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>XXX</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                            </xsl:choose>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="substring(text(),7, 4)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$isBold = 1">
                    <xsl:for-each select="kr:DateOfBirthAnnex">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>XX </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:choose>
                            <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>XXX</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                        </xsl:choose>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="substring(text(),7, 4)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="GenerateDate">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$generateDate"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="HashCode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$hashCode"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="FooterWithoutHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$isDraft=&quot;true&quot;">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(Concept) </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_FooterWithoutHashcode_concept"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="GenerateDate">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Checkbox">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="text()=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>■</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Checkbox_iconChecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>  </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Checkbox_iconUnchecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>  </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="FooterWithHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$isDraft=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(Concept) | </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_concept"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Hashcode: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_hashcode"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="HashCode">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs16 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> | </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionNameP2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name without date</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>verkiezing van de leden van </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ElectionNameP2_verkiezingLeden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="CombinedListNumbers">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;list number&gt;&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:if test="position() != 1">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedList_en"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListNames">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;list name&gt;&quot; or for blanko lists &quot;blanco lijst met als eerste kandidaat &lt;last name of first candidate&gt;&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:if test="position() != 1">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>en </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_CombinedList_en"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                    <xsl:call-template name="CombinedListListName">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:if test="position() != 1">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>en </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_CombinedList_en"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                    <xsl:call-template name="CombinedListListName">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="CombinedListI17">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:choose>
                <xsl:when test="position() = 1">
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>- Lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_CombinedListI17_lijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$lang=0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> en lijst </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="$RP_CombinedListI17_enLijst"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>: </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="CombinedListListName">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="PostalCode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Postal code and city like &quot;6361 DV&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:PostalCode">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1">
            <xsl:for-each select="xal:Locality">
                <xsl:for-each select="xal:PostalCode">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="PartyNameInOmissions">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>If no name is registered, display &quot;blanco lijst met als eerste kandidaat...&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameInOmissions_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="FirstCandidateName">
                                <xsl:with-param name="prefixToUppercase" select="1"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:call-template name="KieskringParty">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="rg:CandidateListName">
                    <xsl:choose>
                        <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                            <xsl:for-each select="eml:AffiliationIdentifier">
                                <xsl:for-each select="eml:RegisteredName">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_PartyNameInOmissions_blancoLijst"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="FirstCandidateName">
                                <xsl:with-param name="prefixToUppercase" select="1"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:call-template name="KieskringParty">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24\f0\fs24</xsl:text>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFraction">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:for-each select="rg:Fraction">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>/</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:for-each select="@denominator">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Gender2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="isSmaller" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isSmaller=0">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$isSmaller=1">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenderInAffiliationVotes">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="isSmaller" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isSmaller=0">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../../@PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../../@PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$isSmaller=1">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../../@PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../../@PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenderRG">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="isSmaller" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; or &quot; (f)&quot; with preceding blank (name component g).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Based on template Gender2, but with Gender-Elements from RG namespace, not EML namspace.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isSmaller=0">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="rg:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot; and @PublicationLanguage = &quot;nl&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and @PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="rg:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot; and @PublicationLanguage = &quot;nl&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and @PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$isSmaller=1">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="rg:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot; and @PublicationLanguage = &quot;nl&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and @PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="rg:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot; and @PublicationLanguage = &quot;nl&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and @PublicationLanguage = &quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstCandidateName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="prefixToUppercase" select="0"/>
        <xsl:for-each select="rg:FirstCandidateName">
            <xsl:call-template name="LastNameH1">
                <xsl:with-param name="prefixToUppercase" select="$prefixToUppercase"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>, </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:call-template name="FirstNameH1">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:call-template name="GenderRG">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="SignatureBlock">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="distance" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_43" select="."/>
        <xsl:variable name="altova:nTableWidthIn_42" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_42" select="$altova:nTableWidthIn_42 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_42" select="round($altova:nTableWidthTw_42 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_42" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_42" select="round(2800.50)"/>
        <xsl:variable name="altova:TableWidthFactor_42">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_42 &gt; $altova:nTableWidthTw_42">
                    <xsl:value-of select="($altova:nTableWidthTw_42 - $altova:SumDefaultColumnsForWideTableTw_42) div $altova:nSumColumnWidthsTw_42"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_42" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_42">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_42 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_42"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_42">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_42 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_42 div $altova:nColumnsWithDefaultWidthNotZero_42"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_42 - $altova:nSumColumnWidthsTw_42) div $altova:nColumnsWithDefaultWidthNotZero_42)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_42_0" select="round(1.94 * 1440 * $altova:TableWidthFactor_42)"/>
        <xsl:variable name="altova:nColumnWidthTw_42_1" select="$altova:nDefaultColumnWidthTw_42"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle42">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_42)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_42"/>
            <xsl:text>\ts99\ts100\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend42">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend42">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle127">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl42" select="$altova:nTableIndentTw_42"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_42_0 = $altova:nDefaultColumnWidthTw_42">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl42_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl42 + $altova:nColumnWidthTw_42_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl42_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_42_1 = $altova:nDefaultColumnWidthTw_42">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl42_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl42_Col0_AfterColumn + $altova:nColumnWidthTw_42_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl42_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle42"/>
            <xsl:value-of select="$altova:RowStyle127"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend42"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Plaats: ........................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_plaats"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: .......................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................, Voorzitter</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_voorzitter"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>...................................................................... Leden</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_leden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:if test="$distance &gt;= 1">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$distance &gt;= 2">
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>......................................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend42"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle42"/>
        <xsl:value-of select="$altova:RowStyle127"/>
        <xsl:value-of select="$rowend42"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="SignatureBlock-3">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_44" select="."/>
        <xsl:variable name="altova:nTableWidthIn_43" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_43" select="$altova:nTableWidthIn_43 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_43" select="round($altova:nTableWidthTw_43 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_43" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_43" select="round(2800.50)"/>
        <xsl:variable name="altova:TableWidthFactor_43">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_43 &gt; $altova:nTableWidthTw_43">
                    <xsl:value-of select="($altova:nTableWidthTw_43 - $altova:SumDefaultColumnsForWideTableTw_43) div $altova:nSumColumnWidthsTw_43"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_43" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_43">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_43 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_43"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_43">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_43 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_43 div $altova:nColumnsWithDefaultWidthNotZero_43"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_43 - $altova:nSumColumnWidthsTw_43) div $altova:nColumnsWithDefaultWidthNotZero_43)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_43_0" select="round(1.94 * 1440 * $altova:TableWidthFactor_43)"/>
        <xsl:variable name="altova:nColumnWidthTw_43_1" select="$altova:nDefaultColumnWidthTw_43"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle43">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_43)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_43"/>
            <xsl:text>\ts101\ts102\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend43">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend43">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle128">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl43" select="$altova:nTableIndentTw_43"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_43_0 = $altova:nDefaultColumnWidthTw_43">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl43_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl43 + $altova:nColumnWidthTw_43_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl43_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_43_1 = $altova:nDefaultColumnWidthTw_43">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl43_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl43_Col0_AfterColumn + $altova:nColumnWidthTw_43_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl43_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle43"/>
            <xsl:value-of select="$altova:RowStyle128"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend43"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Plaats: ........................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_plaats"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: .......................................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>............................................., Voorzitter</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_voorzitter"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.............................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>............................................. Leden</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_leden"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>.............................................</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_SignatureBlock-3_emptyLine"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend43"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle43"/>
        <xsl:value-of select="$altova:RowStyle128"/>
        <xsl:value-of select="$rowend43"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="ElectionNameSimple">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Just election name</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory">
                <xsl:choose>
                    <xsl:when test=".=&quot;EP&quot; or .=&quot;BC&quot; or .=&quot;AB&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>het </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_het"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_de"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten van</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;AB&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van het </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_algemeen_bestuur"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="WaterschapTypeName">
                                <xsl:with-param name="isBold" select="$isBold"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;AB&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van het </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_algemeen_bestuur"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:call-template name="WaterschapTypeName">
                                <xsl:with-param name="isBold" select="$isBold"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test=".=&quot;PS&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;GR&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;ER&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van het openbaar lichaam</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_eilandsraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van stadsdeel</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_stadsdeel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Door de in de zittingsruimte aanwezige kiezers zijn</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1_aanwezigeKiezers"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="LineBreakTable">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ObjectionsByVoters1b">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="rg:ObjectionsByVoters">
            <xsl:for-each select="rg:NotesOnObjections">
                <xsl:choose>
                    <xsl:when test="../rg:NotesOnObjections[text() != &quot;&quot;]">
                        <xsl:choose>
                            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters2a">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>\par </xsl:text>
        <xsl:for-each select="rg:ObjectionsByVoters">
            <xsl:for-each select="rg:Objections">
                <xsl:choose>
                    <xsl:when test="../rg:Objections[text() != &quot;&quot;]">
                        <xsl:choose>
                            <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\pard</xsl:text>
                                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                                <xsl:text>\itap</xsl:text>
                                <xsl:value-of select="$templatetablelevel + 0"/>
                                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>\f0\fs24</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>.......................................................................................................................................</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ObjectionsByVoters2a_emptyLine"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LineBreakPdf">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>\par </xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="SmallLineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LineBreakTable">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="KieskringParty">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Additional information about the distrinct for which a centrally submitted list is nominated</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="eml:ContestIdentifier/@Id = &quot;alle&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in alle kieskringen</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inAlleKieskringen"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="eml:ContestIdentifier">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> in kieskring</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_KieskringParty_inKieskring"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="ContestIdentifier">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionDomain">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election domain as part of the elction name - if needed</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;medium&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;AB&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs26\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs26\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ContestIdentifier">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;medium&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:ContestIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs26 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:for-each select="eml:ContestName">
                        <xsl:text>{\f1\fs26 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>{\f1\fs26 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ObjectionsByVoters1b">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_45" select="."/>
        <xsl:variable name="altova:nTableWidthIn_44" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_44" select="$altova:nTableWidthIn_44 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_44" select="round($altova:nTableWidthTw_44 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_44" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_44" select="round(600.50)"/>
        <xsl:variable name="altova:TableWidthFactor_44">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_44 &gt; $altova:nTableWidthTw_44">
                    <xsl:value-of select="($altova:nTableWidthTw_44 - $altova:SumDefaultColumnsForWideTableTw_44) div $altova:nSumColumnWidthsTw_44"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_44" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_44">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_44 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_44"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_44">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_44 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_44 div $altova:nColumnsWithDefaultWidthNotZero_44"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_44 - $altova:nSumColumnWidthsTw_44) div $altova:nColumnsWithDefaultWidthNotZero_44)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_44_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_44)"/>
        <xsl:variable name="altova:nColumnWidthTw_44_1" select="$altova:nDefaultColumnWidthTw_44"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle44">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_44)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_44"/>
            <xsl:text>\ts103\ts104\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend44">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend44">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle129">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44" select="$altova:nTableIndentTw_44"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_44_0 = $altova:nDefaultColumnWidthTw_44">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl44 + $altova:nColumnWidthTw_44_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl44_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_44_1 = $altova:nDefaultColumnWidthTw_44">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl44_Col0_AfterColumn + $altova:nColumnWidthTw_44_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl44_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle44"/>
            <xsl:value-of select="$altova:RowStyle129"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend44"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ geen bezwaren ingebracht.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1b_geenBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend44"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle44"/>
        <xsl:value-of select="$altova:RowStyle129"/>
        <xsl:value-of select="$rowend44"/>
        <xsl:variable name="altova:RowStyle130">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44" select="$altova:nTableIndentTw_44"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_44_0 = $altova:nDefaultColumnWidthTw_44">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl44 + $altova:nColumnWidthTw_44_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl44_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_44_1 = $altova:nDefaultColumnWidthTw_44">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl44_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl44_Col0_AfterColumn + $altova:nColumnWidthTw_44_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl44_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle44"/>
            <xsl:value-of select="$altova:RowStyle130"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend44"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="string(rg:ObjectionsByVoters/rg:Objections) != &quot;&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>■</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ObjectionsByVoters1b_iconChecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ObjectionsByVoters1b_iconUnchecked"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> de volgende bezwaren ingebracht:</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsByVoters1b_volgendeBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend44"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle44"/>
        <xsl:value-of select="$altova:RowStyle130"/>
        <xsl:value-of select="$rowend44"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
        <xsl:call-template name="ObjectionsByVoters2a">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="Space">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="$fontSize=&quot;normal&quot;">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&quot;smaller&quot;">
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&apos;x-small&apos;">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFractionPart1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:param name="bold" select="0"/>
        <xsl:choose>
            <xsl:when test="$bold = 0">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="floor( @numerator  div  @denominator )"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionFractionPart2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="smaller" select="0"/>
        <xsl:param name="bold" select="0"/>
        <xsl:choose>
            <xsl:when test="$bold = 0">
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs20 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$smaller = 1">
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs20\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="rg:Fraction">
                            <xsl:if test="@numerator - ( floor(@numerator div  @denominator ) * @denominator) != 0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="@numerator - ( floor(@numerator div  @denominator ) * @denominator)"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>/</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:for-each select="@denominator">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="CombinedList2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>The lists that were combined as &quot;&lt;RegistererdName&gt; (lijst &lt;@Id&gt;)&quot; or for blanko lists &quot;blanco lijst met als eerste kandidaat &lt;last name of first candidate&gt; (lijst &lt;@Id&gt;)&quot;, separated by &quot;en&quot;.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="rg:CandidateListName">
            <xsl:if test="position() != 1">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>en </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedList2_en"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <xsl:call-template name="CombinedListListName">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (lijst </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CombinedList2_lijst"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="CombinedListListNumber">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>) </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListListNumber">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:for-each select="eml:AffiliationIdentifier">
            <xsl:choose>
                <xsl:when test="@Id != 0 and @Id != &quot;&quot;">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>   </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CombinedListListName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="./eml:AffiliationIdentifier/eml:RegisteredName[text() != &quot;&quot;]">
                <xsl:for-each select="eml:AffiliationIdentifier">
                    <xsl:for-each select="eml:RegisteredName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>blanco lijst met als eerste kandidaat </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_CombinedListListName_blancoLijst"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:for-each select="rg:FirstCandidateName">
                    <xsl:call-template name="LastNameH1">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Initials">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials like &quot; H.H.G.&quot; (name components f) with preceding blank.</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="xnl:PersonName">
            <xsl:for-each select="xnl:NameLine">
                <xsl:call-template name="Space">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Line">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>________</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_________________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="FooterLine">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>______</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>__________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="LegacyFooter">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isHashcode" select="1"/>
        <xsl:param name="isPagenumber" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_46" select="."/>
        <xsl:variable name="altova:nTableWidthIn_45" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_45" select="$altova:nTableWidthIn_45 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_45" select="round($altova:nTableWidthTw_45 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_45" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_45" select="round(0.00 + 1.00 * $altova:nTableWidthTw_45)"/>
        <xsl:variable name="altova:TableWidthFactor_45">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_45 &gt; $altova:nTableWidthTw_45">
                    <xsl:value-of select="$altova:nTableWidthTw_45 div $altova:nSumColumnWidthsTw_45"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_45" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_45_0" select="round($altova:nTableWidthTw_45 * 0.83 * $altova:TableWidthFactor_45)"/>
        <xsl:variable name="altova:nColumnWidthTw_45_1" select="round($altova:nTableWidthTw_45 * 0.17 * $altova:TableWidthFactor_45)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle45">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_45)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_45"/>
            <xsl:text>\ts105\ts106\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend45">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend45">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle131">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45" select="$altova:nTableIndentTw_45"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_0 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl45 + $altova:nColumnWidthTw_45_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_1 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl45_Col0_AfterColumn + $altova:nColumnWidthTw_45_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle45"/>
            <xsl:value-of select="$altova:RowStyle131"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle45"/>
        <xsl:value-of select="$altova:RowStyle131"/>
        <xsl:value-of select="$rowend45"/>
        <xsl:variable name="altova:RowStyle132">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45" select="$altova:nTableIndentTw_45"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_0 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl45 + $altova:nColumnWidthTw_45_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_1 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl45_Col0_AfterColumn + $altova:nColumnWidthTw_45_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle45"/>
            <xsl:value-of select="$altova:RowStyle132"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="FooterLine">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_45_0 div 1440) + ($altova:nColumnWidthTw_45_1 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle45"/>
        <xsl:value-of select="$altova:RowStyle132"/>
        <xsl:value-of select="$rowend45"/>
        <xsl:variable name="altova:RowStyle133">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45" select="$altova:nTableIndentTw_45"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_0 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl45 + $altova:nColumnWidthTw_45_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_45_1 = $altova:nDefaultColumnWidthTw_45">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl45_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl45_Col0_AfterColumn + $altova:nColumnWidthTw_45_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl45_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle45"/>
            <xsl:value-of select="$altova:RowStyle133"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isHashcode=1">
            <xsl:call-template name="FooterWithHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_45_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="$isHashcode=0">
            <xsl:call-template name="FooterWithoutHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_45_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isPagenumber=1">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>pagina </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text/>
            <xsl:text>\chpgn</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> / </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\field{\*\fldinst{\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend45"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle45"/>
        <xsl:value-of select="$altova:RowStyle133"/>
        <xsl:value-of select="$rowend45"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="Gender3">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot;hij&quot; or &quot;zij&quot;, if @PublishGender = &quot;true&quot;, otherwise as &quot;hij/zij&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="../kr:ListData/@PublishGender=&quot;true&quot;">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>hij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_hij"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zij</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender3_zij"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>hij/zij</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Gender3_hijZij"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Gender4">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot;hij&quot; or &quot;zij&quot;, if @PublishGender = &quot;true&quot;, otherwise as &quot;hij/zij&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="../kr:ListData/@PublishGender=&quot;true&quot;">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_him"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot; or (.=&quot;female&quot; and ../../kr:ListData/@PublicationLanguage=&quot;fy&quot;)">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>zich</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender4_har"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>zich</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_Gender4_himHar"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Contests">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="separator" select="&apos;comma&apos;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:for-each select="kr:ListData">
                <xsl:for-each select="kr:Contests">
                    <xsl:for-each select="kr:Contest">
                        <xsl:if test="$separator=&apos;newline&apos; and position()=1">
                            <xsl:text>\par </xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="$isBold = 0">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ObjectionsReference">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="authority" select="&apos;hoofstembureau&apos;"/>
        <xsl:param name="skipFirstSentence" select="0"/>
        <xsl:if test="$skipFirstSentence = 0">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Door de in de zittingsruimte aanwezige kiezers zijn</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_ObjectionsReference_aanwezigeKiezers"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:variable name="altova:CurrContextGrid_47" select="."/>
        <xsl:variable name="altova:nTableWidthIn_46" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_46" select="$altova:nTableWidthIn_46 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_46" select="round($altova:nTableWidthTw_46 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_46" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_46" select="round(901.00)"/>
        <xsl:variable name="altova:TableWidthFactor_46">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_46 &gt; $altova:nTableWidthTw_46">
                    <xsl:value-of select="($altova:nTableWidthTw_46 - $altova:SumDefaultColumnsForWideTableTw_46) div $altova:nSumColumnWidthsTw_46"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnsWithDefaultWidth_46" select="round(1)"/>
        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_46">
            <xsl:choose>
                <xsl:when test="$altova:nColumnsWithDefaultWidth_46 = 0">
                    <xsl:value-of select="round(1)"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_46"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_46">
            <xsl:choose>
                <xsl:when test="$altova:TableWidthFactor_46 &lt; 1">
                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_46 div $altova:nColumnsWithDefaultWidthNotZero_46"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="round(($altova:nTableWidthTw_46 - $altova:nSumColumnWidthsTw_46) div $altova:nColumnsWithDefaultWidthNotZero_46)"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nColumnWidthTw_46_0" select="round(0.42 * 1440 * $altova:TableWidthFactor_46)"/>
        <xsl:variable name="altova:nColumnWidthTw_46_1" select="round(0.21 * 1440 * $altova:TableWidthFactor_46)"/>
        <xsl:variable name="altova:nColumnWidthTw_46_2" select="$altova:nDefaultColumnWidthTw_46"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle46">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_46)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_46"/>
            <xsl:text>\ts107\ts108\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend46">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend46">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle134">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46" select="$altova:nTableIndentTw_46"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_0 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl46 + $altova:nColumnWidthTw_46_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_1 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl46_Col0_AfterColumn + $altova:nColumnWidthTw_46_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_2 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl46_Col1_AfterColumn + $altova:nColumnWidthTw_46_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle46"/>
            <xsl:value-of select="$altova:RowStyle134"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>geen bezwaren ingebracht.</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_geenBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle46"/>
        <xsl:value-of select="$altova:RowStyle134"/>
        <xsl:value-of select="$rowend46"/>
        <xsl:variable name="altova:RowStyle135">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46" select="$altova:nTableIndentTw_46"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_0 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl46 + $altova:nColumnWidthTw_46_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_1 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl46_Col0_AfterColumn + $altova:nColumnWidthTw_46_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col1_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_46_2 = $altova:nDefaultColumnWidthTw_46">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl46_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl46_Col1_AfterColumn + $altova:nColumnWidthTw_46_2"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl46_Col2_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle46"/>
            <xsl:value-of select="$altova:RowStyle135"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>□ </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_iconUnchecked"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>de volgende bezwaren ingebracht (zie gewaarmerkte bijlage voor bezwaren en opmerkingen daarover van het </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ObjectionsReference_volgendeBezwarenIngebracht"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$authority"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>).</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend46"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle46"/>
        <xsl:value-of select="$altova:RowStyle135"/>
        <xsl:value-of select="$rowend46"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="LivingAddress">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>City and Country code (if present) &quot;Amsterdam&quot; or &quot;Berlin (DE)&quot;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="kr:LivingAddress">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="kr:LocalityName">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="kr:CountryNameCode">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="kr:LocalityName">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
                <xsl:for-each select="kr:CountryNameCode">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> (</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:apply-templates>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:apply-templates>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="CompleteContactAddress">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:Contact">
            <xsl:for-each select="eml:MailingAddress">
                <xsl:call-template name="CompleteAddress">
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:Country">
                    <xsl:call-template name="CompleteAddress">
                        <xsl:with-param name="fontSize" select="$fontSize"/>
                        <xsl:with-param name="isBold" select="$isBold"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:for-each select="xal:CountryNameCode">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:if test="$fontSize = &apos;normal&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                        <xsl:if test="$fontSize = &apos;x-small&apos;">
                            <xsl:if test="$isBold = 0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                            <xsl:if test="$isBold = 1">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>(</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>)</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:if>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="QualifyingAddressCity">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:for-each select="eml:QualifyingAddress">
            <xsl:call-template name="City">
                <xsl:with-param name="isBold" select="$isBold"/>
                <xsl:with-param name="fontSize" select="$fontSize"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:for-each select="xal:Country">
                <xsl:call-template name="City">
                    <xsl:with-param name="isBold" select="$isBold"/>
                    <xsl:with-param name="fontSize" select="$fontSize"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:for-each select="xal:CountryNameCode">
                    <xsl:call-template name="Space">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:if test="$fontSize = &apos;normal&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;smaller&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs20\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                    <xsl:if test="$fontSize = &apos;x-small&apos;">
                        <xsl:if test="$isBold = 0">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>(</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:if>
                    </xsl:if>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ChapterElection">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isH3" select="0"/>
        <xsl:param name="isU16" select="0"/>
        <xsl:param name="province" select="&apos;&apos;"/>
        <xsl:text>{\f1\fs21\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>1. </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Verkiezing</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterElection_Verkiezing"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isH3 = 0">
                <xsl:choose>
                    <xsl:when test="$isU16 = 0">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Het gaat om de verkiezing van:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ChapterElection_HetGaatOmVerkiezing"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>Het gaat om de verkiezing van de leden van:</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ChapterElection_HetGaatOmVerkiezingVanLeden"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de kandidatenlijst voor de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterElection_HetGaatOmKandidatenlijst"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:call-template name="ElectionNameShort">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:if test="$province != &apos;&apos;">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> voor de provincie </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_ChapterElection_VoorDeProvincie"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:for-each select="$province">
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:apply-templates>
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:apply-templates>
                <xsl:text>}</xsl:text>
            </xsl:for-each>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory[.=&apos;EK&apos;]"/>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ChapterDistrictsOptions">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="eml:ContestIdentifier[@Id != &quot;alle&quot;]">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>uitsluitend voor de volgende kieskring(en): </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_uitsluitend"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count(eml:Affiliation/kr:ListData/kr:Contests/kr:Contest) &gt; 0">
                        <xsl:call-template name="Contests">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="eml:ContestIdentifier">
                            <xsl:for-each select="eml:ContestName">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:apply-templates>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:apply-templates>
                                <xsl:text>}</xsl:text>
                            </xsl:for-each>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>voor </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_voor"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>alle kieskringen</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_alleKieskringen"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> waarvoor de kandidatenlijst wordt ingeleverd.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterDistrictOptions_waarvoorIngeleverd"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="ChapterDistrictsTitle">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Kieskringen</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterDistrictTitle_Kieskringen"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>{\f1\fs21\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="$lang = 0">
                <xsl:text>{\f1\fs18\i </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>(alleen invullen bij de verkiezing van de Tweede Kamer, Eerste Kamer, of de provinciale staten van een provincie met meer dan één kieskring)</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18\i </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterDistrictTitle_alleenInvullen"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ChapterPartyName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isH3" select="0"/>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:text>{\f1\fs21\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>3. </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="//eml:ElectionCategory[.!=&quot;BC&quot;]">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding van de politieke groepering</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingVan"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding van de (politieke) groepering</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingVan_BC"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isH3 = 1">
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>De geregistreerde aanduiding van de politieke groepering: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_geregistreerdeAanduiding"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$isH3 = 2">
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>De samengevoegde aanduiding van de politieke groeperingen: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_samengevoegdeAanduiding"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang = 0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Aanduiding boven de kandidatenlijst: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterPartyName_AanduidingBoven"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:for-each select="eml:Affiliation">
            <xsl:call-template name="PartyName">
                <xsl:with-param name="isBold" select="1"/>
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
        </xsl:for-each>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="CandidatesOnListTable">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="showDateOfBirth" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:variable name="altova:CurrContextGrid_48" select="."/>
            <xsl:variable name="altova:nTableWidthIn_47" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_47" select="$altova:nTableWidthIn_47 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_47" select="round($altova:nTableWidthTw_47 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_47" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_47" select="round(9122.50)"/>
            <xsl:variable name="altova:TableWidthFactor_47">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_47 &gt; $altova:nTableWidthTw_47">
                        <xsl:value-of select="$altova:nTableWidthTw_47 div $altova:nSumColumnWidthsTw_47"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_47" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_47_0" select="round(0.28 * 1440 * $altova:TableWidthFactor_47)"/>
            <xsl:variable name="altova:nColumnWidthTw_47_1" select="round(2.01 * 1440 * $altova:TableWidthFactor_47)"/>
            <xsl:variable name="altova:nColumnWidthTw_47_2" select="round(1.46 * 1440 * $altova:TableWidthFactor_47)"/>
            <xsl:variable name="altova:nColumnWidthTw_47_3" select="round(1.06 * 1440 * $altova:TableWidthFactor_47)"/>
            <xsl:variable name="altova:nColumnWidthTw_47_4" select="round(1.53 * 1440 * $altova:TableWidthFactor_47)"/>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle47">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth1</xsl:text>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_47"/>
                <xsl:text>\ts109\ts110\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend47">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend47">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle136">
                <xsl:text>\trrh0\trhdr</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47" select="$altova:nTableIndentTw_47"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_47_0 = $altova:nDefaultColumnWidthTw_47">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl47 + $altova:nColumnWidthTw_47_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col0_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_47_1 = $altova:nDefaultColumnWidthTw_47">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col0_AfterColumn + $altova:nColumnWidthTw_47_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col1_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_47_2 = $altova:nDefaultColumnWidthTw_47">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col1_AfterColumn + $altova:nColumnWidthTw_47_2"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col2_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_47_3 = $altova:nDefaultColumnWidthTw_47">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col2_AfterColumn + $altova:nColumnWidthTw_47_3"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col3_AfterColumn)"/>
                <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_47_4 = $altova:nDefaultColumnWidthTw_47">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl47_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col3_AfterColumn + $altova:nColumnWidthTw_47_4"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col4_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle47"/>
                <xsl:value-of select="$altova:RowStyle136"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend47"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>naam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-naam"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend47"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>voorletters</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-voorletters"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend47"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>geboortedatum</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-geboortedatum"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\par </xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend47"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>woonplaats</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_CandidatesOnListTable-woonplaats"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend47"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle47"/>
            <xsl:value-of select="$altova:RowStyle136"/>
            <xsl:value-of select="$rowend47"/>
            <xsl:for-each select="eml:Candidate">
                <xsl:variable name="altova:RowStyle137">
                    <xsl:text>\trrh0</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47" select="$altova:nTableIndentTw_47"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_47_0 = $altova:nDefaultColumnWidthTw_47">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl47 + $altova:nColumnWidthTw_47_0"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col0_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_47_1 = $altova:nDefaultColumnWidthTw_47">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col0_AfterColumn + $altova:nColumnWidthTw_47_1"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col1_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_47_2 = $altova:nDefaultColumnWidthTw_47">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col1_AfterColumn + $altova:nColumnWidthTw_47_2"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col2_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_47_3 = $altova:nDefaultColumnWidthTw_47">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col2_AfterColumn + $altova:nColumnWidthTw_47_3"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col3_AfterColumn)"/>
                    <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                    <xsl:if test="$altova:nColumnWidthTw_47_4 = $altova:nDefaultColumnWidthTw_47">
                        <xsl:text>\clftsWidth1</xsl:text>
                    </xsl:if>
                    <xsl:text>\cellx</xsl:text>
                    <xsl:variable name="altova:CurrGridPos_Tbl47_Col4_AfterColumn" select="$altova:CurrGridPos_Tbl47_Col3_AfterColumn + $altova:nColumnWidthTw_47_4"/>
                    <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl47_Col4_AfterColumn)"/>
                </xsl:variable>
                <xsl:if test="$templatetablelevel + 1 = 1">
                    <xsl:value-of select="$tablestyle47"/>
                    <xsl:value-of select="$altova:RowStyle137"/>
                </xsl:if>
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 1"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:CandidateIdentifier">
                    <xsl:for-each select="@Id">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="string(.)"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend47"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:CandidateFullName">
                    <xsl:call-template name="LastNameH1">
                        <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_47_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend47"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:for-each select="eml:CandidateFullName">
                    <xsl:call-template name="FirstNameH1">
                        <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_47_2 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                </xsl:for-each>
                <xsl:call-template name="GenderP1">
                    <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_47_2 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend47"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="eml:DateOfBirth">
                        <xsl:for-each select="eml:DateOfBirth">
                            <xsl:call-template name="Date">
                                <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_47_3 div 1440) - 0.02083 - 0.02083"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="kr:DateOfBirthAnnex">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>XX </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:choose>
                                <xsl:when test="substring(text(),4, 2) = &quot;01&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>januari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;02&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>februari</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;03&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>maart</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;04&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>april</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;05&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>mei</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;06&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juni</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;07&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>juli</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;08&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>augustus</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;09&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>september</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;10&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>oktober</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2) = &quot;11&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>november</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;12&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>december</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="substring(text(),4, 2)  = &quot;XX&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>XXX</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                            </xsl:choose>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:value-of select="substring(text(),7, 4)"/>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend47"/>
                <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                <xsl:call-template name="QualifyingAddressCity">
                    <xsl:with-param name="fontSize" select="&apos;x-small&apos;"/>
                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_47_4 div 1440) - 0.02083 - 0.02083"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                </xsl:call-template>
                <xsl:text>\f0\fs24</xsl:text>
                <xsl:value-of select="$cellend47"/>
                <xsl:if test="$templatetablelevel + 1 > 1">
                    <xsl:text>{\*\nesttableprops</xsl:text>
                </xsl:if>
                <xsl:value-of select="$tablestyle47"/>
                <xsl:value-of select="$altova:RowStyle137"/>
                <xsl:value-of select="$rowend47"/>
            </xsl:for-each>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="Filter0">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:choose>
            <xsl:when test="text() = &quot;0&quot;">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>________________</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$isBold = 1">
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:choose>
                    <xsl:when test="self::*">
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="string(.)"/>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:choose>
                    <xsl:when test="self::*">
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="string(.)"/>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="AffiliationVotes">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isP22" select="false()"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="rg:AffiliationVotes">
            <xsl:if test="position() != 1">
                <xsl:call-template name="LineBreakPdf">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:text>\par </xsl:text>
            <xsl:variable name="altova:CurrContextGrid_49" select="."/>
            <xsl:variable name="altova:nTableWidthIn_48" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_48" select="$altova:nTableWidthIn_48 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_48" select="round($altova:nTableWidthTw_48 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_48" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_48" select="round(9001.00)"/>
            <xsl:variable name="altova:TableWidthFactor_48">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_48 &gt; $altova:nTableWidthTw_48">
                        <xsl:value-of select="$altova:nTableWidthTw_48 div $altova:nSumColumnWidthsTw_48"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_48" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_48_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_48)"/>
            <xsl:variable name="altova:nColumnWidthTw_48_1" select="round(4.03 * 1440 * $altova:TableWidthFactor_48)"/>
            <xsl:text>\pard\f0\fs24</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle48">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_48)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_48"/>
                <xsl:text>\ts111\ts112\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend48">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend48">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle138">
                <xsl:text>\trrh270</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48" select="$altova:nTableIndentTw_48"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_48_0 = $altova:nDefaultColumnWidthTw_48">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl48 + $altova:nColumnWidthTw_48_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl48_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_48_1 = $altova:nDefaultColumnWidthTw_48">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl48_Col0_AfterColumn + $altova:nColumnWidthTw_48_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl48_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle48"/>
                <xsl:value-of select="$altova:RowStyle138"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\sa80\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$isP22">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Aanduiding politieke groepering</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Partijnaam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend48"/>
            <xsl:text>\ql\sl0\sa80\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="eml:RegisteredName">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_48_1 div 1440) - 0.01042 - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:when>
                <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\sa80\f1\fs18\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="eml:RegisteredName">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_48_1 div 1440) - 0.01042 - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24\f0\fs24</xsl:text>
                </xsl:when>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend48"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle48"/>
            <xsl:value-of select="$altova:RowStyle138"/>
            <xsl:value-of select="$rowend48"/>
            <xsl:variable name="altova:RowStyle139">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48" select="$altova:nTableIndentTw_48"/>
                <xsl:text>\clvertalc\clbrdrl\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_48_0 = $altova:nDefaultColumnWidthTw_48">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl48 + $altova:nColumnWidthTw_48_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl48_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_48_1 = $altova:nDefaultColumnWidthTw_48">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl48_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl48_Col0_AfterColumn + $altova:nColumnWidthTw_48_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl48_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle48"/>
                <xsl:value-of select="$altova:RowStyle139"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\sa80\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18\b </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Lijstnummer</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend48"/>
            <xsl:text>\ql\sl0\sa80\f1\fs18 </xsl:text>
            <xsl:for-each select="eml:AffiliationIdentifier">
                <xsl:for-each select="@Id">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend48"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle48"/>
            <xsl:value-of select="$altova:RowStyle139"/>
            <xsl:value-of select="$rowend48"/>
            <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:choose>
                <xsl:when test="rg:CandidateVotes">
                    <xsl:variable name="altova:CurrContextGrid_50" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_49" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_49" select="$altova:nTableWidthIn_49 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_49" select="round($altova:nTableWidthTw_49 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_49" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_49" select="round(9001.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_49">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_49 &gt; $altova:nTableWidthTw_49">
                                <xsl:value-of select="$altova:nTableWidthTw_49 div $altova:nSumColumnWidthsTw_49"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_49" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_49_0" select="round(0.83 * 1440 * $altova:TableWidthFactor_49)"/>
                    <xsl:variable name="altova:nColumnWidthTw_49_1" select="round(4.33 * 1440 * $altova:TableWidthFactor_49)"/>
                    <xsl:variable name="altova:nColumnWidthTw_49_2" select="round(1.08 * 1440 * $altova:TableWidthFactor_49)"/>
                    <xsl:text>\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle49">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_49)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_49"/>
                        <xsl:text>\ts113\ts114\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend49">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend49">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle140">
                        <xsl:text>\trrh0\trhdr</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49" select="$altova:nTableIndentTw_49"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_0 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl49 + $altova:nColumnWidthTw_49_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_1 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col0_AfterColumn + $altova:nColumnWidthTw_49_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_2 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col1_AfterColumn + $altova:nColumnWidthTw_49_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle49"/>
                        <xsl:value-of select="$altova:RowStyle140"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$isP22">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Volgnummer</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Nummer</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>op de lijst</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Naam kandidaat</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Aantal stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle49"/>
                    <xsl:value-of select="$altova:RowStyle140"/>
                    <xsl:value-of select="$rowend49"/>
                    <xsl:for-each select="rg:CandidateVotes">
                        <xsl:sort select="eml:Candidate/eml:CandidateIdentifier/@Id" data-type="number" order="ascending"/>
                        <xsl:variable name="altova:RowStyle141">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl49" select="$altova:nTableIndentTw_49"/>
                            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_49_0 = $altova:nDefaultColumnWidthTw_49">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl49_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl49 + $altova:nColumnWidthTw_49_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_49_1 = $altova:nDefaultColumnWidthTw_49">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl49_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col0_AfterColumn + $altova:nColumnWidthTw_49_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_49_2 = $altova:nDefaultColumnWidthTw_49">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl49_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col1_AfterColumn + $altova:nColumnWidthTw_49_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle49"/>
                            <xsl:value-of select="$altova:RowStyle141"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:for-each select="eml:CandidateIdentifier">
                                <xsl:for-each select="@Id">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend49"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:for-each select="eml:CandidateFullName">
                                <xsl:call-template name="LastNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_49_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:call-template>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>, </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="FirstNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_49_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:call-template>
                            </xsl:for-each>
                            <xsl:call-template name="GenderInAffiliationVotes">
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_49_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend49"/>
                        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                        <xsl:for-each select="rg:ValidVotes">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_49_2 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend49"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle49"/>
                        <xsl:value-of select="$altova:RowStyle141"/>
                        <xsl:value-of select="$rowend49"/>
                    </xsl:for-each>
                    <xsl:variable name="altova:RowStyle142">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49" select="$altova:nTableIndentTw_49"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_0 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl49 + $altova:nColumnWidthTw_49_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_1 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col0_AfterColumn + $altova:nColumnWidthTw_49_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_49_2 = $altova:nDefaultColumnWidthTw_49">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl49_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl49_Col1_AfterColumn + $altova:nColumnWidthTw_49_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl49_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle49"/>
                        <xsl:value-of select="$altova:RowStyle142"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:choose>
                        <xsl:when test="$isP22">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>stemcijfer</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Totaal (stemcijfer)</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:ValidVotes">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_49_2 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend49"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle49"/>
                    <xsl:value-of select="$altova:RowStyle142"/>
                    <xsl:value-of select="$rowend49"/>
                    <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="altova:CurrContextGrid_51" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_50" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_50" select="$altova:nTableWidthIn_50 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_50" select="round($altova:nTableWidthTw_50 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_50" select="15"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_50" select="round(0.00)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_50" select="round(2)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_50">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_50 = 0">
                                <xsl:value-of select="round(2)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_50"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_50">
                        <xsl:value-of select="$altova:nTableWidthTw_50 div $altova:nColumnsWithDefaultWidthNotZero_50"/>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_50_0" select="$altova:nDefaultColumnWidthTw_50"/>
                    <xsl:variable name="altova:nColumnWidthTw_50_1" select="$altova:nDefaultColumnWidthTw_50"/>
                    <xsl:text>\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle50">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth1</xsl:text>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_50"/>
                        <xsl:text>\ts115\ts116\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf142\brdrw15\trbrdrl\brdrs\brdrcf142\brdrw15\trbrdrb\brdrs\brdrcf142\brdrw15\trbrdrr\brdrs\brdrcf142\brdrw15</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend50">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend50">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle143">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl50" select="$altova:nTableIndentTw_50"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf143\brdrw15\clbrdrb\brdrs\brdrcf144\brdrw15\clbrdrl\brdrs\brdrcf143\brdrw15\clbrdrr\brdrs\brdrcf144\brdrw15\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_50_0 = $altova:nDefaultColumnWidthTw_50">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl50_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl50 + $altova:nColumnWidthTw_50_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl50_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf143\brdrw15\clbrdrb\brdrs\brdrcf144\brdrw15\clbrdrl\brdrs\brdrcf143\brdrw15\clbrdrr\brdrs\brdrcf144\brdrw15\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_50_1 = $altova:nDefaultColumnWidthTw_50">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl50_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl50_Col0_AfterColumn + $altova:nColumnWidthTw_50_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl50_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle50"/>
                        <xsl:value-of select="$altova:RowStyle143"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Totale aantal op de lijst</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>uitgebrachte geldige stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend50"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:ValidVotes">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_50_1 div 1440) - 0.01042 - 0.01042 - 0.02083 - 0.02083"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend50"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle50"/>
                    <xsl:value-of select="$altova:RowStyle143"/>
                    <xsl:value-of select="$rowend50"/>
                    <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="LineBreakPdf">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>\par </xsl:text>
            <xsl:text>\page </xsl:text>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="WaterschapTypeName">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="contestId" select="//kr:ElectionDomain/@Id"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:choose>
            <xsl:when test="$font-size = &apos;medium&apos;">
                <xsl:choose>
                    <xsl:when test="$isBold = 0">
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs26\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$isBold = 0">
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18 </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$contestId = 2">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>wetterskip</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Wetterskip"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 9 or $contestId = 10 or $contestId = 11">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:when test="$contestId = 12 or $contestId = 13 or $contestId = 14">
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>hoogheemraadschap van</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Hoogheemraadschap_van"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:choose>
                                    <xsl:when test="$lang=0">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:text>waterschap</xsl:text>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:call-template name="write-text">
                                            <xsl:with-param name="text">
                                                <xsl:value-of select="$RP_WaterschapTypeName_Waterschap"/>
                                            </xsl:with-param>
                                        </xsl:call-template>
                                        <xsl:text>}</xsl:text>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterRight">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterLeft">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="EmptyHeader"/>
    <xsl:template name="write-text">
        <xsl:param name="text"/>
        <xsl:param name="bEscape" select="true()"/>
        <xsl:choose>
            <xsl:when test="$bEscape">
                <xsl:variable name="sLinefeed" select="'&#x0A;'"/>
                <xsl:choose>
                    <xsl:when test="contains($text, $sLinefeed)">
                        <xsl:variable name="first-line" select="substring-before($text, $sLinefeed)"/>
                        <xsl:variable name="rest" select="substring-after($text, $sLinefeed)"/>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$first-line"/>
                        </xsl:call-template>
                        <xsl:text>\u13?</xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text" select="$rest"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$text"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($text)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-line">
        <xsl:param name="text"/>
        <xsl:variable name="text-length" select="string-length($text)"/>
        <xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
        <xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
        <xsl:choose>
            <xsl:when test="$text-after-bs-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '\'">
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\\')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-bs-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-line">
                    <xsl:with-param name="text" select="$text-after-bs"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-ob">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-ob" select="substring-after($text, '{')"/>
        <xsl:variable name="text-after-ob-length" select="string-length($text-after-ob)"/>
        <xsl:choose>
            <xsl:when test="$text-after-ob-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '{'">
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\{')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-ob-length - 1), '\{')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-ob-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="$text-after-ob"/>
                    <xsl:with-param name="text-length" select="$text-after-ob-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-cb">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-cb" select="substring-after($text, '}')"/>
        <xsl:variable name="text-after-cb-length" select="string-length($text-after-cb)"/>
        <xsl:choose>
            <xsl:when test="$text-after-cb-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '}'">
                        <xsl:value-of select="concat(substring($text,1,$text-length - 1), '\}')"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$text"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat(substring($text,1,$text-length - $text-after-cb-length - 1), '\}')"/>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="$text-after-cb"/>
                    <xsl:with-param name="text-length" select="$text-after-cb-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="text()|@*">
        <xsl:call-template name="write-text">
            <xsl:with-param name="text" select="."/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:GetColorID">
        <xsl:param name="text"/>
        <xsl:variable name="txt" select="translate($text, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$txt = 'WHITE'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'IVORY'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTYELLOW'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOW'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SNOW'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FLORALWHITE'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LEMONCHIFFON'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNSILK'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEASHELL'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDERBLUSH'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PAPAYAWHIP'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLANCHEDALMOND'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MISTYROSE'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BISQUE'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MOCCASIN'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVAJOWHITE'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PEACHPUFF'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLD'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PINK'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTPINK'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGE'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSALMON'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORANGE'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORAL'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HOTPINK'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TOMATO'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGERED'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPPINK'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FUCHSIA'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAGENTA'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'RED'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLDLACE'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGOLDENRODYELLOW'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LINEN'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ANTIQUEWHITE'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SALMON'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GHOSTWHITE'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MINTCREAM'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHITESMOKE'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BEIGE'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHEAT'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SANDYBROWN'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AZURE'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HONEYDEW'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ALICEBLUE'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'KHAKI'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCORAL'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGOLDENROD'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'VIOLET'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSALMON'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDER'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCYAN'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BURLYWOOD'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PLUM'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GAINSBORO'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CRIMSON'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEVIOLETRED'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLDENROD'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORCHID'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'THISTLE'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGRAY'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TAN'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHOCOLATE'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PERU'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIANRED'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMVIOLETRED'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SILVER'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKKHAKI'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROSYBROWN'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMORCHID'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGOLDENROD'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FIREBRICK'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'POWDERBLUE'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSTEELBLUE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALETURQUOISE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREENYELLOW'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTBLUE'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGRAY'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BROWN'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SIENNA'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOWGREEN'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORCHID'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGREEN'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKVIOLET'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMPURPLE'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGREEN'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSEAGREEN'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SADDLEBROWN'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKMAGENTA'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKRED'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUEVIOLET'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSKYBLUE'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SKYBLUE'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GRAY'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVE'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PURPLE'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAROON'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUAMARINE'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHARTREUSE'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAWNGREEN'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSLATEBLUE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSLATEGRAY'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEGRAY'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVEDRAB'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEBLUE'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DIMGRAY'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMAQUAMARINE'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNFLOWERBLUE'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CADETBLUE'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKOLIVEGREEN'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIGO'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMTURQUOISE'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEBLUE'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'STEELBLUE'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROYALBLUE'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TURQUOISE'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSEAGREEN'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIMEGREEN'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEGRAY'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEAGREEN'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FORESTGREEN'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSEAGREEN'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DODGERBLUE'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MIDNIGHTBLUE'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CYAN'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUA'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SPRINGGREEN'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIME'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSPRINGGREEN'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKTURQUOISE'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPSKYBLUE'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKCYAN'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TEAL'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREEN'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGREEN'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUE'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMBLUE'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKBLUE'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVY'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLACK'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFFF'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFF0'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFE0'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFF00'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAFA'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAF0'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFACD'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF8DC'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF5EE'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF0F5'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEFD5'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEBCD'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4E1'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4C4'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4B5'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDEAD'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDAB9'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFD700'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFC0CB'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFB6C1'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA500'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA07A'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF8C00'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF7F50'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF69B4'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF6347'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF4500'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF1493'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF0000'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FDF5E6'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAFAD2'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAF0E6'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAEBD7'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FA8072'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F8F8FF'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5FFFA'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5F5'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5DC'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5DEB3'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F4A460'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFFF'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFF0'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0F8FF'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0E68C'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F08080'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EEE8AA'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EE82EE'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E9967A'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E6E6FA'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E0FFFF'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEB887'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DDA0DD'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DCDCDC'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DC143C'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DB7093'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DAA520'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DA70D6'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D8BFD8'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D3D3D3'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2B48C'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2691E'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD853F'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD5C5C'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C71585'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C0C0C0'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BDB76B'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BC8F8F'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BA55D3'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B8860B'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B22222'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0E0E6'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0C4DE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AFEEEE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADFF2F'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADD8E6'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A9A9A9'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A52A2A'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A0522D'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9ACD32'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9932CC'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '98FB98'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9400D3'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9370DB'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '90EE90'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8FBC8B'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B4513'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B008B'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B0000'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8A2BE2'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEFA'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEEB'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808080'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808000'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800080'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800000'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFFD4'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFF00'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7CFC00'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7B68EE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '778899'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '708090'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6B8E23'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6A5ACD'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '696969'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '66CDAA'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6495ED'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '5F9EA0'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '556B2F'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4B0082'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '48D1CC'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '483D8B'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4682B4'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4169E1'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '40E0D0'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '3CB371'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '32CD32'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2F4F4F'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2E8B57'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '228B22'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '20B2AA'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '1E90FF'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '191970'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF7F'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF00'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FA9A'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00CED1'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00BFFF'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008B8B'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008080'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008000'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '006400'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000FF'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000CD'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00008B'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000080'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000000'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetFontID">
        <xsl:param name="font"/>
        <xsl:variable name="font-upper" select="translate($font, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$font-upper = 'TIMES NEW ROMAN'">
                <xsl:text>0</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'ARIAL'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'SYMBOL'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'WINGDINGS'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetRtfBorderStyle">
        <xsl:param name="style"/>
        <xsl:choose>
            <xsl:when test="$style='none'">
                <xsl:text>\brdrnil</xsl:text>
            </xsl:when>
            <xsl:when test="$style='hidden'">
                <xsl:text>\brdrnone</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dotted'">
                <xsl:text>\brdrdot</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dashed'">
                <xsl:text>\brdrdash</xsl:text>
            </xsl:when>
            <xsl:when test="$style='solid'">
                <xsl:text>\brdrs</xsl:text>
            </xsl:when>
            <xsl:when test="$style='double'">
                <xsl:text>\brdrd</xsl:text>
            </xsl:when>
            <xsl:when test="$style='groove'">
                <xsl:text>\brdrengrave</xsl:text>
            </xsl:when>
            <xsl:when test="$style='ridge'">
                <xsl:text>\brdremboss</xsl:text>
            </xsl:when>
            <xsl:when test="$style='inset'">
                <xsl:text>\brdrinset</xsl:text>
            </xsl:when>
            <xsl:when test="$style='outset'">
                <xsl:text>\brdroutset</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\brdrnil</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:ConvertWidthToTwips">
        <xsl:param name="width"/>
        <xsl:variable name="normal-width" select="normalize-space($width)"/>
        <xsl:choose>
            <xsl:when test="contains($normal-width,'px')">
                <xsl:value-of select="(number(substring-before($normal-width,'px')) * 1440) div $altova:nPxPerIn"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'cm')">
                <xsl:value-of select="(number(substring-before($normal-width,'cm')) * 1440) div 2.54"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'mm')">
                <xsl:value-of select="(number(substring-before($normal-width,'mm')) * 1440) div 25.4"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'in')">
                <xsl:value-of select="number(substring-before($normal-width,'in')) * 1440"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pc')">
                <xsl:value-of select="number(substring-before($normal-width,'pc')) * 240"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pt')">
                <xsl:value-of select="number(substring-before($normal-width,'pt')) * 20"/>
            </xsl:when>
            <xsl:when test="$normal-width='thin'">
                <xsl:value-of select="30"/>
            </xsl:when>
            <xsl:when test="$normal-width='medium'">
                <xsl:value-of select="60"/>
            </xsl:when>
            <xsl:when test="$normal-width='thick'">
                <xsl:value-of select="80"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
