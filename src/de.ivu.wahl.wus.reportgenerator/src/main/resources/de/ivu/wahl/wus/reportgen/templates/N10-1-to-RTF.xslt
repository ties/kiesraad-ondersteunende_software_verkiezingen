<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2014 sp1 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:clitype="clitype" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:eml="urn:oasis:names:tc:evs:schema:eml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:kr="http://www.kiesraad.nl/extensions" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:rg="http://www.kiesraad.nl/reportgenerator" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:ts="urn:oasis:names:tc:evs:schema:eml:ts" xmlns:xal="urn:oasis:names:tc:ciq:xsdschema:xAL:2.0" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xnl="urn:oasis:names:tc:ciq:xsdschema:xNL:2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="altova altovaext clitype ds eml fn iso4217 ix java kr link rg sps ts xal xbrldi xbrli xlink xnl xs xsi">
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\reused-parts-simple-text.xslt"/>
    <xsl:import href="D:\projekte\de.ivu.wahl.wus.reportgenerator\src\main\resources\de\ivu\wahl\wus\reportgen\text\nl\N11-text.xslt"/>
    <xsl:output method="text" encoding="UTF-8"/>
    <xsl:param name="SV_OutputFormat" select="'RTF'"/>
    <xsl:param name="generateDate" select="'01-02-2003 04:05:06'"/>
    <xsl:param name="hashCode" select="'12 34 56 78 90 AB CD EF 12 34 56 78 90 AB CD EF FF FF FF FF'"/>
    <xsl:param name="isDraft" select="'false'"/>
    <xsl:param name="lang" select="'1'"/>
    <xsl:variable name="XML" select="/"/>
    <xsl:variable name="altova:nPxPerIn" select="96"/>
    <xsl:template match="*" priority="-1.0">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:apply-templates>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:apply-templates>
    </xsl:template>
    <xsl:template match="/">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:text>{\rtf1\ansi\deff0</xsl:text>
        <xsl:text>{\fonttbl{\f0\fnil Times New Roman;}{\f1\fnil Arial;}{\f2\fnil Symbol;}{\f3\fnil Wingdings;}}</xsl:text>
        <xsl:text>{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red0\green0\blue139;\red0\green0\blue205;\red0\green0\blue255;\red0\green100\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green139\blue139;\red0\green191\blue255;\red0\green206\blue209;\red0\green250\blue154;\red0\green255\blue0;\red0\green255\blue127;\red0\green255\blue255;\red0\green255\blue255;\red25\green25\blue112;\red30\green144\blue255;\red32\green178\blue170;\red34\green139\blue34;\red46\green139\blue87;\red47\green79\blue79;\red50\green205\blue50;\red60\green179\blue113;\red64\green224\blue208;\red65\green105\blue225;\red70\green130\blue180;\red72\green61\blue139;\red72\green209\blue204;\red75\green0\blue130;\red85\green107\blue47;\red95\green158\blue160;\red100\green149\blue237;\red102\green205\blue170;\red105\green105\blue105;\red106\green90\blue205;\red107\green142\blue35;\red112\green128\blue144;\red119\green136\blue153;\red123\green104\blue238;\red124\green252\blue0;\red127\green255\blue0;\red127\green255\blue212;\red128\green0\blue0;\red128\green0\blue128;\red128\green128\blue0;\red128\green128\blue128;\red135\green206\blue235;\red135\green206\blue250;\red138\green43\blue226;\red139\green0\blue0;\red139\green0\blue139;\red139\green69\blue19;\red143\green188\blue139;\red144\green238\blue144;\red147\green112\blue219;\red148\green0\blue211;\red152\green251\blue152;\red153\green50\blue204;\red154\green205\blue50;\red160\green82\blue45;\red165\green42\blue42;\red169\green169\blue169;\red173\green216\blue230;\red173\green255\blue47;\red175\green238\blue238;\red176\green196\blue222;\red176\green224\blue230;\red178\green34\blue34;\red184\green134\blue11;\red186\green85\blue211;\red188\green143\blue143;\red189\green183\blue107;\red192\green192\blue192;\red199\green21\blue133;\red205\green92\blue92;\red205\green133\blue63;\red210\green105\blue30;\red210\green180\blue140;\red211\green211\blue211;\red216\green191\blue216;\red218\green112\blue214;\red218\green165\blue32;\red219\green112\blue147;\red220\green20\blue60;\red220\green220\blue220;\red221\green160\blue221;\red222\green184\blue135;\red224\green255\blue255;\red230\green230\blue250;\red233\green150\blue122;\red238\green130\blue238;\red238\green232\blue170;\red240\green128\blue128;\red240\green230\blue140;\red240\green248\blue255;\red240\green255\blue240;\red240\green255\blue255;\red244\green164\blue96;\red245\green222\blue179;\red245\green245\blue220;\red245\green245\blue245;\red245\green255\blue250;\red248\green248\blue255;\red250\green128\blue114;\red250\green235\blue215;\red250\green240\blue230;\red250\green250\blue210;\red253\green245\blue230;\red255\green0\blue0;\red255\green0\blue255;\red255\green0\blue255;\red255\green20\blue147;\red255\green69\blue0;\red255\green99\blue71;\red255\green105\blue180;\red255\green127\blue80;\red255\green140\blue0;\red255\green160\blue122;\red255\green165\blue0;\red255\green182\blue193;\red255\green192\blue203;\red255\green215\blue0;\red255\green218\blue185;\red255\green222\blue173;\red255\green228\blue181;\red255\green228\blue196;\red255\green228\blue225;\red255\green235\blue205;\red255\green239\blue213;\red255\green240\blue245;\red255\green245\blue238;\red255\green248\blue220;\red255\green250\blue205;\red255\green250\blue240;\red255\green250\blue250;\red255\green255\blue0;\red255\green255\blue224;\red255\green255\blue240;\red255\green255\blue255;\red166\green166\blue166;\red170\green170\blue170;\red172\green168\blue153;\red236\green233\blue216;}</xsl:text>
        <xsl:text>{\stylesheet</xsl:text>
        <xsl:text>{\s0\f0\fs24\snext0 Normal;}</xsl:text>
        <xsl:text>{\s1\f0\fs24\snext0 Paragraph;}</xsl:text>
        <xsl:text>{\s2\f0\fs24\i\snext0 Address;}</xsl:text>
        <xsl:text>{\s3\qc\f0\fs24\snext0 Center;}</xsl:text>
        <xsl:text>{\s4\lin720\f0\fs24\snext0 Blockquote;}</xsl:text>
        <xsl:text>{\s5\lin60\rin60\brdrs\brdrcf47\brdrw15\f0\fs24\snext0 Fieldset;}</xsl:text>
        <xsl:text>{\s6\f1\fs24\snext0 Preformatted;}</xsl:text>
        <xsl:text>{\s7\f1\fs24\snext0 Preformatted and wrapping;}</xsl:text>
        <xsl:text>{\s8\f1\fs48\b\snext0 Heading 1;}</xsl:text>
        <xsl:text>{\s9\f1\fs36\b\snext0 Heading 2;}</xsl:text>
        <xsl:text>{\s10\f1\fs26\b\snext0 Heading 3;}</xsl:text>
        <xsl:text>{\s11\f1\fs22\b\snext0 Heading 4;}</xsl:text>
        <xsl:text>{\s12\f1\fs18\b\snext0 Heading 5;}</xsl:text>
        <xsl:text>{\s13\f1\fs16\b\snext0 Heading 6;}</xsl:text>
        <xsl:text>{\*\ts15\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts16\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts17\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts18\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts19\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts20\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts21\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts22\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts23\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts24\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts25\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts26\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts27\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts28\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts29\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>{\*\ts30\tsrowd\ql\f1\fs18\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil\snext0 Table *;}</xsl:text>
        <xsl:text>}</xsl:text>
        <xsl:text>{\*\generator Altova StyleVision Enterprise Edition;}\viewkind1\viewzk0\viewscale100\newtblstyruls\nofeaturethrottle1 </xsl:text>
        <xsl:text>\dntblnsbdb\fs24\f0 </xsl:text>
        <xsl:call-template name="altova:DocumentSection_0">
            <xsl:with-param name="altova:nMaxWidthIn" select="6.26"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:call-template>
        <xsl:call-template name="altova:DocumentSection_11">
            <xsl:with-param name="altova:nMaxWidthIn" select="6.26"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel"/>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="altova:DocumentSection_0">
        <xsl:param name="altova:nMaxWidthIn"/>
        <xsl:param name="templatetablelevel"/>
        <xsl:text>\sectd\facingp\pgwsxn11900\pghsxn16820\margtsxn1280\marglsxn1440\margbsxn1720\margrsxn1440\headery0\footery0\cols1\colsx720\pgndec</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerl </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerr </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerl </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterLeft"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerr </xsl:text>
        <xsl:call-template name="altova:Section_0_FooterRight"/>
        <xsl:text>}</xsl:text>
        <xsl:text>\par</xsl:text>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="$XML">
            <xsl:for-each select="eml:EML">
                <xsl:variable name="isBesIsland" select="count(eml:Count/eml:Election/eml:ElectionIdentifier/eml:ElectionCategory[ text() = &quot;ER&quot; ]) &gt; 0 or count(eml:Count/eml:Election/eml:Contests/eml:Contest/eml:ContestIdentifier/eml:ContestName[text() = &quot;Bonaire&quot; or text() = &quot;Sint Eustatius&quot; or text() = &quot;Saba&quot;]) &gt; 0"/>
                <xsl:for-each select="eml:Count">
                    <xsl:for-each select="eml:Election">
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Model N 10-1</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs32\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Proces-verbaal van een stembureau</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_0" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_0" select="$altova:nTableWidthIn_0 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_0" select="round($altova:nTableWidthTw_0 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_0" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_0" select="round(0.00 + 1.00 * $altova:nTableWidthTw_0)"/>
                        <xsl:variable name="altova:TableWidthFactor_0">
                            <xsl:choose>
                                <xsl:when test="$altova:nSumColumnWidthsTw_0 &gt; $altova:nTableWidthTw_0">
                                    <xsl:value-of select="$altova:nTableWidthTw_0 div $altova:nSumColumnWidthsTw_0"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_0" select="0"/>
                        <xsl:variable name="altova:nColumnWidthTw_0_0" select="round($altova:nTableWidthTw_0 * 0.50 * $altova:TableWidthFactor_0)"/>
                        <xsl:variable name="altova:nColumnWidthTw_0_1" select="round($altova:nTableWidthTw_0 * 0.50 * $altova:TableWidthFactor_0)"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle0">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                            <xsl:value-of select="round($altova:nTableWidthTw_0)"/>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_0"/>
                            <xsl:text>\ts15\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend0">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend0">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle0">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0" select="$altova:nTableIndentTw_0"/>
                            <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr400\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_0 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl0 + $altova:nColumnWidthTw_0_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalt\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr400\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_0_1 = $altova:nDefaultColumnWidthTw_0">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl0_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl0_Col0_AfterColumn + $altova:nColumnWidthTw_0_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl0_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle0"/>
                            <xsl:value-of select="$altova:RowStyle0"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Waarom een proces-verbaal?</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Met een proces-verbaal legt een stembureau verantwoording af voor:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>•   het verloop van de stemming;</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>•   het tellen van de stemmen. </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het is belangrijk dat een proces-verbaal duidelijk en volledig is, want op basis van de processen-verbaal wordt de verkiezingsuitslag vastgesteld. Daarnaast is het proces-verbaal openbaar. Dit betekent dat kiezers het in de dagen na de verkiezing mogen inzien. Alle zaken die van invloed (kunnen) zijn op het resultaat van de</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>stemming moeten daarom in het proces-verbaal staan. Klachten of aanmerkingen van kiezers bijvoorbeeld ook. In de Kieswet staat dit omschreven als ‘bezwaar’.  </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Waarom dit formulier?</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Dit formulier is gemaakt om ervoor te zorgen dat alle stembureaus op dezelfde manier een </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>proces-verbaal maken. Bovendien werkt het formulier als een checklist. Als alle onderdelen goed zijn ingevuld, dan voldoet het proces-verbaal aan de eisen van de Kieswet. Vul het formulier daarom correct en zo volledig mogelijk in.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend0"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle0"/>
                        <xsl:value-of select="$altova:RowStyle0"/>
                        <xsl:value-of select="$rowend0"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="Line">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:call-template name="LineBreakPdf">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>1. Verkiezing</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="ElectionNameShort">
                            <xsl:with-param name="isBold" select="1"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Datum verkiezing: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:for-each select="eml:ElectionIdentifier">
                            <xsl:for-each select="kr:ElectionDate">
                                <xsl:call-template name="Date">
                                    <xsl:with-param name="isBold" select="1"/>
                                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                </xsl:call-template>
                            </xsl:for-each>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>\par </xsl:text>
                            <xsl:call-template name="Line">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                            <xsl:call-template name="LineBreakPdf">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>{\f1\fs21\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>2. Stembureau</xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>\par </xsl:text>
                            <xsl:choose>
                                <xsl:when test="$isBesIsland">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Openbaar lichaam</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="eml:ElectionCategory[ text() != &quot;BC&quot; and text() != &quot;GC&quot; ]">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Gemeente</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="count( eml:ElectionCategory[ text() = &quot;BC&quot; ] ) &gt; 0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Stadsdeel</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Deelgemeente</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                        <xsl:for-each select="$XML">
                            <xsl:for-each select="eml:EML">
                                <xsl:for-each select="eml:ManagingAuthority">
                                    <xsl:for-each select="eml:AuthorityIdentifier">
                                        <xsl:text>{\f1\fs18\b </xsl:text>
                                        <xsl:apply-templates>
                                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                        </xsl:apply-templates>
                                        <xsl:text>}</xsl:text>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:for-each>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:if test="//eml:ElectionCategory[ text() != &quot;BC&quot; and text() != &quot;GC&quot; ]">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text>Kieskring </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:for-each select="eml:Contests">
                                <xsl:for-each select="eml:Contest">
                                    <xsl:for-each select="eml:ContestIdentifier">
                                        <xsl:choose>
                                            <xsl:when test="eml:ContestName != &quot;&quot;">
                                                <xsl:for-each select="eml:ContestName">
                                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                                    <xsl:apply-templates>
                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                    </xsl:apply-templates>
                                                    <xsl:text>}</xsl:text>
                                                </xsl:for-each>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:for-each select="$XML">
                                                    <xsl:for-each select="eml:EML">
                                                        <xsl:for-each select="eml:Count">
                                                            <xsl:for-each select="rg:RG510">
                                                                <xsl:for-each select="rg:ContestName">
                                                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                                                    <xsl:apply-templates>
                                                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                                                    </xsl:apply-templates>
                                                                    <xsl:text>}</xsl:text>
                                                                </xsl:for-each>
                                                            </xsl:for-each>
                                                        </xsl:for-each>
                                                    </xsl:for-each>
                                                </xsl:for-each>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </xsl:for-each>
                            <xsl:text>\par </xsl:text>
                            <xsl:text>\par </xsl:text>
                        </xsl:if>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie stembureau: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Om wat voor stembureau gaat het?  </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_2" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_1" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_1" select="$altova:nTableWidthIn_1 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_1" select="round($altova:nTableWidthTw_1 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_1" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_1" select="round(5401.00)"/>
                        <xsl:variable name="altova:TableWidthFactor_1">
                            <xsl:choose>
                                <xsl:when test="$altova:nSumColumnWidthsTw_1 &gt; $altova:nTableWidthTw_1">
                                    <xsl:value-of select="($altova:nTableWidthTw_1 - $altova:SumDefaultColumnsForWideTableTw_1) div $altova:nSumColumnWidthsTw_1"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnsWithDefaultWidth_1" select="round(1)"/>
                        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_1">
                            <xsl:choose>
                                <xsl:when test="$altova:nColumnsWithDefaultWidth_1 = 0">
                                    <xsl:value-of select="round(1)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_1"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_1">
                            <xsl:choose>
                                <xsl:when test="$altova:TableWidthFactor_1 &lt; 1">
                                    <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_1 div $altova:nColumnsWithDefaultWidthNotZero_1"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="round(($altova:nTableWidthTw_1 - $altova:nSumColumnWidthsTw_1) div $altova:nColumnsWithDefaultWidthNotZero_1)"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnWidthTw_1_0" select="round(1.46 * 1440 * $altova:TableWidthFactor_1)"/>
                        <xsl:variable name="altova:nColumnWidthTw_1_1" select="round(2.29 * 1440 * $altova:TableWidthFactor_1)"/>
                        <xsl:variable name="altova:nColumnWidthTw_1_2" select="$altova:nDefaultColumnWidthTw_1"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle1">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                            <xsl:value-of select="round($altova:nTableWidthTw_1)"/>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\ts16\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend1">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend1">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle1">
                            <xsl:text>\trrh346</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle1"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs36 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> Gewoon stembureau.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Wat waren de openingstijden? </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle1"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle2">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle2"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs36 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>□</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> Mobiel stembureau.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Wat waren de locaties en openingstijden?</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle2"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle3">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle3"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie   </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle3"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle4">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle4"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie   </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle4"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle5">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle5"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie   </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle5"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle6">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle6"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie   </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle6"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:variable name="altova:RowStyle7">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1" select="$altova:nTableIndentTw_1"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_0 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl1 + $altova:nColumnWidthTw_1_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_1 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col0_AfterColumn + $altova:nColumnWidthTw_1_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_1_2 = $altova:nDefaultColumnWidthTw_1">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl1_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl1_Col1_AfterColumn + $altova:nColumnWidthTw_1_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl1_Col2_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle1"/>
                            <xsl:value-of select="$altova:RowStyle7"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Locatie   </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:text>\ql\sl-400\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend1"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle1"/>
                        <xsl:value-of select="$altova:RowStyle7"/>
                        <xsl:value-of select="$rowend1"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>      </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text> </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\page </xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Gegevens stembureauleden</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:variable name="altova:CurrContextGrid_3" select="."/>
                        <xsl:variable name="altova:nTableWidthIn_2" select="$altova:nMaxWidthIn * 1.00000"/>
                        <xsl:variable name="altova:nTableWidthTw_2" select="$altova:nTableWidthIn_2 * 1440"/>
                        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_2" select="round($altova:nTableWidthTw_2 * 0.25)"/>
                        <xsl:variable name="altova:nTableIndentTw_2" select="0"/>
                        <xsl:variable name="altova:nSumColumnWidthsTw_2" select="round(0.00)"/>
                        <xsl:variable name="altova:nColumnsWithDefaultWidth_2" select="round(2)"/>
                        <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_2">
                            <xsl:choose>
                                <xsl:when test="$altova:nColumnsWithDefaultWidth_2 = 0">
                                    <xsl:value-of select="round(2)"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$altova:nColumnsWithDefaultWidth_2"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:nDefaultColumnWidthTw_2">
                            <xsl:value-of select="$altova:nTableWidthTw_2 div $altova:nColumnsWithDefaultWidthNotZero_2"/>
                        </xsl:variable>
                        <xsl:variable name="altova:nColumnWidthTw_2_0" select="$altova:nDefaultColumnWidthTw_2"/>
                        <xsl:variable name="altova:nColumnWidthTw_2_1" select="$altova:nDefaultColumnWidthTw_2"/>
                        <xsl:text>\pard\s0\f0\fs24</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:variable name="tablestyle2">
                            <xsl:text>\trowd</xsl:text>
                            <xsl:text>\trautofit1</xsl:text>
                            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                            <xsl:value-of select="round($altova:nTableWidthTw_2)"/>
                            <xsl:text>\trleft</xsl:text>
                            <xsl:value-of select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\ts17\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                        </xsl:variable>
                        <xsl:variable name="rowend2">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\row\pard</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="cellend2">
                            <xsl:choose>
                                <xsl:when test="$templatetablelevel + 1 = 1">
                                    <xsl:text>\cell</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>\nestcell</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:variable>
                        <xsl:variable name="altova:RowStyle8">
                            <xsl:text>\trrh0\trhdr</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle8"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Voorletter(s) en achternaam stembureaulid</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Op welke tijdstippen aanwezig?</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle8"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle9">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle9"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle9"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle10">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle10"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle10"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle11">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle11"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle11"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle12">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle12"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle12"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle13">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle13"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle13"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle14">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb60\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle14"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle14"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:variable name="altova:RowStyle15">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2" select="$altova:nTableIndentTw_2"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_0 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl2 + $altova:nColumnWidthTw_2_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_2_1 = $altova:nDefaultColumnWidthTw_2">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl2_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl2_Col0_AfterColumn + $altova:nColumnWidthTw_2_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl2_Col1_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle2"/>
                            <xsl:value-of select="$altova:RowStyle15"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                        <xsl:text>{\cf141\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>_______________________________</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:text>\ql\sl-320\f1\fs18 </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Van |__ı__| : |__ı__| tot |__ı__| : |__ı__| uur.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend2"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle2"/>
                        <xsl:value-of select="$altova:RowStyle15"/>
                        <xsl:value-of select="$rowend2"/>
                        <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 0"/>
                        <xsl:text> </xsl:text>
                    </xsl:for-each>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>3. Toegelaten kiezers</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoeveel kiezers mochten stemmen met een:</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_4" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_3" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_3" select="$altova:nTableWidthIn_3 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_3" select="round($altova:nTableWidthTw_3 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_3" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_3" select="round(8301.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_3">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_3 &gt; $altova:nTableWidthTw_3">
                                <xsl:value-of select="$altova:nTableWidthTw_3 div $altova:nSumColumnWidthsTw_3"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_3" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_3_0" select="round(3.89 * 1440 * $altova:TableWidthFactor_3)"/>
                    <xsl:variable name="altova:nColumnWidthTw_3_1" select="round(1.67 * 1440 * $altova:TableWidthFactor_3)"/>
                    <xsl:variable name="altova:nColumnWidthTw_3_2" select="round(0.21 * 1440 * $altova:TableWidthFactor_3)"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle3">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth1</xsl:text>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\ts18\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend3">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend3">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle16">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle16"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- geldige stempas</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle3"/>
                    <xsl:value-of select="$altova:RowStyle16"/>
                    <xsl:value-of select="$rowend3"/>
                    <xsl:variable name="altova:RowStyle17">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle17"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- geldig volmachtbewijs (schriftelijk of via ingevulde achterkant van stempas of kiezerspas)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle3"/>
                    <xsl:value-of select="$altova:RowStyle17"/>
                    <xsl:value-of select="$rowend3"/>
                    <xsl:variable name="altova:RowStyle18">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle18"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- geldige kiezerspas (pas om te stemmen in andere gemeente)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle3"/>
                    <xsl:value-of select="$altova:RowStyle18"/>
                    <xsl:value-of select="$rowend3"/>
                    <xsl:variable name="altova:RowStyle19">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle19"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________ </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>+</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle3"/>
                    <xsl:value-of select="$altova:RowStyle19"/>
                    <xsl:value-of select="$rowend3"/>
                    <xsl:variable name="altova:RowStyle20">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3" select="$altova:nTableIndentTw_3"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_0 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl3 + $altova:nColumnWidthTw_3_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_1 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col0_AfterColumn + $altova:nColumnWidthTw_3_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_3_2 = $altova:nDefaultColumnWidthTw_3">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl3_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl3_Col1_AfterColumn + $altova:nColumnWidthTw_3_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl3_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle3"/>
                        <xsl:value-of select="$altova:RowStyle20"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoeveel kiezers zijn er toegelaten tot de stemming?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(A)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend3"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle3"/>
                    <xsl:value-of select="$altova:RowStyle20"/>
                    <xsl:value-of select="$rowend3"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>4. Getelde stembiljetten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoeveel stembiljetten zijn:</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_5" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_4" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_4" select="$altova:nTableWidthIn_4 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_4" select="round($altova:nTableWidthTw_4 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_4" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_4" select="round(8301.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_4">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_4 &gt; $altova:nTableWidthTw_4">
                                <xsl:value-of select="$altova:nTableWidthTw_4 div $altova:nSumColumnWidthsTw_4"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_4" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_4_0" select="round(3.89 * 1440 * $altova:TableWidthFactor_4)"/>
                    <xsl:variable name="altova:nColumnWidthTw_4_1" select="round(1.67 * 1440 * $altova:TableWidthFactor_4)"/>
                    <xsl:variable name="altova:nColumnWidthTw_4_2" select="round(0.21 * 1440 * $altova:TableWidthFactor_4)"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle4">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth1</xsl:text>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\ts19\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend4">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend4">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle21">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle21"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- geldige stemmen op een kandidaat</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle4"/>
                    <xsl:value-of select="$altova:RowStyle21"/>
                    <xsl:value-of select="$rowend4"/>
                    <xsl:variable name="altova:RowStyle22">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle22"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- ongeldig</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle4"/>
                    <xsl:value-of select="$altova:RowStyle22"/>
                    <xsl:value-of select="$rowend4"/>
                    <xsl:variable name="altova:RowStyle23">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle23"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>- blanco</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle4"/>
                    <xsl:value-of select="$altova:RowStyle23"/>
                    <xsl:value-of select="$rowend4"/>
                    <xsl:variable name="altova:RowStyle24">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle24"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________ </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>+</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle4"/>
                    <xsl:value-of select="$altova:RowStyle24"/>
                    <xsl:value-of select="$rowend4"/>
                    <xsl:variable name="altova:RowStyle25">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4" select="$altova:nTableIndentTw_4"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_0 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl4 + $altova:nColumnWidthTw_4_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_1 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col0_AfterColumn + $altova:nColumnWidthTw_4_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_4_2 = $altova:nDefaultColumnWidthTw_4">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl4_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl4_Col1_AfterColumn + $altova:nColumnWidthTw_4_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl4_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle4"/>
                        <xsl:value-of select="$altova:RowStyle25"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoeveel stembiljetten zijn er geteld?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(B)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend4"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle4"/>
                    <xsl:value-of select="$altova:RowStyle25"/>
                    <xsl:value-of select="$rowend4"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>5. Verschil toegelaten kiezers en getelde stembiljetten</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Is er een verschil tussen het aantal toegelaten kiezers (A) en het aantal getelde stembiljetten (B)?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_6" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_5" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_5" select="$altova:nTableWidthIn_5 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_5" select="round($altova:nTableWidthTw_5 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_5" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_5" select="round(3081.00)"/>
                    <xsl:variable name="altova:TableWidthFactor_5">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_5 &gt; $altova:nTableWidthTw_5">
                                <xsl:value-of select="($altova:nTableWidthTw_5 - $altova:SumDefaultColumnsForWideTableTw_5) div $altova:nSumColumnWidthsTw_5"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_5" select="round(1)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_5">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_5 = 0">
                                <xsl:value-of select="round(1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_5"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_5">
                        <xsl:choose>
                            <xsl:when test="$altova:TableWidthFactor_5 &lt; 1">
                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_5 div $altova:nColumnsWithDefaultWidthNotZero_5"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="round(($altova:nTableWidthTw_5 - $altova:nSumColumnWidthsTw_5) div $altova:nColumnsWithDefaultWidthNotZero_5)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_5_0" select="round(0.61 * 1440 * $altova:TableWidthFactor_5)"/>
                    <xsl:variable name="altova:nColumnWidthTw_5_1" select="$altova:nDefaultColumnWidthTw_5"/>
                    <xsl:variable name="altova:nColumnWidthTw_5_2" select="round(1.53 * 1440 * $altova:TableWidthFactor_5)"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle5">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_5)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\ts20\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend5">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend5">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle26">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle26"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Nee.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Ga door met onderdeel 6.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle26"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle27">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle27"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Ja.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Zijn er méér of juist minder stembiljetten geteld dan het aantal toegelaten kiezers?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle27"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle28">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle28"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Er zijn meer stembiljetten geteld, namelijk </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> stembiljetten.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle28"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle29">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle29"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Er zijn minder stembiljetten geteld, namelijk </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> stembiljetten.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle29"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle30">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle30"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoe is het verschil mogelijk te verklaren?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle30"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle31">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle31"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Kruis een reden aan van het verschil en geef aan hoe vaak hier sprake van was. </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Het is mogelijk om meerdere vakjes aan te kruisen.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle31"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle32">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle32"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Mogelijke reden van het verschil</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hoe vaak sprake van?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle32"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle33">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle33"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Kiezers die een stembiljet hebben gekregen, hebben toch niet gestemd.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle33"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle34">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle34"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Er zijn te weinig stembiljetten uitgereikt.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle34"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle35">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle35"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Er zijn te veel stembiljetten uitgereikt.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle35"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle36">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle36"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Er zijn stembiljetten kwijtgeraakt.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle36"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle37">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle37"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Geen verklaring.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle37"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:variable name="altova:RowStyle38">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5" select="$altova:nTableIndentTw_5"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_0 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl5 + $altova:nColumnWidthTw_5_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_1 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col0_AfterColumn + $altova:nColumnWidthTw_5_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_5_2 = $altova:nDefaultColumnWidthTw_5">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl5_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl5_Col1_AfterColumn + $altova:nColumnWidthTw_5_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl5_Col2_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle5"/>
                        <xsl:value-of select="$altova:RowStyle38"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Andere verklaring, namelijk: </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_____________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> keer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend5"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle5"/>
                    <xsl:value-of select="$altova:RowStyle38"/>
                    <xsl:value-of select="$rowend5"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>6. Onregelmatigheden of bijzonderheden</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Waren er onregelmatigheden of bijzonderheden tijdens het stemmen of tijdens het tellen van de stemmen?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_7" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_6" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_6" select="$altova:nTableWidthIn_6 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_6" select="round($altova:nTableWidthTw_6 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_6" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_6" select="round(880.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_6">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_6 &gt; $altova:nTableWidthTw_6">
                                <xsl:value-of select="($altova:nTableWidthTw_6 - $altova:SumDefaultColumnsForWideTableTw_6) div $altova:nSumColumnWidthsTw_6"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_6" select="round(1)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_6">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_6 = 0">
                                <xsl:value-of select="round(1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_6"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_6">
                        <xsl:choose>
                            <xsl:when test="$altova:TableWidthFactor_6 &lt; 1">
                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_6 div $altova:nColumnsWithDefaultWidthNotZero_6"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="round(($altova:nTableWidthTw_6 - $altova:nSumColumnWidthsTw_6) div $altova:nColumnsWithDefaultWidthNotZero_6)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_6_0" select="round(0.61 * 1440 * $altova:TableWidthFactor_6)"/>
                    <xsl:variable name="altova:nColumnWidthTw_6_1" select="$altova:nDefaultColumnWidthTw_6"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle6">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_6)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_6"/>
                        <xsl:text>\ts21\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend6">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend6">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle39">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle6"/>
                        <xsl:value-of select="$altova:RowStyle39"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Nee.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle6"/>
                    <xsl:value-of select="$altova:RowStyle39"/>
                    <xsl:value-of select="$rowend6"/>
                    <xsl:variable name="altova:RowStyle40">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle6"/>
                        <xsl:value-of select="$altova:RowStyle40"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Ja.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Om wat voor onregelmatigheid of bijzonderheid gaat het?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle6"/>
                    <xsl:value-of select="$altova:RowStyle40"/>
                    <xsl:value-of select="$rowend6"/>
                    <xsl:variable name="altova:RowStyle41">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle6"/>
                        <xsl:value-of select="$altova:RowStyle41"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Noteer de onregelmatigheid of bijzonderheid, geef aan hoe vaak hier sprake van was en geef toelichting als dat nodig is. Voorbeelden: het brandalarm ging af en het stemlokaal moest worden ontruimd, activiteiten in of dichtbij het stemlokaal beïnvloedden de kiezer, de stembus was vol en er was geen tweede stembus, een stembureaulid was te laat of is helemaal niet gekomen,</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle6"/>
                    <xsl:value-of select="$altova:RowStyle41"/>
                    <xsl:value-of select="$rowend6"/>
                    <xsl:variable name="altova:RowStyle42">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6" select="$altova:nTableIndentTw_6"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_0 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl6 + $altova:nColumnWidthTw_6_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_6_1 = $altova:nDefaultColumnWidthTw_6">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl6_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl6_Col0_AfterColumn + $altova:nColumnWidthTw_6_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl6_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle6"/>
                        <xsl:value-of select="$altova:RowStyle42"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_6_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend6"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle6"/>
                    <xsl:value-of select="$altova:RowStyle42"/>
                    <xsl:value-of select="$rowend6"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>7. Bezwaren van kiezers</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Tijdens de stemming</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hadden de aanwezige kiezers bezwaren (klachten of aanmerkingen) tijdens de stemming?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_8" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_7" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_7" select="$altova:nTableWidthIn_7 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_7" select="round($altova:nTableWidthTw_7 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_7" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_7" select="round(880.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_7">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_7 &gt; $altova:nTableWidthTw_7">
                                <xsl:value-of select="($altova:nTableWidthTw_7 - $altova:SumDefaultColumnsForWideTableTw_7) div $altova:nSumColumnWidthsTw_7"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_7" select="round(1)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_7">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_7 = 0">
                                <xsl:value-of select="round(1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_7"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_7">
                        <xsl:choose>
                            <xsl:when test="$altova:TableWidthFactor_7 &lt; 1">
                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_7 div $altova:nColumnsWithDefaultWidthNotZero_7"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="round(($altova:nTableWidthTw_7 - $altova:nSumColumnWidthsTw_7) div $altova:nColumnsWithDefaultWidthNotZero_7)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_7_0" select="round(0.61 * 1440 * $altova:TableWidthFactor_7)"/>
                    <xsl:variable name="altova:nColumnWidthTw_7_1" select="$altova:nDefaultColumnWidthTw_7"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle7">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_7)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\ts22\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend7">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend7">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle43">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle7"/>
                        <xsl:value-of select="$altova:RowStyle43"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Nee.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle7"/>
                    <xsl:value-of select="$altova:RowStyle43"/>
                    <xsl:value-of select="$rowend7"/>
                    <xsl:variable name="altova:RowStyle44">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle7"/>
                        <xsl:value-of select="$altova:RowStyle44"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Ja.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Wat was het bezwaar?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle7"/>
                    <xsl:value-of select="$altova:RowStyle44"/>
                    <xsl:value-of select="$rowend7"/>
                    <xsl:variable name="altova:RowStyle45">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle7"/>
                        <xsl:value-of select="$altova:RowStyle45"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Noteer het bezwaar, ook als u het er niet mee eens bent. Geef aan hoe vaak het bezwaar is gemeld en geef toelichting als dat nodig is. Heeft het stembureau een opmerking bij het bezwaar? Zet die er dan ook bij. Voorbeelden van bezwaren tijdens de stemming: het stembureau is moeilijk bereikbaar, er staan meerdere mensen in een stemhokje, de potloden doen het niet.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle7"/>
                    <xsl:value-of select="$altova:RowStyle45"/>
                    <xsl:value-of select="$rowend7"/>
                    <xsl:variable name="altova:RowStyle46">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7" select="$altova:nTableIndentTw_7"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_0 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl7 + $altova:nColumnWidthTw_7_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_7_1 = $altova:nDefaultColumnWidthTw_7">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl7_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl7_Col0_AfterColumn + $altova:nColumnWidthTw_7_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl7_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle7"/>
                        <xsl:value-of select="$altova:RowStyle46"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_7_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend7"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle7"/>
                    <xsl:value-of select="$altova:RowStyle46"/>
                    <xsl:value-of select="$rowend7"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Tijdens het tellen van de stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Hadden de aanwezige kiezers bezwaren (klachten of aanmerkingen) tijdens het tellen van de stemmen?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_9" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_8" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_8" select="$altova:nTableWidthIn_8 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_8" select="round($altova:nTableWidthTw_8 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_8" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_8" select="round(880.50)"/>
                    <xsl:variable name="altova:TableWidthFactor_8">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_8 &gt; $altova:nTableWidthTw_8">
                                <xsl:value-of select="($altova:nTableWidthTw_8 - $altova:SumDefaultColumnsForWideTableTw_8) div $altova:nSumColumnWidthsTw_8"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_8" select="round(1)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_8">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_8 = 0">
                                <xsl:value-of select="round(1)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_8"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_8">
                        <xsl:choose>
                            <xsl:when test="$altova:TableWidthFactor_8 &lt; 1">
                                <xsl:value-of select="$altova:SumDefaultColumnsForWideTableTw_8 div $altova:nColumnsWithDefaultWidthNotZero_8"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="round(($altova:nTableWidthTw_8 - $altova:nSumColumnWidthsTw_8) div $altova:nColumnsWithDefaultWidthNotZero_8)"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_8_0" select="round(0.61 * 1440 * $altova:TableWidthFactor_8)"/>
                    <xsl:variable name="altova:nColumnWidthTw_8_1" select="$altova:nDefaultColumnWidthTw_8"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle8">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_8)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_8"/>
                        <xsl:text>\ts23\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend8">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend8">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle47">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle8"/>
                        <xsl:value-of select="$altova:RowStyle47"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Nee.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle8"/>
                    <xsl:value-of select="$altova:RowStyle47"/>
                    <xsl:value-of select="$rowend8"/>
                    <xsl:variable name="altova:RowStyle48">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle8"/>
                        <xsl:value-of select="$altova:RowStyle48"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs36 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>□</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text> Ja.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:text>\ql\sl-200\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Wat was het bezwaar?</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle8"/>
                    <xsl:value-of select="$altova:RowStyle48"/>
                    <xsl:value-of select="$rowend8"/>
                    <xsl:variable name="altova:RowStyle49">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle8"/>
                        <xsl:value-of select="$altova:RowStyle49"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Noteer het bezwaar, ook als u het er niet mee eens bent. Geef aan hoe vaak het bezwaar is gemeld en geef toelichting als dat nodig is. Heeft het stembureau een opmerking bij het bezwaar? Zet die er dan ook bij. Voorbeelden van bezwaren tijdens de telling: een stembiljet wordt onterecht geldig, ongeldig of blanco verklaard, het resultaat van de stemming wordt niet bekend gemaakt, er wordt een onjuist resultaat van de stemming bekend gemaakt.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle8"/>
                    <xsl:value-of select="$altova:RowStyle49"/>
                    <xsl:value-of select="$rowend8"/>
                    <xsl:variable name="altova:RowStyle50">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8" select="$altova:nTableIndentTw_8"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_0 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl8 + $altova:nColumnWidthTw_8_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_8_1 = $altova:nDefaultColumnWidthTw_8">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl8_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl8_Col0_AfterColumn + $altova:nColumnWidthTw_8_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl8_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle8"/>
                        <xsl:value-of select="$altova:RowStyle50"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="LongLine">
                        <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_8_1 div 1440) - 0.02083 - 0.02083"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                    </xsl:call-template>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend8"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle8"/>
                    <xsl:value-of select="$altova:RowStyle50"/>
                    <xsl:value-of select="$rowend8"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\page </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs21\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>8. Ondertekening stembureau</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\i </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Alle aanwezige stembureauleden moeten het proces-verbaal ondertekenen na afloop van de telling. Dit zijn minimaal drie leden inclusief de voorzitter. Tellers ondertekenen het proces-verbaal niet.</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Datum     |__ı__| - |__ı__| - |__ı__ı__ı__|  (dd-mm-jjjj)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:variable name="altova:CurrContextGrid_10" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_9" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_9" select="$altova:nTableWidthIn_9 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_9" select="round($altova:nTableWidthTw_9 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_9" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_9" select="round(0.00)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_9" select="round(4)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_9">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_9 = 0">
                                <xsl:value-of select="round(4)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_9"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_9">
                        <xsl:value-of select="$altova:nTableWidthTw_9 div $altova:nColumnsWithDefaultWidthNotZero_9"/>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_9_0" select="$altova:nDefaultColumnWidthTw_9"/>
                    <xsl:variable name="altova:nColumnWidthTw_9_1" select="$altova:nDefaultColumnWidthTw_9"/>
                    <xsl:variable name="altova:nColumnWidthTw_9_2" select="$altova:nDefaultColumnWidthTw_9"/>
                    <xsl:variable name="altova:nColumnWidthTw_9_3" select="$altova:nDefaultColumnWidthTw_9"/>
                    <xsl:text>\pard\s0\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle9">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_9)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\ts24\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend9">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend9">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle51">
                        <xsl:text>\trrh0\trhdr</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmgf\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle51"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Naam</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs16\i\b0 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Handtekening</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle51"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle52">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle52"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Voorzitter</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>1</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle52"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle53">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle53"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Leden</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>2</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle53"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle54">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle54"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>3</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle54"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle55">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle55"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle55"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle56">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle56"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle56"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle57">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle57"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle57"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle58">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle58"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle58"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:variable name="altova:RowStyle59">
                        <xsl:text>\trrh480</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9" select="$altova:nTableIndentTw_9"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_0 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl9 + $altova:nColumnWidthTw_9_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_1 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col0_AfterColumn + $altova:nColumnWidthTw_9_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_2 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col1_AfterColumn + $altova:nColumnWidthTw_9_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_9_3 = $altova:nDefaultColumnWidthTw_9">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl9_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl9_Col2_AfterColumn + $altova:nColumnWidthTw_9_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl9_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle9"/>
                        <xsl:value-of select="$altova:RowStyle59"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:text>\ql\sl-480\f1\fs18 </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________________________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend9"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle9"/>
                    <xsl:value-of select="$altova:RowStyle59"/>
                    <xsl:value-of select="$rowend9"/>
                    <xsl:text>\pard\s1\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\par\pard\s0\f0\fs24</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="altova:DocumentSection_11">
        <xsl:param name="altova:nMaxWidthIn"/>
        <xsl:param name="templatetablelevel"/>
        <xsl:text>\sect\sectd\sbkpage\facingp\pgwsxn11900\pghsxn16820\margtsxn1280\marglsxn1440\margbsxn1720\margrsxn1440\headery0\footery0\cols1\colsx720\pgndec</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerl </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\headerr </xsl:text>
        <xsl:call-template name="EmptyHeader"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerl </xsl:text>
        <xsl:call-template name="altova:Section_11_FooterLeft"/>
        <xsl:text>}</xsl:text>
        <xsl:text>{</xsl:text>
        <xsl:text>\footerr </xsl:text>
        <xsl:call-template name="altova:Section_11_FooterRight"/>
        <xsl:text>}</xsl:text>
        <xsl:text>\par</xsl:text>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s1\f0\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="$XML">
            <xsl:for-each select="eml:EML">
                <xsl:variable name="isBesIsland" select="count(eml:Count/eml:Election/eml:ElectionIdentifier/eml:ElectionCategory[ text() = &quot;ER&quot; ]) &gt; 0 or count(eml:Count/eml:Election/eml:Contests/eml:Contest/eml:ContestIdentifier/eml:ContestName[text() = &quot;Bonaire&quot; or text() = &quot;Sint Eustatius&quot; or text() = &quot;Saba&quot;]) &gt; 0"/>
                <xsl:for-each select="eml:Count">
                    <xsl:call-template name="Line">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:call-template name="LineBreakPdf">
                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                    </xsl:call-template>
                    <xsl:for-each select="rg:RG510">
                        <xsl:text>{\f1\fs21\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Model N 10-1</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs32\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Bijlage: aantal stemmen per lijst en kandidaat</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>{\f1\fs18\i </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Let op: de voorzitter van het stembureau moet een paraaf zetten op alle pagina’s van de bijlage.</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\par </xsl:text>
                        <xsl:call-template name="Space">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                        <xsl:text>\page </xsl:text>
                        <xsl:call-template name="AffiliationVotes">
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                        <xsl:text>\par </xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
        <xsl:text>\s0\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="AffiliationVotes">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
        <xsl:for-each select="rg:AffiliationVotes">
            <xsl:if test="position() != 1">
                <xsl:call-template name="LineBreakPdf">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:text>\par </xsl:text>
            <xsl:variable name="altova:CurrContextGrid_12" select="."/>
            <xsl:variable name="altova:nTableWidthIn_10" select="$altova:nMaxWidthIn * 1.00000"/>
            <xsl:variable name="altova:nTableWidthTw_10" select="$altova:nTableWidthIn_10 * 1440"/>
            <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_10" select="round($altova:nTableWidthTw_10 * 0.25)"/>
            <xsl:variable name="altova:nTableIndentTw_10" select="0"/>
            <xsl:variable name="altova:nSumColumnWidthsTw_10" select="round(9001.00)"/>
            <xsl:variable name="altova:TableWidthFactor_10">
                <xsl:choose>
                    <xsl:when test="$altova:nSumColumnWidthsTw_10 &gt; $altova:nTableWidthTw_10">
                        <xsl:value-of select="$altova:nTableWidthTw_10 div $altova:nSumColumnWidthsTw_10"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:nDefaultColumnWidthTw_10" select="0"/>
            <xsl:variable name="altova:nColumnWidthTw_10_0" select="round(2.22 * 1440 * $altova:TableWidthFactor_10)"/>
            <xsl:variable name="altova:nColumnWidthTw_10_1" select="round(4.03 * 1440 * $altova:TableWidthFactor_10)"/>
            <xsl:text>\pard\f0\fs24</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:variable name="tablestyle10">
                <xsl:text>\trowd</xsl:text>
                <xsl:text>\trautofit1</xsl:text>
                <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                <xsl:value-of select="round($altova:nTableWidthTw_10)"/>
                <xsl:text>\trleft</xsl:text>
                <xsl:value-of select="$altova:nTableIndentTw_10"/>
                <xsl:text>\ts25\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
            </xsl:variable>
            <xsl:variable name="rowend10">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\row\pard</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="cellend10">
                <xsl:choose>
                    <xsl:when test="$templatetablelevel + 1 = 1">
                        <xsl:text>\cell</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>\nestcell</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:variable>
            <xsl:variable name="altova:RowStyle60">
                <xsl:text>\trrh270</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle10"/>
                <xsl:value-of select="$altova:RowStyle60"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18\b </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Partijnaam</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:choose>
                <xsl:when test="$SV_OutputFormat = &apos;RTF&apos;">
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="eml:RegisteredName">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_1 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                </xsl:when>
                <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18\s7\f1\fs24\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="eml:AffiliationIdentifier">
                        <xsl:for-each select="eml:RegisteredName">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_10_1 div 1440) - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24\f0\fs24</xsl:text>
                </xsl:when>
            </xsl:choose>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle60"/>
            <xsl:value-of select="$rowend10"/>
            <xsl:variable name="altova:RowStyle61">
                <xsl:text>\trrh0</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10" select="$altova:nTableIndentTw_10"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_0 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl10 + $altova:nColumnWidthTw_10_0"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col0_AfterColumn)"/>
                <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                <xsl:if test="$altova:nColumnWidthTw_10_1 = $altova:nDefaultColumnWidthTw_10">
                    <xsl:text>\clftsWidth1</xsl:text>
                </xsl:if>
                <xsl:text>\cellx</xsl:text>
                <xsl:variable name="altova:CurrGridPos_Tbl10_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl10_Col0_AfterColumn + $altova:nColumnWidthTw_10_1"/>
                <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl10_Col1_AfterColumn)"/>
            </xsl:variable>
            <xsl:if test="$templatetablelevel + 1 = 1">
                <xsl:value-of select="$tablestyle10"/>
                <xsl:value-of select="$altova:RowStyle61"/>
            </xsl:if>
            <xsl:text>\pard</xsl:text>
            <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 1"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:text>{\f1\fs18\b </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Lijstnummer</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
            <xsl:for-each select="eml:AffiliationIdentifier">
                <xsl:for-each select="@Id">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="string(.)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:for-each>
            </xsl:for-each>
            <xsl:text>\f0\fs24</xsl:text>
            <xsl:value-of select="$cellend10"/>
            <xsl:if test="$templatetablelevel + 1 > 1">
                <xsl:text>{\*\nesttableprops</xsl:text>
            </xsl:if>
            <xsl:value-of select="$tablestyle10"/>
            <xsl:value-of select="$altova:RowStyle61"/>
            <xsl:value-of select="$rowend10"/>
            <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
            <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
            <xsl:text>\itap</xsl:text>
            <xsl:value-of select="$templatetablelevel + 0"/>
            <xsl:text> </xsl:text>
            <xsl:text>\par </xsl:text>
            <xsl:choose>
                <xsl:when test="rg:CandidateVotes">
                    <xsl:variable name="altova:CurrContextGrid_13" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_11" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_11" select="$altova:nTableWidthIn_11 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_11" select="round($altova:nTableWidthTw_11 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_11" select="0"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_11" select="round(10562.00)"/>
                    <xsl:variable name="altova:TableWidthFactor_11">
                        <xsl:choose>
                            <xsl:when test="$altova:nSumColumnWidthsTw_11 &gt; $altova:nTableWidthTw_11">
                                <xsl:value-of select="$altova:nTableWidthTw_11 div $altova:nSumColumnWidthsTw_11"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="1"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_11" select="0"/>
                    <xsl:variable name="altova:nColumnWidthTw_11_0" select="round(0.83 * 1440 * $altova:TableWidthFactor_11)"/>
                    <xsl:variable name="altova:nColumnWidthTw_11_1" select="round(4.33 * 1440 * $altova:TableWidthFactor_11)"/>
                    <xsl:variable name="altova:nColumnWidthTw_11_2" select="round(1.08 * 1440 * $altova:TableWidthFactor_11)"/>
                    <xsl:variable name="altova:nColumnWidthTw_11_3" select="round(1.08 * 1440 * $altova:TableWidthFactor_11)"/>
                    <xsl:text>\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle11">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth3\trwWidth</xsl:text>
                        <xsl:value-of select="round($altova:nTableWidthTw_11)"/>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_11"/>
                        <xsl:text>\ts26\trpaddt15\trpaddl15\trpaddb15\trpaddr15\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend11">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend11">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle62">
                        <xsl:text>\trrh0\trhdr</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalc\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle11"/>
                        <xsl:value-of select="$altova:RowStyle62"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Nummer</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>op de lijst</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Naam kandidaat</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Aantal stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle11"/>
                    <xsl:value-of select="$altova:RowStyle62"/>
                    <xsl:value-of select="$rowend11"/>
                    <xsl:for-each select="rg:CandidateVotes">
                        <xsl:sort select="eml:Candidate/eml:CandidateIdentifier/@Id" data-type="number" order="ascending"/>
                        <xsl:variable name="altova:RowStyle63">
                            <xsl:text>\trrh0</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                            <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf74\brdrw15\clbrdrb\brdrs\brdrcf74\brdrw15\clbrdrl\brdrs\brdrcf74\brdrw15\clbrdrr\brdrs\brdrcf74\brdrw15\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                            <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                            <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                                <xsl:text>\clftsWidth1</xsl:text>
                            </xsl:if>
                            <xsl:text>\cellx</xsl:text>
                            <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                        </xsl:variable>
                        <xsl:if test="$templatetablelevel + 1 = 1">
                            <xsl:value-of select="$tablestyle11"/>
                            <xsl:value-of select="$altova:RowStyle63"/>
                        </xsl:if>
                        <xsl:text>\pard</xsl:text>
                        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                        <xsl:text>\itap</xsl:text>
                        <xsl:value-of select="$templatetablelevel + 1"/>
                        <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:for-each select="eml:CandidateIdentifier">
                                <xsl:for-each select="@Id">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="string(.)"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:for-each>
                            </xsl:for-each>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend11"/>
                        <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                        <xsl:for-each select="eml:Candidate">
                            <xsl:for-each select="eml:CandidateFullName">
                                <xsl:call-template name="LastNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:call-template>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>, </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                                <xsl:call-template name="FirstNameH1">
                                    <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                                </xsl:call-template>
                            </xsl:for-each>
                            <xsl:call-template name="Gender2">
                                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_11_1 div 1440) - 0.01042 - 0.01042 - 0.01042 - 0.01042"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                            </xsl:call-template>
                        </xsl:for-each>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend11"/>
                        <xsl:text>\qr\sl-360\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend11"/>
                        <xsl:text>\ql\sl-360\f1\fs18 </xsl:text>
                        <xsl:text>\f0\fs24</xsl:text>
                        <xsl:value-of select="$cellend11"/>
                        <xsl:if test="$templatetablelevel + 1 > 1">
                            <xsl:text>{\*\nesttableprops</xsl:text>
                        </xsl:if>
                        <xsl:value-of select="$tablestyle11"/>
                        <xsl:value-of select="$altova:RowStyle63"/>
                        <xsl:value-of select="$rowend11"/>
                    </xsl:for-each>
                    <xsl:variable name="altova:RowStyle64">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle11"/>
                        <xsl:value-of select="$altova:RowStyle64"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>+</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle11"/>
                    <xsl:value-of select="$altova:RowStyle64"/>
                    <xsl:value-of select="$rowend11"/>
                    <xsl:variable name="altova:RowStyle65">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11" select="$altova:nTableIndentTw_11"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_0 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl11 + $altova:nColumnWidthTw_11_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr100\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_1 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col0_AfterColumn + $altova:nColumnWidthTw_11_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col1_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_2 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col2_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col1_AfterColumn + $altova:nColumnWidthTw_11_2"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col2_AfterColumn)"/>
                        <xsl:text>\clvertalb\clpadl15\clpadfl3\clpadb15\clpadfb3\clpadt15\clpadft3\clpadr15\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_11_3 = $altova:nDefaultColumnWidthTw_11">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl11_Col3_AfterColumn" select="$altova:CurrGridPos_Tbl11_Col2_AfterColumn + $altova:nColumnWidthTw_11_3"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl11_Col3_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle11"/>
                        <xsl:value-of select="$altova:RowStyle65"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Totaal (stemcijfer)</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\cf141\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>_______________</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend11"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle11"/>
                    <xsl:value-of select="$altova:RowStyle65"/>
                    <xsl:value-of select="$rowend11"/>
                    <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="altova:CurrContextGrid_14" select="."/>
                    <xsl:variable name="altova:nTableWidthIn_12" select="$altova:nMaxWidthIn * 1.00000"/>
                    <xsl:variable name="altova:nTableWidthTw_12" select="$altova:nTableWidthIn_12 * 1440"/>
                    <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_12" select="round($altova:nTableWidthTw_12 * 0.25)"/>
                    <xsl:variable name="altova:nTableIndentTw_12" select="15"/>
                    <xsl:variable name="altova:nSumColumnWidthsTw_12" select="round(0.00)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidth_12" select="round(2)"/>
                    <xsl:variable name="altova:nColumnsWithDefaultWidthNotZero_12">
                        <xsl:choose>
                            <xsl:when test="$altova:nColumnsWithDefaultWidth_12 = 0">
                                <xsl:value-of select="round(2)"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$altova:nColumnsWithDefaultWidth_12"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:nDefaultColumnWidthTw_12">
                        <xsl:value-of select="$altova:nTableWidthTw_12 div $altova:nColumnsWithDefaultWidthNotZero_12"/>
                    </xsl:variable>
                    <xsl:variable name="altova:nColumnWidthTw_12_0" select="$altova:nDefaultColumnWidthTw_12"/>
                    <xsl:variable name="altova:nColumnWidthTw_12_1" select="$altova:nDefaultColumnWidthTw_12"/>
                    <xsl:text>\pard\f0\fs24</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:variable name="tablestyle12">
                        <xsl:text>\trowd</xsl:text>
                        <xsl:text>\trautofit1</xsl:text>
                        <xsl:text>\trftsWidth1</xsl:text>
                        <xsl:text>\trleft</xsl:text>
                        <xsl:value-of select="$altova:nTableIndentTw_12"/>
                        <xsl:text>\ts27\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrs\brdrcf142\brdrw15\trbrdrl\brdrs\brdrcf142\brdrw15\trbrdrb\brdrs\brdrcf142\brdrw15\trbrdrr\brdrs\brdrcf142\brdrw15</xsl:text>
                    </xsl:variable>
                    <xsl:variable name="rowend12">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\row\pard</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="cellend12">
                        <xsl:choose>
                            <xsl:when test="$templatetablelevel + 1 = 1">
                                <xsl:text>\cell</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>\nestcell</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="altova:RowStyle66">
                        <xsl:text>\trrh0</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl12" select="$altova:nTableIndentTw_12"/>
                        <xsl:text>\clvertalt\clbrdrt\brdrs\brdrcf143\brdrw15\clbrdrb\brdrs\brdrcf144\brdrw15\clbrdrl\brdrs\brdrcf143\brdrw15\clbrdrr\brdrs\brdrcf144\brdrw15\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_12_0 = $altova:nDefaultColumnWidthTw_12">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl12_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl12 + $altova:nColumnWidthTw_12_0"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col0_AfterColumn)"/>
                        <xsl:text>\clvertalb\clbrdrt\brdrs\brdrcf143\brdrw15\clbrdrb\brdrs\brdrcf144\brdrw15\clbrdrl\brdrs\brdrcf143\brdrw15\clbrdrr\brdrs\brdrcf144\brdrw15\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
                        <xsl:if test="$altova:nColumnWidthTw_12_1 = $altova:nDefaultColumnWidthTw_12">
                            <xsl:text>\clftsWidth1</xsl:text>
                        </xsl:if>
                        <xsl:text>\cellx</xsl:text>
                        <xsl:variable name="altova:CurrGridPos_Tbl12_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl12_Col0_AfterColumn + $altova:nColumnWidthTw_12_1"/>
                        <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl12_Col1_AfterColumn)"/>
                    </xsl:variable>
                    <xsl:if test="$templatetablelevel + 1 = 1">
                        <xsl:value-of select="$tablestyle12"/>
                        <xsl:value-of select="$altova:RowStyle66"/>
                    </xsl:if>
                    <xsl:text>\pard</xsl:text>
                    <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 1"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>Totale aantal op de lijst</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>uitgebrachte geldige stemmen</xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                    <xsl:text>\par </xsl:text>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend12"/>
                    <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
                    <xsl:for-each select="rg:ValidVotes">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_12_1 div 1440) - 0.01042 - 0.01042 - 0.02083 - 0.02083"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:text>\f0\fs24</xsl:text>
                    <xsl:value-of select="$cellend12"/>
                    <xsl:if test="$templatetablelevel + 1 > 1">
                        <xsl:text>{\*\nesttableprops</xsl:text>
                    </xsl:if>
                    <xsl:value-of select="$tablestyle12"/>
                    <xsl:value-of select="$altova:RowStyle66"/>
                    <xsl:value-of select="$rowend12"/>
                    <xsl:text>\pard\s0\f0\fs24\sl0\f1\fs18</xsl:text>
                    <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                    <xsl:text>\itap</xsl:text>
                    <xsl:value-of select="$templatetablelevel + 0"/>
                    <xsl:text> </xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:call-template name="LineBreakPdf">
                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
            </xsl:call-template>
            <xsl:text>\par </xsl:text>
            <xsl:if test="position() != last()">
                <xsl:text>\page </xsl:text>
            </xsl:if>
        </xsl:for-each>
        <xsl:text>\f0\fs24</xsl:text>
    </xsl:template>
    <xsl:template name="LongLine">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\cf141\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_________________________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="ElectionNameShort">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election name excluding date and &apos;verkiezing van...&apos;</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:call-template name="ElectionNameSimple">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
        <xsl:call-template name="ElectionDomain">
            <xsl:with-param name="isBold" select="$isBold"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="LastNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the last name &quot;Baron van der Zaag jr.&quot; (name components a+b+c+d).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NamePrefix">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:if test=". != &apos;&apos;">
                            <xsl:call-template name="Space">
                                <xsl:with-param name="fontSize" select="$fontSize"/>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:call-template>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each select="xnl:LastName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="FirstNameH1">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the initials and first name like &quot;H.H.G. (Henk)&quot; (name components e+f).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;smaller&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs20\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize=&apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="xnl:PersonName">
                    <xsl:for-each select="xnl:NameLine">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                    <xsl:if test="count(xnl:NameLine[@NameType=&quot;Initials&quot; and text() != &quot;&quot;]) &gt; 0 and count(xnl:FirstName) &gt; 0">
                        <xsl:call-template name="Space">
                            <xsl:with-param name="fontSize" select="$fontSize"/>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:call-template>
                    </xsl:if>
                    <xsl:for-each select="xnl:FirstName">
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:apply-templates>
                            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                        </xsl:apply-templates>
                        <xsl:text>}</xsl:text>
                        <xsl:text>{\f1\fs18\b </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>)</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Date">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:if test="$fontSize = &apos;normal&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$fontSize = &apos;x-small&apos;">
            <xsl:if test="$isBold=0">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:if test="substring(text(),9, 1) != &quot;0&quot;">
                    <xsl:text>{\f1\fs18\b </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="substring(text(),9, 1)"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:if>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),10, 1)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:choose>
                    <xsl:when test="substring(text(),6, 2) = &quot;01&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>januari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_januari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;02&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>februari</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_februari"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;03&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>maart</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_maart"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;04&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>april</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_april"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;05&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>mei</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_mei"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;06&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juni</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juni"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;07&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>juli</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_juli"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;08&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>augustus</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_augustus"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;09&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>september</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_september"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;10&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>oktober</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_oktober"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2) = &quot;11&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>november</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_november"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="substring(text(),6, 2)  = &quot;12&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>december</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18\b </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_Date_december"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:text>{\f1\fs18\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="substring(text(),1, 4)"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="GenerateDate">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$generateDate"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="HashCode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:text>{\f1\fs16 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:value-of select="$hashCode"/>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="FooterWithoutHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$isDraft=&quot;true&quot;">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>(Concept) </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_FooterWithoutHashcode_concept"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:if>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Datum: </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_FooterWithoutHashcode_datum"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:call-template name="GenerateDate">
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="FooterWithHashcode">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$isDraft=&quot;true&quot;">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>(Concept) | </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_concept"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Hashcode: </xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs16 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_FooterWithHashcode_hashcode"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:call-template name="HashCode">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
                <xsl:text>{\f1\fs16 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text> | </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
                <xsl:call-template name="GenerateDate">
                    <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                    <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Gender2">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="isSmaller" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Displays the gender as &quot; (m)&quot; or &quot; (v)&quot; with preceding blank (name component g).</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:if test="$isSmaller=0">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
        <xsl:if test="$isSmaller=1">
            <xsl:if test="$isBold=0">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
            <xsl:if test="$isBold=1">
                <xsl:for-each select="eml:Gender">
                    <xsl:choose>
                        <xsl:when test=".=&quot;male&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (m)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_m"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;female&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (v)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_v"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;unknown&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> (f)</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs20\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_Gender2_unknown"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:if>
        </xsl:if>
    </xsl:template>
    <xsl:template name="ElectionNameSimple">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Just election name</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>\par </xsl:text>
        </xsl:if>
        <xsl:for-each select="eml:ElectionIdentifier">
            <xsl:for-each select="eml:ElectionCategory">
                <xsl:choose>
                    <xsl:when test=".=&quot;EP&quot; or .=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>het </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_het"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text>de </xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_de"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="$isBold=0">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten van</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:if test="$isBold=1">
                    <xsl:choose>
                        <xsl:when test=".= &quot;TK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Tweede Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_tweedeKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EK&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Eerste Kamer der Staten-Generaal</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eersteKamer"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;PS&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>provinciale staten</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_provincialeStaten"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;EP&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>Europees Parlement</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_hetEuropeesParlement"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GR&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gemeenteraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_raadVanDeGemeente"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;ER&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>eilandsraad</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_eilandsraad"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;BC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>algemeen bestuur van de bestuurscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_bestuurscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                        <xsl:when test=".=&quot;GC&quot;">
                            <xsl:choose>
                                <xsl:when test="$lang=0">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>gebiedscommissie</xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="$RP_ElectionNameSimple_gebiedscommissie"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test=".=&quot;PS&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;GR&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;ER&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van het openbaar lichaam</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_eilandsraad"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test=".=&quot;BC&quot;">
                        <xsl:choose>
                            <xsl:when test="$lang=0">
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:text> van stadsdeel</xsl:text>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>{\f1\fs18 </xsl:text>
                                <xsl:call-template name="write-text">
                                    <xsl:with-param name="text">
                                        <xsl:value-of select="$RP_ElectionNameSimple_van_stadsdeel"/>
                                    </xsl:with-param>
                                </xsl:call-template>
                                <xsl:text>}</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="LineBreakPdf">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>\par </xsl:text>
        </xsl:if>
    </xsl:template>
    <xsl:template name="SmallLineBreak">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="LineBreakTable">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:choose>
            <xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
                <xsl:text>\pard</xsl:text>
                <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
                <xsl:text>\itap</xsl:text>
                <xsl:value-of select="$templatetablelevel + 0"/>
                <xsl:text>\s0\f0\fs24\sl0\f1\fs18 </xsl:text>
                <xsl:text>\f0\fs24</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\par </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="ElectionDomain">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:param name="font-size" select="&apos;small&apos;"/>
        <xsl:if test="0=1">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>Election domain as part of the elction name - if needed</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:if test="$isBold=0 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18 </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;small&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs18\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
        <xsl:if test="$isBold=1 and $font-size=&apos;medium&apos;">
            <xsl:for-each select="eml:ElectionIdentifier">
                <xsl:choose>
                    <xsl:when test="./eml:ElectionCategory[text()=&quot;PS&quot; or text()=&quot;GR&quot; or text()=&quot;ER&quot;]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:text>{\f1\fs26\b </xsl:text>
                            <xsl:call-template name="write-text">
                                <xsl:with-param name="text">
                                    <xsl:text> </xsl:text>
                                </xsl:with-param>
                            </xsl:call-template>
                            <xsl:text>}</xsl:text>
                            <xsl:text>{\f1\fs26\b </xsl:text>
                            <xsl:apply-templates>
                                <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                            </xsl:apply-templates>
                            <xsl:text>}</xsl:text>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="./eml:ElectionCategory[ text()=&quot;BC&quot; or text()=&quot;GC&quot; ]">
                        <xsl:for-each select="kr:ElectionDomain">
                            <xsl:choose>
                                <xsl:when test=". != &quot;Rotterdam - Centrum&quot;  and  . != &quot;Rotterdam - Pernis&quot;">
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:value-of select="substring( text() , 13 )"/>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text> </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs26\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:for-each>
                    </xsl:when>
                </xsl:choose>
            </xsl:for-each>
        </xsl:if>
    </xsl:template>
    <xsl:template name="Space">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="fontSize" select="&apos;normal&apos;"/>
        <xsl:choose>
            <xsl:when test="$fontSize=&quot;normal&quot;">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&quot;smaller&quot;">
                <xsl:text>{\f1\fs20 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:when test="$fontSize=&apos;x-small&apos;">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="&apos; &apos;"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="Line">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\f1\fs22 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>________</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\f1\fs22 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_________________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\par </xsl:text>
    </xsl:template>
    <xsl:template name="FooterLine">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:if test="$SV_OutputFormat = &apos;PDF&apos;">
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text>______</xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
        </xsl:if>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>__________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
    </xsl:template>
    <xsl:template name="LegacyFooter">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isHashcode" select="1"/>
        <xsl:param name="isPagenumber" select="1"/>
        <xsl:variable name="altova:CurrContextGrid_15" select="."/>
        <xsl:variable name="altova:nTableWidthIn_13" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_13" select="$altova:nTableWidthIn_13 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_13" select="round($altova:nTableWidthTw_13 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_13" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_13" select="round(0.00 + 1.00 * $altova:nTableWidthTw_13)"/>
        <xsl:variable name="altova:TableWidthFactor_13">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_13 &gt; $altova:nTableWidthTw_13">
                    <xsl:value-of select="$altova:nTableWidthTw_13 div $altova:nSumColumnWidthsTw_13"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_13" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_13_0" select="round($altova:nTableWidthTw_13 * 0.83 * $altova:TableWidthFactor_13)"/>
        <xsl:variable name="altova:nColumnWidthTw_13_1" select="round($altova:nTableWidthTw_13 * 0.17 * $altova:TableWidthFactor_13)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle13">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_13)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_13"/>
            <xsl:text>\ts28\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend13">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend13">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle67">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle13"/>
            <xsl:value-of select="$altova:RowStyle67"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle13"/>
        <xsl:value-of select="$altova:RowStyle67"/>
        <xsl:value-of select="$rowend13"/>
        <xsl:variable name="altova:RowStyle68">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle13"/>
            <xsl:value-of select="$altova:RowStyle68"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="FooterLine">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_0 div 1440) + ($altova:nColumnWidthTw_13_1 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle13"/>
        <xsl:value-of select="$altova:RowStyle68"/>
        <xsl:value-of select="$rowend13"/>
        <xsl:variable name="altova:RowStyle69">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13" select="$altova:nTableIndentTw_13"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_0 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl13 + $altova:nColumnWidthTw_13_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_13_1 = $altova:nDefaultColumnWidthTw_13">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl13_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl13_Col0_AfterColumn + $altova:nColumnWidthTw_13_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl13_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle13"/>
            <xsl:value-of select="$altova:RowStyle69"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isHashcode=1">
            <xsl:call-template name="FooterWithHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:if test="$isHashcode=0">
            <xsl:call-template name="FooterWithoutHashcode">
                <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_13_0 div 1440)"/>
                <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
            </xsl:call-template>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:if test="$isPagenumber=1">
            <xsl:choose>
                <xsl:when test="$lang=0">
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:text>pagina </xsl:text>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>{\f1\fs18 </xsl:text>
                    <xsl:call-template name="write-text">
                        <xsl:with-param name="text">
                            <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                        </xsl:with-param>
                    </xsl:call-template>
                    <xsl:text>}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text/>
            <xsl:text>\chpgn</xsl:text>
            <xsl:text>{\f1\fs18 </xsl:text>
            <xsl:call-template name="write-text">
                <xsl:with-param name="text">
                    <xsl:text> / </xsl:text>
                </xsl:with-param>
            </xsl:call-template>
            <xsl:text>}</xsl:text>
            <xsl:text>{\field{\*\fldinst{\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        </xsl:if>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend13"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle13"/>
        <xsl:value-of select="$altova:RowStyle69"/>
        <xsl:value-of select="$rowend13"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="Contests">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="separator" select="&apos;comma&apos;"/>
        <xsl:param name="isBold" select="0"/>
        <xsl:for-each select="eml:Affiliation">
            <xsl:for-each select="kr:ListData">
                <xsl:for-each select="kr:Contests">
                    <xsl:for-each select="kr:Contest">
                        <xsl:if test="$separator=&apos;newline&apos; and position()=1">
                            <xsl:text>\par </xsl:text>
                        </xsl:if>
                        <xsl:if test="$isBold = 1">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18\b </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                        <xsl:if test="$isBold = 0">
                            <xsl:choose>
                                <xsl:when test="$separator=&apos;comma&apos; and position()!=last()">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:call-template name="write-text">
                                        <xsl:with-param name="text">
                                            <xsl:text>, </xsl:text>
                                        </xsl:with-param>
                                    </xsl:call-template>
                                    <xsl:text>}</xsl:text>
                                </xsl:when>
                                <xsl:when test="$separator=&apos;newline&apos;">
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                    <xsl:text>\par </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>{\f1\fs18 </xsl:text>
                                    <xsl:apply-templates>
                                        <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
                                        <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
                                    </xsl:apply-templates>
                                    <xsl:text>}</xsl:text>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>
    <xsl:template name="ChapterElection">
        <xsl:param name="altova:nMaxWidthIn" select="6.26389"/>
        <xsl:param name="templatetablelevel" select="0"/>
        <xsl:param name="isH3" select="0"/>
        <xsl:text>{\f1\fs21\b </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>1. </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>Verkiezing</xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs21\b </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_ChapterElection_Verkiezing"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:choose>
            <xsl:when test="$isH3 = 0">
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterElection_HetGaatOmVerkiezing"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$lang=0">
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:text>Het gaat om de kandidatenlijst voor de verkiezing van:</xsl:text>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>{\f1\fs18 </xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text">
                                <xsl:value-of select="$RP_ChapterElection_HetGaatOmKandidatenlijst"/>
                            </xsl:with-param>
                        </xsl:call-template>
                        <xsl:text>}</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text>\par </xsl:text>
        <xsl:text>\par </xsl:text>
        <xsl:call-template name="ElectionNameShort">
            <xsl:with-param name="isBold" select="1"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterRight">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="isHashcode" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:Section_0_FooterLeft">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:call-template name="LegacyFooter">
            <xsl:with-param name="isHashcode" select="0"/>
            <xsl:with-param name="altova:nMaxWidthIn" select="$altova:nMaxWidthIn"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 0"/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:Section_11_FooterRight">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_16" select="."/>
        <xsl:variable name="altova:nTableWidthIn_14" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_14" select="$altova:nTableWidthIn_14 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_14" select="round($altova:nTableWidthTw_14 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_14" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_14" select="round(0.00 + 1.00 * $altova:nTableWidthTw_14)"/>
        <xsl:variable name="altova:TableWidthFactor_14">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_14 &gt; $altova:nTableWidthTw_14">
                    <xsl:value-of select="$altova:nTableWidthTw_14 div $altova:nSumColumnWidthsTw_14"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_14" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_14_0" select="round($altova:nTableWidthTw_14 * 0.83 * $altova:TableWidthFactor_14)"/>
        <xsl:variable name="altova:nColumnWidthTw_14_1" select="round($altova:nTableWidthTw_14 * 0.17 * $altova:TableWidthFactor_14)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle14">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_14)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_14"/>
            <xsl:text>\ts29\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend14">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend14">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle70">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14" select="$altova:nTableIndentTw_14"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_0 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl14 + $altova:nColumnWidthTw_14_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_1 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col0_AfterColumn + $altova:nColumnWidthTw_14_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle14"/>
            <xsl:value-of select="$altova:RowStyle70"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Paraaf voorzitter </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf141\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_____________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle14"/>
        <xsl:value-of select="$altova:RowStyle70"/>
        <xsl:value-of select="$rowend14"/>
        <xsl:variable name="altova:RowStyle71">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14" select="$altova:nTableIndentTw_14"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_0 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl14 + $altova:nColumnWidthTw_14_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_1 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col0_AfterColumn + $altova:nColumnWidthTw_14_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle14"/>
            <xsl:value-of select="$altova:RowStyle71"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_______________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle14"/>
        <xsl:value-of select="$altova:RowStyle71"/>
        <xsl:value-of select="$rowend14"/>
        <xsl:variable name="altova:RowStyle72">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14" select="$altova:nTableIndentTw_14"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_0 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl14 + $altova:nColumnWidthTw_14_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_14_1 = $altova:nDefaultColumnWidthTw_14">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl14_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl14_Col0_AfterColumn + $altova:nColumnWidthTw_14_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl14_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle14"/>
            <xsl:value-of select="$altova:RowStyle72"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="FooterWithoutHashcode">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_14_0 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>pagina </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text/>
        <xsl:text>\chpgn</xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> / </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\field{\*\fldinst{\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend14"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle14"/>
        <xsl:value-of select="$altova:RowStyle72"/>
        <xsl:value-of select="$rowend14"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="altova:Section_11_FooterLeft">
        <xsl:variable name="altova:nMaxWidthIn" select="6.26"/>
        <xsl:variable name="templatetablelevel" select="0"/>
        <xsl:variable name="altova:CurrContextGrid_16" select="."/>
        <xsl:variable name="altova:nTableWidthIn_15" select="$altova:nMaxWidthIn * 1.00000"/>
        <xsl:variable name="altova:nTableWidthTw_15" select="$altova:nTableWidthIn_15 * 1440"/>
        <xsl:variable name="altova:SumDefaultColumnsForWideTableTw_15" select="round($altova:nTableWidthTw_15 * 0.25)"/>
        <xsl:variable name="altova:nTableIndentTw_15" select="0"/>
        <xsl:variable name="altova:nSumColumnWidthsTw_15" select="round(0.00 + 1.00 * $altova:nTableWidthTw_15)"/>
        <xsl:variable name="altova:TableWidthFactor_15">
            <xsl:choose>
                <xsl:when test="$altova:nSumColumnWidthsTw_15 &gt; $altova:nTableWidthTw_15">
                    <xsl:value-of select="$altova:nTableWidthTw_15 div $altova:nSumColumnWidthsTw_15"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="1"/>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:nDefaultColumnWidthTw_15" select="0"/>
        <xsl:variable name="altova:nColumnWidthTw_15_0" select="round($altova:nTableWidthTw_15 * 0.83 * $altova:TableWidthFactor_15)"/>
        <xsl:variable name="altova:nColumnWidthTw_15_1" select="round($altova:nTableWidthTw_15 * 0.17 * $altova:TableWidthFactor_15)"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:variable name="tablestyle15">
            <xsl:text>\trowd</xsl:text>
            <xsl:text>\trautofit1</xsl:text>
            <xsl:text>\trftsWidth3\trwWidth</xsl:text>
            <xsl:value-of select="round($altova:nTableWidthTw_15)"/>
            <xsl:text>\trleft</xsl:text>
            <xsl:value-of select="$altova:nTableIndentTw_15"/>
            <xsl:text>\ts30\trspdl15\trspdt15\trspdb15\trspdr15\trspdfl3\trspdft3\trspdfb3\trspdfr3\trpaddt30\trpaddl30\trpaddb30\trpaddr30\trpaddft3\trpaddfl3\trpaddfb3\trpaddfr3\trbrdrt\brdrnil\trbrdrl\brdrnil\trbrdrb\brdrnil\trbrdrr\brdrnil</xsl:text>
        </xsl:variable>
        <xsl:variable name="rowend15">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\row\pard</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestrow}{\nonesttables\par}</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="cellend15">
            <xsl:choose>
                <xsl:when test="$templatetablelevel + 1 = 1">
                    <xsl:text>\cell</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>\nestcell</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="altova:RowStyle73">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
            <xsl:text>\clvertalc\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle73"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>Paraaf voorzitter </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\cf141\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_____________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle15"/>
        <xsl:value-of select="$altova:RowStyle73"/>
        <xsl:value-of select="$rowend15"/>
        <xsl:variable name="altova:RowStyle74">
            <xsl:text>\trrh0</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
            <xsl:text>\clvertalb\clmgf\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
            <xsl:text>\clvertalc\clmrg\clpadl30\clpadfl3\clpadb30\clpadfb3\clpadt30\clpadft3\clpadr30\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle74"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text>_______________________________________________________________________</xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle15"/>
        <xsl:value-of select="$altova:RowStyle74"/>
        <xsl:value-of select="$rowend15"/>
        <xsl:variable name="altova:RowStyle75">
            <xsl:text>\trrh600</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15" select="$altova:nTableIndentTw_15"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_0 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col0_AfterColumn" select="$altova:CurrGridPos_Tbl15 + $altova:nColumnWidthTw_15_0"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col0_AfterColumn)"/>
            <xsl:text>\clvertalt\clpadl0\clpadfl3\clpadb0\clpadfb3\clpadt0\clpadft3\clpadr0\clpadfr3</xsl:text>
            <xsl:if test="$altova:nColumnWidthTw_15_1 = $altova:nDefaultColumnWidthTw_15">
                <xsl:text>\clftsWidth1</xsl:text>
            </xsl:if>
            <xsl:text>\cellx</xsl:text>
            <xsl:variable name="altova:CurrGridPos_Tbl15_Col1_AfterColumn" select="$altova:CurrGridPos_Tbl15_Col0_AfterColumn + $altova:nColumnWidthTw_15_1"/>
            <xsl:value-of select="ceiling($altova:CurrGridPos_Tbl15_Col1_AfterColumn)"/>
        </xsl:variable>
        <xsl:if test="$templatetablelevel + 1 = 1">
            <xsl:value-of select="$tablestyle15"/>
            <xsl:value-of select="$altova:RowStyle75"/>
        </xsl:if>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 1 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 1"/>
        <xsl:text>\ql\sl0\f1\fs18 </xsl:text>
        <xsl:call-template name="FooterWithoutHashcode">
            <xsl:with-param name="altova:nMaxWidthIn" select="($altova:nColumnWidthTw_15_0 div 1440)"/>
            <xsl:with-param name="templatetablelevel" select="$templatetablelevel + 1"/>
        </xsl:call-template>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:text>\qr\sl0\f1\fs18 </xsl:text>
        <xsl:choose>
            <xsl:when test="$lang=0">
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:text>pagina </xsl:text>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>{\f1\fs18 </xsl:text>
                <xsl:call-template name="write-text">
                    <xsl:with-param name="text">
                        <xsl:value-of select="$RP_LegacyFooter_pagina"/>
                    </xsl:with-param>
                </xsl:call-template>
                <xsl:text>}</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
        <xsl:text/>
        <xsl:text>\chpgn</xsl:text>
        <xsl:text>{\f1\fs18 </xsl:text>
        <xsl:call-template name="write-text">
            <xsl:with-param name="text">
                <xsl:text> / </xsl:text>
            </xsl:with-param>
        </xsl:call-template>
        <xsl:text>}</xsl:text>
        <xsl:text>{\field{\*\fldinst{\f1\fs18 NUMPAGES }}{\fldrslt }}</xsl:text>
        <xsl:text>\f0\fs24</xsl:text>
        <xsl:value-of select="$cellend15"/>
        <xsl:if test="$templatetablelevel + 1 > 1">
            <xsl:text>{\*\nesttableprops</xsl:text>
        </xsl:if>
        <xsl:value-of select="$tablestyle15"/>
        <xsl:value-of select="$altova:RowStyle75"/>
        <xsl:value-of select="$rowend15"/>
        <xsl:text>\pard</xsl:text>
        <xsl:if test="$templatetablelevel + 0 &gt; 0">\intbl</xsl:if>
        <xsl:text>\itap</xsl:text>
        <xsl:value-of select="$templatetablelevel + 0"/>
        <xsl:text> </xsl:text>
    </xsl:template>
    <xsl:template name="EmptyHeader"/>
    <xsl:template name="write-text">
        <xsl:param name="text"/>
        <xsl:param name="bEscape" select="true()"/>
        <xsl:choose>
            <xsl:when test="$bEscape">
                <xsl:variable name="sLinefeed" select="'&#x0A;'"/>
                <xsl:choose>
                    <xsl:when test="contains($text, $sLinefeed)">
                        <xsl:variable name="first-line" select="substring-before($text, $sLinefeed)"/>
                        <xsl:variable name="rest" select="substring-after($text, $sLinefeed)"/>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$first-line"/>
                        </xsl:call-template>
                        <xsl:text>\u13?</xsl:text>
                        <xsl:call-template name="write-text">
                            <xsl:with-param name="text" select="$rest"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-line">
                            <xsl:with-param name="text" select="$text"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="string($text)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-line">
        <xsl:param name="text"/>
        <xsl:variable name="text-length" select="string-length($text)"/>
        <xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
        <xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
        <xsl:choose>
            <xsl:when test="$text-after-bs-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '\'">
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\\')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-ob">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-bs-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-line">
                    <xsl:with-param name="text" select="$text-after-bs"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-ob">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-ob" select="substring-after($text, '{')"/>
        <xsl:variable name="text-after-ob-length" select="string-length($text-after-ob)"/>
        <xsl:choose>
            <xsl:when test="$text-after-ob-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '{'">
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="concat(substring($text,1,$text-length - 1), '\{')"/>
                            <xsl:with-param name="text-length" select="$text-length + 1"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="write-text-cb">
                            <xsl:with-param name="text" select="$text"/>
                            <xsl:with-param name="text-length" select="$text-length"/>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="concat(substring($text,1,$text-length - $text-after-ob-length - 1), '\{')"/>
                    <xsl:with-param name="text-length" select="$text-length - $text-after-ob-length + 1"/>
                </xsl:call-template>
                <xsl:call-template name="write-text-ob">
                    <xsl:with-param name="text" select="$text-after-ob"/>
                    <xsl:with-param name="text-length" select="$text-after-ob-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="write-text-cb">
        <xsl:param name="text"/>
        <xsl:param name="text-length"/>
        <xsl:variable name="text-after-cb" select="substring-after($text, '}')"/>
        <xsl:variable name="text-after-cb-length" select="string-length($text-after-cb)"/>
        <xsl:choose>
            <xsl:when test="$text-after-cb-length = 0">
                <xsl:choose>
                    <xsl:when test="substring($text, $text-length) = '}'">
                        <xsl:value-of select="concat(substring($text,1,$text-length - 1), '\}')"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$text"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="concat(substring($text,1,$text-length - $text-after-cb-length - 1), '\}')"/>
                <xsl:call-template name="write-text-cb">
                    <xsl:with-param name="text" select="$text-after-cb"/>
                    <xsl:with-param name="text-length" select="$text-after-cb-length"/>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template match="text()|@*">
        <xsl:call-template name="write-text">
            <xsl:with-param name="text" select="."/>
        </xsl:call-template>
    </xsl:template>
    <xsl:template name="altova:GetColorID">
        <xsl:param name="text"/>
        <xsl:variable name="txt" select="translate($text, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$txt = 'WHITE'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'IVORY'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTYELLOW'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOW'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SNOW'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FLORALWHITE'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LEMONCHIFFON'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNSILK'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEASHELL'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDERBLUSH'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PAPAYAWHIP'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLANCHEDALMOND'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MISTYROSE'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BISQUE'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MOCCASIN'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVAJOWHITE'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PEACHPUFF'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLD'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PINK'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTPINK'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGE'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSALMON'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORANGE'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORAL'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HOTPINK'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TOMATO'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORANGERED'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPPINK'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FUCHSIA'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAGENTA'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'RED'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLDLACE'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGOLDENRODYELLOW'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LINEN'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ANTIQUEWHITE'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SALMON'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GHOSTWHITE'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MINTCREAM'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHITESMOKE'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BEIGE'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'WHEAT'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SANDYBROWN'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AZURE'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'HONEYDEW'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ALICEBLUE'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'KHAKI'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCORAL'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGOLDENROD'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'VIOLET'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSALMON'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAVENDER'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTCYAN'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BURLYWOOD'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PLUM'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GAINSBORO'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CRIMSON'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEVIOLETRED'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GOLDENROD'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ORCHID'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'THISTLE'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGRAY'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TAN'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHOCOLATE'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PERU'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIANRED'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMVIOLETRED'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SILVER'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKKHAKI'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROSYBROWN'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMORCHID'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGOLDENROD'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FIREBRICK'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'POWDERBLUE'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSTEELBLUE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALETURQUOISE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREENYELLOW'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTBLUE'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGRAY'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BROWN'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SIENNA'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'YELLOWGREEN'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKORCHID'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PALEGREEN'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKVIOLET'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMPURPLE'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTGREEN'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSEAGREEN'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SADDLEBROWN'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKMAGENTA'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKRED'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUEVIOLET'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSKYBLUE'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SKYBLUE'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GRAY'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVE'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'PURPLE'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MAROON'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUAMARINE'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CHARTREUSE'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LAWNGREEN'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSLATEBLUE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSLATEGRAY'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEGRAY'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'OLIVEDRAB'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SLATEBLUE'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DIMGRAY'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMAQUAMARINE'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CORNFLOWERBLUE'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CADETBLUE'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKOLIVEGREEN'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'INDIGO'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMTURQUOISE'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEBLUE'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'STEELBLUE'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ROYALBLUE'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TURQUOISE'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSEAGREEN'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIMEGREEN'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKSLATEGRAY'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SEAGREEN'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FORESTGREEN'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIGHTSEAGREEN'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DODGERBLUE'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MIDNIGHTBLUE'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CYAN'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AQUA'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'SPRINGGREEN'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'LIME'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMSPRINGGREEN'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKTURQUOISE'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEEPSKYBLUE'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKCYAN'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'TEAL'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'GREEN'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKGREEN'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLUE'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'MEDIUMBLUE'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DARKBLUE'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'NAVY'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BLACK'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFFF'">
                <xsl:text>140</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFF0'">
                <xsl:text>139</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFFE0'">
                <xsl:text>138</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFF00'">
                <xsl:text>137</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAFA'">
                <xsl:text>136</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFAF0'">
                <xsl:text>135</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFFACD'">
                <xsl:text>134</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF8DC'">
                <xsl:text>133</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF5EE'">
                <xsl:text>132</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFF0F5'">
                <xsl:text>131</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEFD5'">
                <xsl:text>130</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFEBCD'">
                <xsl:text>129</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4E1'">
                <xsl:text>128</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4C4'">
                <xsl:text>127</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFE4B5'">
                <xsl:text>126</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDEAD'">
                <xsl:text>125</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFDAB9'">
                <xsl:text>124</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFD700'">
                <xsl:text>123</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFC0CB'">
                <xsl:text>122</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFB6C1'">
                <xsl:text>121</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA500'">
                <xsl:text>120</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FFA07A'">
                <xsl:text>119</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF8C00'">
                <xsl:text>118</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF7F50'">
                <xsl:text>117</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF69B4'">
                <xsl:text>116</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF6347'">
                <xsl:text>115</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF4500'">
                <xsl:text>114</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF1493'">
                <xsl:text>113</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>112</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF00FF'">
                <xsl:text>111</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FF0000'">
                <xsl:text>110</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FDF5E6'">
                <xsl:text>109</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAFAD2'">
                <xsl:text>108</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAF0E6'">
                <xsl:text>107</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FAEBD7'">
                <xsl:text>106</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'FA8072'">
                <xsl:text>105</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F8F8FF'">
                <xsl:text>104</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5FFFA'">
                <xsl:text>103</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5F5'">
                <xsl:text>102</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5F5DC'">
                <xsl:text>101</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F5DEB3'">
                <xsl:text>100</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F4A460'">
                <xsl:text>99</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFFF'">
                <xsl:text>98</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0FFF0'">
                <xsl:text>97</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0F8FF'">
                <xsl:text>96</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F0E68C'">
                <xsl:text>95</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'F08080'">
                <xsl:text>94</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EEE8AA'">
                <xsl:text>93</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'EE82EE'">
                <xsl:text>92</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E9967A'">
                <xsl:text>91</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E6E6FA'">
                <xsl:text>90</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'E0FFFF'">
                <xsl:text>89</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DEB887'">
                <xsl:text>88</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DDA0DD'">
                <xsl:text>87</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DCDCDC'">
                <xsl:text>86</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DC143C'">
                <xsl:text>85</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DB7093'">
                <xsl:text>84</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DAA520'">
                <xsl:text>83</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'DA70D6'">
                <xsl:text>82</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D8BFD8'">
                <xsl:text>81</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D3D3D3'">
                <xsl:text>80</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2B48C'">
                <xsl:text>79</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'D2691E'">
                <xsl:text>78</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD853F'">
                <xsl:text>77</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'CD5C5C'">
                <xsl:text>76</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C71585'">
                <xsl:text>75</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'C0C0C0'">
                <xsl:text>74</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BDB76B'">
                <xsl:text>73</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BC8F8F'">
                <xsl:text>72</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'BA55D3'">
                <xsl:text>71</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B8860B'">
                <xsl:text>70</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B22222'">
                <xsl:text>69</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0E0E6'">
                <xsl:text>68</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'B0C4DE'">
                <xsl:text>67</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'AFEEEE'">
                <xsl:text>66</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADFF2F'">
                <xsl:text>65</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'ADD8E6'">
                <xsl:text>64</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A9A9A9'">
                <xsl:text>63</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A52A2A'">
                <xsl:text>62</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = 'A0522D'">
                <xsl:text>61</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9ACD32'">
                <xsl:text>60</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9932CC'">
                <xsl:text>59</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '98FB98'">
                <xsl:text>58</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9400D3'">
                <xsl:text>57</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '9370DB'">
                <xsl:text>56</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '90EE90'">
                <xsl:text>55</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8FBC8B'">
                <xsl:text>54</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B4513'">
                <xsl:text>53</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B008B'">
                <xsl:text>52</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8B0000'">
                <xsl:text>51</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '8A2BE2'">
                <xsl:text>50</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEFA'">
                <xsl:text>49</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '87CEEB'">
                <xsl:text>48</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808080'">
                <xsl:text>47</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '808000'">
                <xsl:text>46</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800080'">
                <xsl:text>45</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '800000'">
                <xsl:text>44</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFFD4'">
                <xsl:text>43</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7FFF00'">
                <xsl:text>42</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7CFC00'">
                <xsl:text>41</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '7B68EE'">
                <xsl:text>40</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '778899'">
                <xsl:text>39</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '708090'">
                <xsl:text>38</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6B8E23'">
                <xsl:text>37</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6A5ACD'">
                <xsl:text>36</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '696969'">
                <xsl:text>35</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '66CDAA'">
                <xsl:text>34</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '6495ED'">
                <xsl:text>33</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '5F9EA0'">
                <xsl:text>32</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '556B2F'">
                <xsl:text>31</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4B0082'">
                <xsl:text>30</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '48D1CC'">
                <xsl:text>29</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '483D8B'">
                <xsl:text>28</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4682B4'">
                <xsl:text>27</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '4169E1'">
                <xsl:text>26</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '40E0D0'">
                <xsl:text>25</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '3CB371'">
                <xsl:text>24</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '32CD32'">
                <xsl:text>23</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2F4F4F'">
                <xsl:text>22</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '2E8B57'">
                <xsl:text>21</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '228B22'">
                <xsl:text>20</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '20B2AA'">
                <xsl:text>19</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '1E90FF'">
                <xsl:text>18</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '191970'">
                <xsl:text>17</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>16</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FFFF'">
                <xsl:text>15</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF7F'">
                <xsl:text>14</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FF00'">
                <xsl:text>13</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00FA9A'">
                <xsl:text>12</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00CED1'">
                <xsl:text>11</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00BFFF'">
                <xsl:text>10</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008B8B'">
                <xsl:text>9</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008080'">
                <xsl:text>8</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '008000'">
                <xsl:text>7</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '006400'">
                <xsl:text>6</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000FF'">
                <xsl:text>5</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '0000CD'">
                <xsl:text>4</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '00008B'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000080'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$txt = '000000'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetFontID">
        <xsl:param name="font"/>
        <xsl:variable name="font-upper" select="translate($font, 'abcdefghijklmnopqrstuvwxyz#', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' )"/>
        <xsl:choose>
            <xsl:when test="$font-upper = 'TIMES NEW ROMAN'">
                <xsl:text>0</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'ARIAL'">
                <xsl:text>1</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'SYMBOL'">
                <xsl:text>2</xsl:text>
            </xsl:when>
            <xsl:when test="$font-upper = 'WINGDINGS'">
                <xsl:text>3</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:GetRtfBorderStyle">
        <xsl:param name="style"/>
        <xsl:choose>
            <xsl:when test="$style='none'">
                <xsl:text>\brdrnil</xsl:text>
            </xsl:when>
            <xsl:when test="$style='hidden'">
                <xsl:text>\brdrnone</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dotted'">
                <xsl:text>\brdrdot</xsl:text>
            </xsl:when>
            <xsl:when test="$style='dashed'">
                <xsl:text>\brdrdash</xsl:text>
            </xsl:when>
            <xsl:when test="$style='solid'">
                <xsl:text>\brdrs</xsl:text>
            </xsl:when>
            <xsl:when test="$style='double'">
                <xsl:text>\brdrd</xsl:text>
            </xsl:when>
            <xsl:when test="$style='groove'">
                <xsl:text>\brdrengrave</xsl:text>
            </xsl:when>
            <xsl:when test="$style='ridge'">
                <xsl:text>\brdremboss</xsl:text>
            </xsl:when>
            <xsl:when test="$style='inset'">
                <xsl:text>\brdrinset</xsl:text>
            </xsl:when>
            <xsl:when test="$style='outset'">
                <xsl:text>\brdroutset</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>\brdrnil</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    <xsl:template name="altova:ConvertWidthToTwips">
        <xsl:param name="width"/>
        <xsl:variable name="normal-width" select="normalize-space($width)"/>
        <xsl:choose>
            <xsl:when test="contains($normal-width,'px')">
                <xsl:value-of select="(number(substring-before($normal-width,'px')) * 1440) div $altova:nPxPerIn"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'cm')">
                <xsl:value-of select="(number(substring-before($normal-width,'cm')) * 1440) div 2.54"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'mm')">
                <xsl:value-of select="(number(substring-before($normal-width,'mm')) * 1440) div 25.4"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'in')">
                <xsl:value-of select="number(substring-before($normal-width,'in')) * 1440"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pc')">
                <xsl:value-of select="number(substring-before($normal-width,'pc')) * 240"/>
            </xsl:when>
            <xsl:when test="contains($normal-width,'pt')">
                <xsl:value-of select="number(substring-before($normal-width,'pt')) * 20"/>
            </xsl:when>
            <xsl:when test="$normal-width='thin'">
                <xsl:value-of select="30"/>
            </xsl:when>
            <xsl:when test="$normal-width='medium'">
                <xsl:value-of select="60"/>
            </xsl:when>
            <xsl:when test="$normal-width='thick'">
                <xsl:value-of select="80"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>0</xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
</xsl:stylesheet>
